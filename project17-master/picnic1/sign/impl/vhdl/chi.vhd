-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity chi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of chi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal y_fu_131_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_309 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln374_1_fu_149_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln374_1_reg_314 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln372_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_161_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_325 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln373_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_load_reg_337 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal x_9_fu_282_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_9_reg_355 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln375_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln376_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln376_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal C_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_0_reg_91 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_0_reg_102 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal x_1_reg_114 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln374_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln374_1_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln374_2_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln374_3_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln376_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln376_1_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln374_4_fu_137_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_141_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln374_5_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln374_fu_171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln374_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln374_2_fu_186_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln374_fu_192_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln374_6_fu_199_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln374_2_fu_203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln374_3_fu_213_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln374_1_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln374_6_fu_225_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln374_1_fu_231_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln374_7_fu_239_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln374_4_fu_243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln374_fu_253_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln374_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln376_2_fu_293_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component theta_D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    C_U : component theta_D
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    x_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_0_reg_102 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                x_0_reg_102 <= x_reg_325;
            end if; 
        end if;
    end process;

    x_1_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln373_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_1_reg_114 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                x_1_reg_114 <= x_9_reg_355;
            end if; 
        end if;
    end process;

    y_0_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln375_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                y_0_reg_91 <= y_reg_309;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_reg_91 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                A_load_reg_337 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln374_1_reg_314 <= add_ln374_1_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln375_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln376_reg_365 <= add_ln376_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                x_9_reg_355 <= x_9_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x_reg_325 <= x_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_309 <= y_fu_131_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln372_fu_125_p2, ap_CS_fsm_state3, icmp_ln373_fu_155_p2, ap_CS_fsm_state6, icmp_ln375_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln372_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln373_fu_155_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln375_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln374_fu_176_p1, zext_ln374_1_fu_208_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= zext_ln374_1_fu_208_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= zext_ln374_fu_176_p1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, zext_ln374_2_fu_248_p1, zext_ln376_1_fu_302_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= zext_ln376_1_fu_302_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= zext_ln374_2_fu_248_p1(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d1 <= C_q0;

    A_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln374_3_fu_271_p1, zext_ln376_fu_288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            C_address0 <= zext_ln376_fu_288_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_address0 <= zext_ln374_3_fu_271_p1(3 - 1 downto 0);
        else 
            C_address0 <= "XXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= (and_ln374_fu_259_p2 xor A_load_reg_337);

    C_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln374_1_fu_149_p2 <= std_logic_vector(unsigned(zext_ln374_4_fu_137_p1) + unsigned(shl_ln_fu_141_p3));
    add_ln374_2_fu_203_p2 <= std_logic_vector(unsigned(add_ln374_1_reg_314) + unsigned(zext_ln374_6_fu_199_p1));
    add_ln374_3_fu_213_p2 <= std_logic_vector(unsigned(x_0_reg_102) + unsigned(ap_const_lv3_2));
    add_ln374_4_fu_243_p2 <= std_logic_vector(unsigned(add_ln374_1_reg_314) + unsigned(zext_ln374_7_fu_239_p1));
    add_ln374_6_fu_225_p2 <= std_logic_vector(unsigned(x_0_reg_102) + unsigned(ap_const_lv3_5));
    add_ln374_fu_171_p2 <= std_logic_vector(unsigned(add_ln374_1_reg_314) + unsigned(zext_ln374_5_fu_167_p1));
    add_ln376_fu_297_p2 <= std_logic_vector(unsigned(add_ln374_1_reg_314) + unsigned(zext_ln376_2_fu_293_p1));
    and_ln374_fu_259_p2 <= (xor_ln374_fu_253_p2 and A_q1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln372_fu_125_p2)
    begin
        if ((((icmp_ln372_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln372_fu_125_p2)
    begin
        if (((icmp_ln372_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln372_fu_125_p2 <= "1" when (y_0_reg_91 = ap_const_lv3_5) else "0";
    icmp_ln373_fu_155_p2 <= "1" when (x_0_reg_102 = ap_const_lv3_5) else "0";
    icmp_ln374_1_fu_219_p2 <= "1" when (unsigned(add_ln374_3_fu_213_p2) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln374_fu_181_p2 <= "1" when (unsigned(x_reg_325) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln375_fu_276_p2 <= "1" when (x_1_reg_114 = ap_const_lv3_5) else "0";
    select_ln374_1_fu_231_p3 <= 
        add_ln374_3_fu_213_p2 when (icmp_ln374_1_fu_219_p2(0) = '1') else 
        add_ln374_6_fu_225_p2;
    select_ln374_fu_192_p3 <= 
        x_reg_325 when (icmp_ln374_fu_181_p2(0) = '1') else 
        xor_ln374_2_fu_186_p2;
    shl_ln_fu_141_p3 <= (y_0_reg_91 & ap_const_lv2_0);
    x_9_fu_282_p2 <= std_logic_vector(unsigned(x_1_reg_114) + unsigned(ap_const_lv3_1));
    x_fu_161_p2 <= std_logic_vector(unsigned(x_0_reg_102) + unsigned(ap_const_lv3_1));
    xor_ln374_2_fu_186_p2 <= (x_0_reg_102 xor ap_const_lv3_4);
    xor_ln374_fu_253_p2 <= (ap_const_lv64_FFFFFFFFFFFFFFFF xor A_q0);
    y_fu_131_p2 <= std_logic_vector(unsigned(y_0_reg_91) + unsigned(ap_const_lv3_1));
    zext_ln374_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln374_2_fu_203_p2),64));
    zext_ln374_2_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln374_4_fu_243_p2),64));
    zext_ln374_3_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_102),64));
    zext_ln374_4_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_91),5));
    zext_ln374_5_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_102),5));
    zext_ln374_6_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln374_fu_192_p3),5));
    zext_ln374_7_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln374_1_fu_231_p3),5));
    zext_ln374_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln374_fu_171_p2),64));
    zext_ln376_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln376_reg_365),64));
    zext_ln376_2_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_114),5));
    zext_ln376_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_114),64));
end behav;
