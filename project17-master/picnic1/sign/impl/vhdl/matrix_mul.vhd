-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    state_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    state_offset1 : IN STD_LOGIC_VECTOR (3 downto 0);
    matrix_offset : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of matrix_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_matrix_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal temp_matrix_ce0 : STD_LOGIC;
    signal temp_matrix_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_cast_fu_340_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_cast_reg_1000 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln124_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln124_fu_360_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln124_reg_1019 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_368_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_1024 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln134_fu_376_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln134_reg_1029 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln125_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_385_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1038 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal prod_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln85_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_451_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_12_reg_1066 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_reg_1071 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_addr_3_reg_1077 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_8_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal start_pos_fu_694_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal start_pos_reg_1087 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_ln66_7_fu_702_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_7_reg_1093 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln66_fu_838_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln66_reg_1099 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_fu_966_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_reg_1107 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln133_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln134_fu_981_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln134_reg_1117 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal prod_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal prod_ce0 : STD_LOGIC;
    signal prod_we0 : STD_LOGIC;
    signal prod_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitNumber_assign_reg_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_j_0_phi_fu_264_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal x_0_i_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_282 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_0_reg_293 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln127_9_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_4_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_4_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal shl_ln66_20_fu_953_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_304_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_304_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln127_7_fu_324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln127_6_fu_312_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln127_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln127_5_fu_308_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln127_2_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln126_fu_364_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln125_fu_391_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln126_fu_395_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln127_8_fu_404_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln127_3_fu_408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln126_fu_400_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln127_fu_418_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal adjSize_fu_467_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_fu_488_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln93_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln4_fu_534_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln93_6_fu_518_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln93_2_fu_514_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln94_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln5_fu_578_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln94_2_fu_562_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln94_fu_556_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln95_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln95_2_fu_606_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln95_fu_600_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_5_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_628_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln95_4_fu_622_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_6_fu_646_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln93_fu_502_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_638_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_652_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_6_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_7_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_5_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln98_8_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln66_49_fu_709_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_50_fu_713_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln66_fu_727_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln66_11_fu_739_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_717_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln66_15_fu_733_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_fu_745_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_28_fu_761_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln66_12_fu_769_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_27_fu_753_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_51_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_52_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln66_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln66_11_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln66_15_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln66_fu_805_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln66_2_fu_810_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_fu_814_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln98_fu_690_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_fu_801_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln66_4_fu_820_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln66_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_8_fu_826_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln66_53_fu_844_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_54_fu_847_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln66_16_fu_853_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_29_fu_859_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_31_fu_875_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln66_30_fu_867_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln66_17_fu_883_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln66_55_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_56_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln66_18_fu_901_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_907_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_57_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_58_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln66_19_fu_925_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln66_12_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln66_32_fu_917_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln66_16_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_59_fu_950_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln134_3_fu_977_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrix_mul_temp_mUhA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_prod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_matrix_U : component matrix_mul_temp_mUhA
    generic map (
        DataWidth => 32,
        AddressRange => 10752,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_matrix_address0,
        ce0 => temp_matrix_ce0,
        q0 => temp_matrix_q0);

    prod_U : component matrix_mul_prod
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prod_address0,
        ce0 => prod_ce0,
        we0 => prod_we0,
        d0 => prod_d0,
        q0 => prod_q0);

    temp_U : component matrix_mul_temp
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln124_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln124_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bitNumber_assign_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                bitNumber_assign_reg_248 <= i_reg_1014;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                bitNumber_assign_reg_248 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_282 <= i_12_reg_1066;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_282 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    j_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_260 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln125_reg_1034 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_260 <= j_reg_1038;
            end if; 
        end if;
    end process;

    loop_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_0_reg_293 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                loop_0_reg_293 <= loop_reg_1107;
            end if; 
        end if;
    end process;

    x_0_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_0_i_reg_272 <= x_8_fu_482_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_0_i_reg_272 <= prod_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln133_fu_960_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                add_ln134_reg_1117 <= add_ln134_fu_981_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                i_12_reg_1066 <= i_12_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1014 <= i_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln125_reg_1034 <= icmp_ln125_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_reg_1038 <= j_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                loop_reg_1107 <= loop_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    or_ln66_7_reg_1093(4 downto 3) <= or_ln66_7_fu_702_p2(4 downto 3);
                or_ln66_reg_1099 <= or_ln66_fu_838_p2;
                    start_pos_reg_1087(4 downto 3) <= start_pos_fu_694_p3(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1024(8 downto 2) <= shl_ln_fu_368_p3(8 downto 2);
                trunc_ln124_reg_1019 <= trunc_ln124_fu_360_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    temp_addr_3_reg_1077(2 downto 0) <= zext_ln66_fu_477_p1(6 - 1 downto 0)(2 downto 0);
                tmp_46_reg_1071 <= bitNumber_assign_reg_248(4 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_41_cast_reg_1000(12 downto 2) <= tmp_41_cast_fu_340_p3(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln134_reg_1029 <= trunc_ln134_fu_376_p1;
            end if;
        end if;
    end process;
    tmp_41_cast_reg_1000(1 downto 0) <= "00";
    shl_ln_reg_1024(1 downto 0) <= "00";
    temp_addr_3_reg_1077(5 downto 3) <= "000";
    start_pos_reg_1087(2 downto 0) <= "000";
    or_ln66_7_reg_1093(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln124_fu_348_p2, ap_CS_fsm_state2, icmp_ln125_fu_379_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, icmp_ln85_fu_445_p2, ap_CS_fsm_state11, icmp_ln133_fu_960_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln124_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln125_fu_379_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln125_fu_379_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln85_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln133_fu_960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln126_fu_395_p2 <= std_logic_vector(unsigned(zext_ln125_fu_391_p1) + unsigned(shl_ln_reg_1024));
    add_ln127_2_fu_334_p2 <= std_logic_vector(unsigned(sub_ln127_fu_328_p2) + unsigned(zext_ln127_5_fu_308_p1));
    add_ln127_3_fu_408_p2 <= std_logic_vector(unsigned(tmp_41_cast_reg_1000) + unsigned(zext_ln127_8_fu_404_p1));
    add_ln127_fu_418_p2 <= std_logic_vector(unsigned(matrix_offset) + unsigned(zext_ln126_fu_400_p1));
    add_ln134_fu_981_p2 <= std_logic_vector(unsigned(zext_ln134_3_fu_977_p1) + unsigned(trunc_ln134_reg_1029));
    adjSize_fu_467_p4 <= bitNumber_assign_reg_248(7 downto 5);
    and_ln66_15_fu_795_p2 <= (lshr_ln66_fu_783_p2 and lshr_ln66_11_fu_789_p2);
    and_ln66_16_fu_937_p2 <= (shl_ln66_19_fu_925_p2 and lshr_ln66_12_fu_931_p2);
    and_ln66_fu_832_p2 <= (xor_ln66_4_fu_820_p2 and trunc_ln66_fu_801_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln125_fu_379_p2)
    begin
        if ((icmp_ln125_fu_379_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln133_fu_960_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln133_fu_960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_264_p4_assign_proc : process(j_0_reg_260, icmp_ln125_reg_1034, ap_CS_fsm_pp0_stage0, j_reg_1038, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln125_reg_1034 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_264_p4 <= j_reg_1038;
        else 
            ap_phi_mux_j_0_phi_fu_264_p4 <= j_0_reg_260;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln133_fu_960_p2)
    begin
        if (((icmp_ln133_fu_960_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_304_p0_assign_proc : process(start_pos_fu_694_p3, start_pos_reg_1087, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_304_p0 <= start_pos_reg_1087;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_304_p0 <= start_pos_fu_694_p3;
        else 
            grp_fu_304_p0 <= "XXXXX";
        end if; 
    end process;


    grp_fu_304_p1_assign_proc : process(ap_CS_fsm_state9, or_ln66_7_fu_702_p2, or_ln66_7_reg_1093, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_304_p1 <= or_ln66_7_reg_1093;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_304_p1 <= or_ln66_7_fu_702_p2;
        else 
            grp_fu_304_p1 <= "XXXXX";
        end if; 
    end process;

    grp_fu_304_p2 <= "1" when (unsigned(grp_fu_304_p0) > unsigned(grp_fu_304_p1)) else "0";
    i_12_fu_451_p2 <= std_logic_vector(unsigned(i_0_i_reg_282) + unsigned(ap_const_lv3_1));
    i_fu_354_p2 <= std_logic_vector(unsigned(bitNumber_assign_reg_248) + unsigned(ap_const_lv8_1));
    icmp_ln124_fu_348_p2 <= "1" when (bitNumber_assign_reg_248 = ap_const_lv8_80) else "0";
    icmp_ln125_fu_379_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_264_p4 = ap_const_lv3_4) else "0";
    icmp_ln133_fu_960_p2 <= "1" when (loop_0_reg_293 = ap_const_lv3_4) else "0";
    icmp_ln85_fu_445_p2 <= "1" when (i_0_i_reg_282 = ap_const_lv3_4) else "0";
    j_fu_385_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_0_phi_fu_264_p4) + unsigned(ap_const_lv3_1));
    loop_fu_966_p2 <= std_logic_vector(unsigned(loop_0_reg_293) + unsigned(ap_const_lv3_1));
    lshr_ln4_fu_534_p4 <= y_fu_528_p2(31 downto 2);
    lshr_ln5_fu_578_p4 <= y_4_fu_572_p2(31 downto 4);
    lshr_ln66_11_fu_789_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln66_52_fu_779_p1(31-1 downto 0)))));
    lshr_ln66_12_fu_931_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln66_58_fu_897_p1(31-1 downto 0)))));
    lshr_ln66_fu_783_p2 <= std_logic_vector(shift_right(unsigned(select_ln66_27_fu_753_p3),to_integer(unsigned('0' & zext_ln66_51_fu_775_p1(31-1 downto 0)))));
    lshr_ln_fu_488_p4 <= x_0_i_reg_272(31 downto 1);
    or_ln66_7_fu_702_p2 <= (start_pos_fu_694_p3 or ap_const_lv5_7);
    or_ln66_fu_838_p2 <= (shl_ln66_8_fu_826_p2 or and_ln66_fu_832_p2);
    output_r_address0 <= zext_ln134_4_fu_986_p1(6 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= temp_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_we0 <= ap_const_lv4_F;
        else 
            output_r_we0 <= ap_const_lv4_0;
        end if; 
    end process;


    prod_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln127_fu_428_p1, zext_ln85_fu_440_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            prod_address0 <= zext_ln85_fu_440_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            prod_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            prod_address0 <= zext_ln127_fu_428_p1(6 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= (temp_matrix_q0 and state_q0);

    prod_we0_assign_proc : process(icmp_ln125_reg_1034, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln125_reg_1034 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln66_27_fu_753_p3 <= 
        tmp_47_fu_717_p4 when (grp_fu_304_p2(0) = '1') else 
        temp_q0;
    select_ln66_28_fu_761_p3 <= 
        xor_ln66_15_fu_733_p2 when (grp_fu_304_p2(0) = '1') else 
        zext_ln66_49_fu_709_p1;
    select_ln66_29_fu_859_p3 <= 
        zext_ln66_53_fu_844_p1 when (grp_fu_304_p2(0) = '1') else 
        zext_ln66_54_fu_847_p1;
    select_ln66_30_fu_867_p3 <= 
        zext_ln66_54_fu_847_p1 when (grp_fu_304_p2(0) = '1') else 
        zext_ln66_53_fu_844_p1;
    select_ln66_31_fu_875_p3 <= 
        xor_ln66_16_fu_853_p2 when (grp_fu_304_p2(0) = '1') else 
        zext_ln66_53_fu_844_p1;
    select_ln66_32_fu_917_p3 <= 
        tmp_48_fu_907_p4 when (grp_fu_304_p2(0) = '1') else 
        shl_ln66_18_fu_901_p2;
    select_ln66_fu_745_p3 <= 
        sub_ln66_fu_727_p2 when (grp_fu_304_p2(0) = '1') else 
        sub_ln66_11_fu_739_p2;
    shl_ln66_18_fu_901_p2 <= std_logic_vector(shift_left(unsigned(zext_ln66_55_fu_850_p1),to_integer(unsigned('0' & zext_ln66_56_fu_889_p1(31-1 downto 0)))));
    shl_ln66_19_fu_925_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln66_57_fu_893_p1(31-1 downto 0)))));
    shl_ln66_20_fu_953_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & zext_ln66_59_fu_950_p1(4-1 downto 0)))));
    shl_ln66_8_fu_826_p2 <= std_logic_vector(shift_left(unsigned(zext_ln98_fu_690_p1),to_integer(unsigned('0' & zext_ln66_2_fu_810_p1(8-1 downto 0)))));
    shl_ln66_fu_814_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln66_2_fu_810_p1(8-1 downto 0)))));
    shl_ln_fu_368_p3 <= (trunc_ln126_fu_364_p1 & ap_const_lv2_0);
    start_pos_fu_694_p3 <= (tmp_46_reg_1071 & ap_const_lv3_0);
    state_address0 <= zext_ln127_9_fu_413_p1(12 - 1 downto 0);

    state_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln127_fu_328_p2 <= std_logic_vector(unsigned(zext_ln127_7_fu_324_p1) - unsigned(zext_ln127_6_fu_312_p1));
    sub_ln66_11_fu_739_p2 <= std_logic_vector(unsigned(zext_ln66_50_fu_713_p1) - unsigned(zext_ln66_49_fu_709_p1));
    sub_ln66_12_fu_769_p2 <= std_logic_vector(unsigned(ap_const_lv6_1F) - unsigned(select_ln66_fu_745_p3));
    sub_ln66_fu_727_p2 <= std_logic_vector(unsigned(zext_ln66_49_fu_709_p1) - unsigned(zext_ln66_50_fu_713_p1));

    temp_address0_assign_proc : process(ap_CS_fsm_state7, temp_addr_3_reg_1077, ap_CS_fsm_state11, ap_CS_fsm_state10, zext_ln66_fu_477_p1, zext_ln134_fu_972_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_address0 <= zext_ln134_fu_972_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_address0 <= temp_addr_3_reg_1077;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln66_fu_477_p1(6 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= (select_ln66_32_fu_917_p3 and and_ln66_16_fu_937_p2);
    temp_matrix_address0 <= zext_ln127_4_fu_423_p1(14 - 1 downto 0);

    temp_matrix_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            temp_matrix_ce0 <= ap_const_logic_1;
        else 
            temp_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state10, shl_ln66_20_fu_953_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_we0 <= shl_ln66_20_fu_953_p2;
        else 
            temp_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    tmp_41_cast_fu_340_p3 <= (add_ln127_2_fu_334_p2 & ap_const_lv2_0);
    tmp_41_fu_506_p3 <= x_0_i_reg_272(1 downto 1);
    tmp_42_fu_548_p3 <= y_fu_528_p2(2 downto 2);
    tmp_43_fu_592_p3 <= y_4_fu_572_p2(4 downto 4);
    tmp_44_fu_638_p3 <= y_5_fu_616_p2(8 downto 8);
    tmp_45_fu_652_p3 <= y_6_fu_646_p2(16 downto 16);
    
    tmp_47_fu_717_p4_proc : process(temp_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_47_fu_717_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := temp_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_47_fu_717_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_47_fu_717_p4_i) := temp_q0(32-1-tmp_47_fu_717_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_47_fu_717_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_48_fu_907_p4_proc : process(shl_ln66_18_fu_901_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_48_fu_907_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln66_18_fu_901_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_48_fu_907_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_48_fu_907_p4_i) := shl_ln66_18_fu_901_p2(32-1-tmp_48_fu_907_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_48_fu_907_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_fu_316_p3 <= (state_offset & ap_const_lv2_0);
    trunc_ln124_fu_360_p1 <= bitNumber_assign_reg_248(3 - 1 downto 0);
    trunc_ln126_fu_364_p1 <= bitNumber_assign_reg_248(7 - 1 downto 0);
    trunc_ln134_fu_376_p1 <= output_offset(4 - 1 downto 0);
    trunc_ln66_fu_801_p1 <= and_ln66_15_fu_795_p2(8 - 1 downto 0);
    trunc_ln93_2_fu_514_p1 <= x_0_i_reg_272(24 - 1 downto 0);
    trunc_ln93_6_fu_518_p4 <= x_0_i_reg_272(24 downto 1);
    trunc_ln93_fu_502_p1 <= x_0_i_reg_272(1 - 1 downto 0);
    trunc_ln94_2_fu_562_p4 <= y_fu_528_p2(25 downto 2);
    trunc_ln95_2_fu_606_p4 <= y_4_fu_572_p2(27 downto 4);
    trunc_ln_fu_628_p4 <= y_5_fu_616_p2(31 downto 8);
    x_8_fu_482_p2 <= (x_0_i_reg_272 xor prod_q0);
    xor_ln66_15_fu_733_p2 <= (zext_ln66_49_fu_709_p1 xor ap_const_lv6_1F);
    xor_ln66_16_fu_853_p2 <= (zext_ln66_53_fu_844_p1 xor ap_const_lv6_1F);
    xor_ln66_17_fu_883_p2 <= (select_ln66_29_fu_859_p3 xor ap_const_lv6_1F);
    xor_ln66_4_fu_820_p2 <= (shl_ln66_fu_814_p2 xor ap_const_lv8_FF);
    xor_ln66_fu_805_p2 <= (trunc_ln124_reg_1019 xor ap_const_lv3_7);
    xor_ln94_fu_556_p2 <= (trunc_ln93_6_fu_518_p4 xor trunc_ln93_2_fu_514_p1);
    xor_ln95_4_fu_622_p2 <= (xor_ln95_fu_600_p2 xor trunc_ln95_2_fu_606_p4);
    xor_ln95_fu_600_p2 <= (xor_ln94_fu_556_p2 xor trunc_ln94_2_fu_562_p4);
    xor_ln98_5_fu_666_p2 <= (xor_ln98_fu_660_p2 xor tmp_41_fu_506_p3);
    xor_ln98_6_fu_672_p2 <= (tmp_45_fu_652_p3 xor tmp_44_fu_638_p3);
    xor_ln98_7_fu_678_p2 <= (xor_ln98_6_fu_672_p2 xor tmp_43_fu_592_p3);
    xor_ln98_8_fu_684_p2 <= (xor_ln98_7_fu_678_p2 xor xor_ln98_5_fu_666_p2);
    xor_ln98_fu_660_p2 <= (trunc_ln93_fu_502_p1 xor tmp_42_fu_548_p3);
    y_4_fu_572_p2 <= (zext_ln94_fu_544_p1 xor y_fu_528_p2);
    y_5_fu_616_p2 <= (zext_ln95_fu_588_p1 xor y_4_fu_572_p2);
    y_6_fu_646_p2 <= (xor_ln95_4_fu_622_p2 xor trunc_ln_fu_628_p4);
    y_fu_528_p2 <= (zext_ln93_fu_498_p1 xor x_0_i_reg_272);
    zext_ln125_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_264_p4),9));
    zext_ln126_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln126_fu_395_p2),14));
    zext_ln127_4_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln127_fu_418_p2),64));
    zext_ln127_5_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_offset1),11));
    zext_ln127_6_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_offset),11));
    zext_ln127_7_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_316_p3),11));
    zext_ln127_8_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_0_phi_fu_264_p4),13));
    zext_ln127_9_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln127_3_fu_408_p2),64));
    zext_ln127_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_260),64));
    zext_ln134_3_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_293),4));
    zext_ln134_4_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_reg_1117),64));
    zext_ln134_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_293),64));
    zext_ln66_2_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_fu_805_p2),8));
    zext_ln66_49_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_694_p3),6));
    zext_ln66_50_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_7_fu_702_p2),6));
    zext_ln66_51_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_28_fu_761_p3),32));
    zext_ln66_52_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln66_12_fu_769_p2),32));
    zext_ln66_53_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_reg_1087),6));
    zext_ln66_54_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_7_reg_1093),6));
    zext_ln66_55_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_reg_1099),32));
    zext_ln66_56_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_31_fu_875_p3),32));
    zext_ln66_57_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln66_30_fu_867_p3),32));
    zext_ln66_58_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln66_17_fu_883_p2),32));
    zext_ln66_59_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_1071),4));
    zext_ln66_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adjSize_fu_467_p4),64));
    zext_ln85_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_282),64));
    zext_ln93_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_488_p4),32));
    zext_ln94_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_fu_534_p4),32));
    zext_ln95_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_578_p4),32));
    zext_ln98_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln98_8_fu_684_p2),8));
end behav;
