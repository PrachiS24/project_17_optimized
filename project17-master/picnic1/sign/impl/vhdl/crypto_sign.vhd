-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sm_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_we0 : OUT STD_LOGIC;
    sm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sm_address1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sm_ce1 : OUT STD_LOGIC;
    sm_we1 : OUT STD_LOGIC;
    sm_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    smlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    smlen_ce0 : OUT STD_LOGIC;
    smlen_we0 : OUT STD_LOGIC;
    smlen_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce0 : OUT STD_LOGIC;
    viewOutputs_we0 : OUT STD_LOGIC;
    viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce1 : OUT STD_LOGIC;
    viewOutputs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=468,HLS_SYN_DSP=5,HLS_SYN_FF=46135,HLS_SYN_LUT=104855,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv64_84F4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001000010011110100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_96_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_96_reg_578 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln657_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln657_reg_582 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln657_i_cast_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln657_i_cast_reg_589 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_22_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_22_reg_598 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln657_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln625_fu_456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_reg_613 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_ret_phi_fu_287_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_picnic_sign_fu_324_ap_ready : STD_LOGIC;
    signal grp_picnic_sign_fu_324_ap_done : STD_LOGIC;
    signal add_ln108_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln108_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln101_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln111_fu_515_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln111_reg_645 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_650 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln119_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal secret_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_data_ce0 : STD_LOGIC;
    signal secret_data_we0 : STD_LOGIC;
    signal secret_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_data_ce1 : STD_LOGIC;
    signal secret_data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_pk_plaintext_ce0 : STD_LOGIC;
    signal secret_pk_plaintext_we0 : STD_LOGIC;
    signal secret_pk_plaintext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_plaintext_ce1 : STD_LOGIC;
    signal secret_pk_plaintext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal secret_pk_ciphertext_ce0 : STD_LOGIC;
    signal secret_pk_ciphertext_we0 : STD_LOGIC;
    signal secret_pk_ciphertext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal secret_pk_ciphertext_ce1 : STD_LOGIC;
    signal secret_pk_ciphertext_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_sign_fu_324_ap_start : STD_LOGIC;
    signal grp_picnic_sign_fu_324_ap_idle : STD_LOGIC;
    signal grp_picnic_sign_fu_324_sk_data_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_sign_fu_324_sk_data_ce0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_sk_data_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_sign_fu_324_sk_data_ce1 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_sk_pk_plaintext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_sign_fu_324_sk_pk_plaintext_ce0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_sk_pk_plaintext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_sign_fu_324_sk_pk_plaintext_ce1 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_sk_pk_ciphertext_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_sk_pk_ciphertext_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_message_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_picnic_sign_fu_324_message_ce0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_signature_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_picnic_sign_fu_324_signature_ce0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_signature_we0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_signature_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_picnic_sign_fu_324_viewOutputs_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_picnic_sign_fu_324_viewOutputs_ce0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_viewOutputs_we0 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_viewOutputs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_picnic_sign_fu_324_viewOutputs_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_picnic_sign_fu_324_viewOutputs_ce1 : STD_LOGIC;
    signal grp_picnic_sign_fu_324_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_picnic_sign_fu_324_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_0_i_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ret_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_0_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_picnic_sign_fu_324_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln658_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln659_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln660_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln119_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln120_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln632_fu_349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_85_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_87_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_86_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_89_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_88_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_91_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_90_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_93_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_92_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_95_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_94_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln659_fu_470_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln660_fu_480_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln120_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component picnic_sign IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sk_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_data_ce0 : OUT STD_LOGIC;
        sk_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_data_ce1 : OUT STD_LOGIC;
        sk_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_plaintext_ce0 : OUT STD_LOGIC;
        sk_pk_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_plaintext_ce1 : OUT STD_LOGIC;
        sk_pk_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_ciphertext_ce0 : OUT STD_LOGIC;
        sk_pk_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sk_pk_ciphertext_ce1 : OUT STD_LOGIC;
        sk_pk_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_len : IN STD_LOGIC_VECTOR (63 downto 0);
        signature_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        signature_ce0 : OUT STD_LOGIC;
        signature_we0 : OUT STD_LOGIC;
        signature_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        signature_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce0 : OUT STD_LOGIC;
        viewOutputs_we0 : OUT STD_LOGIC;
        viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce1 : OUT STD_LOGIC;
        viewOutputs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_sign_secrebJp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    secret_data_U : component crypto_sign_secrebJp
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secret_data_address0,
        ce0 => secret_data_ce0,
        we0 => secret_data_we0,
        d0 => sk_q0,
        q0 => secret_data_q0,
        address1 => grp_picnic_sign_fu_324_sk_data_address1,
        ce1 => secret_data_ce1,
        q1 => secret_data_q1);

    secret_pk_plaintext_U : component crypto_sign_secrebJp
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secret_pk_plaintext_address0,
        ce0 => secret_pk_plaintext_ce0,
        we0 => secret_pk_plaintext_we0,
        d0 => sk_q1,
        q0 => secret_pk_plaintext_q0,
        address1 => grp_picnic_sign_fu_324_sk_pk_plaintext_address1,
        ce1 => secret_pk_plaintext_ce1,
        q1 => secret_pk_plaintext_q1);

    secret_pk_ciphertext_U : component crypto_sign_secrebJp
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secret_pk_ciphertext_address0,
        ce0 => secret_pk_ciphertext_ce0,
        we0 => secret_pk_ciphertext_we0,
        d0 => sk_q0,
        q0 => secret_pk_ciphertext_q0,
        address1 => grp_picnic_sign_fu_324_sk_pk_ciphertext_address1,
        ce1 => secret_pk_ciphertext_ce1,
        q1 => secret_pk_ciphertext_q1);

    grp_picnic_sign_fu_324 : component picnic_sign
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_picnic_sign_fu_324_ap_start,
        ap_done => grp_picnic_sign_fu_324_ap_done,
        ap_idle => grp_picnic_sign_fu_324_ap_idle,
        ap_ready => grp_picnic_sign_fu_324_ap_ready,
        sk_data_address0 => grp_picnic_sign_fu_324_sk_data_address0,
        sk_data_ce0 => grp_picnic_sign_fu_324_sk_data_ce0,
        sk_data_q0 => secret_data_q0,
        sk_data_address1 => grp_picnic_sign_fu_324_sk_data_address1,
        sk_data_ce1 => grp_picnic_sign_fu_324_sk_data_ce1,
        sk_data_q1 => secret_data_q1,
        sk_pk_plaintext_address0 => grp_picnic_sign_fu_324_sk_pk_plaintext_address0,
        sk_pk_plaintext_ce0 => grp_picnic_sign_fu_324_sk_pk_plaintext_ce0,
        sk_pk_plaintext_q0 => secret_pk_plaintext_q0,
        sk_pk_plaintext_address1 => grp_picnic_sign_fu_324_sk_pk_plaintext_address1,
        sk_pk_plaintext_ce1 => grp_picnic_sign_fu_324_sk_pk_plaintext_ce1,
        sk_pk_plaintext_q1 => secret_pk_plaintext_q1,
        sk_pk_ciphertext_address0 => grp_picnic_sign_fu_324_sk_pk_ciphertext_address0,
        sk_pk_ciphertext_ce0 => grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0,
        sk_pk_ciphertext_q0 => secret_pk_ciphertext_q0,
        sk_pk_ciphertext_address1 => grp_picnic_sign_fu_324_sk_pk_ciphertext_address1,
        sk_pk_ciphertext_ce1 => grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1,
        sk_pk_ciphertext_q1 => secret_pk_ciphertext_q1,
        message_address0 => grp_picnic_sign_fu_324_message_address0,
        message_ce0 => grp_picnic_sign_fu_324_message_ce0,
        message_q0 => m_q0,
        message_len => mlen,
        signature_address0 => grp_picnic_sign_fu_324_signature_address0,
        signature_ce0 => grp_picnic_sign_fu_324_signature_ce0,
        signature_we0 => grp_picnic_sign_fu_324_signature_we0,
        signature_d0 => grp_picnic_sign_fu_324_signature_d0,
        signature_offset => add_ln100_reg_613,
        viewOutputs_address0 => grp_picnic_sign_fu_324_viewOutputs_address0,
        viewOutputs_ce0 => grp_picnic_sign_fu_324_viewOutputs_ce0,
        viewOutputs_we0 => grp_picnic_sign_fu_324_viewOutputs_we0,
        viewOutputs_d0 => grp_picnic_sign_fu_324_viewOutputs_d0,
        viewOutputs_q0 => viewOutputs_q0,
        viewOutputs_address1 => grp_picnic_sign_fu_324_viewOutputs_address1,
        viewOutputs_ce1 => grp_picnic_sign_fu_324_viewOutputs_ce1,
        viewOutputs_q1 => viewOutputs_q1,
        ap_return_0 => grp_picnic_sign_fu_324_ap_return_0,
        ap_return_1 => grp_picnic_sign_fu_324_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_picnic_sign_fu_324_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_picnic_sign_fu_324_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((empty_96_reg_578 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0)) or ((icmp_ln657_fu_439_p2 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0))))) then 
                    grp_picnic_sign_fu_324_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_picnic_sign_fu_324_ap_ready = ap_const_logic_1)) then 
                    grp_picnic_sign_fu_324_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_0_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_96_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_0_i_reg_272 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                loop_0_i_reg_272 <= loop_22_reg_598;
            end if; 
        end if;
    end process;

    loop_0_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                loop_0_reg_295 <= loop_reg_658;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_0_reg_295 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln119_fu_534_p2 = ap_const_lv1_0))) then 
                p_0_reg_307 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_picnic_sign_fu_324_ap_done = ap_const_logic_1) and (icmp_ln104_fu_504_p2 = ap_const_lv1_1) and (icmp_ln101_fu_498_p2 = ap_const_lv1_1))) then 
                p_0_reg_307 <= ap_const_lv32_FFFFFFFF;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_picnic_sign_fu_324_ap_done = ap_const_logic_1) and (icmp_ln101_fu_498_p2 = ap_const_lv1_0))) then 
                p_0_reg_307 <= grp_picnic_sign_fu_324_ap_return_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((empty_96_reg_578 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_1)) or ((ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_1) and (icmp_ln657_fu_439_p2 = ap_const_lv1_1))))) then 
                p_0_reg_307 <= select_ln625_fu_456_p3;
            end if; 
        end if;
    end process;

    ret_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_96_reg_578 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln657_fu_439_p2 = ap_const_lv1_1))) then 
                ret_reg_283 <= ap_const_lv1_0;
            elsif (((empty_96_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ret_reg_283 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((empty_96_reg_578 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0)) or ((icmp_ln657_fu_439_p2 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0))))) then
                add_ln100_reg_613 <= add_ln100_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_picnic_sign_fu_324_ap_done = ap_const_logic_1) and (icmp_ln101_fu_498_p2 = ap_const_lv1_1) and (icmp_ln104_fu_504_p2 = ap_const_lv1_0))) then
                add_ln108_reg_640 <= add_ln108_fu_510_p2;
                trunc_ln111_reg_645 <= trunc_ln111_fu_515_p1;
                trunc_ln_reg_650 <= grp_picnic_sign_fu_324_ap_return_1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_96_reg_578 <= empty_96_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_96_reg_578 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                loop_22_reg_598 <= loop_22_fu_445_p2;
                    sext_ln657_i_cast_reg_589(4 downto 0) <= sext_ln657_i_cast_fu_435_p1(4 downto 0);
                    zext_ln657_reg_582(4 downto 0) <= zext_ln657_fu_431_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                loop_reg_658 <= loop_fu_539_p2;
            end if;
        end if;
    end process;
    zext_ln657_reg_582(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    sext_ln657_i_cast_reg_589(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, empty_96_reg_578, ap_CS_fsm_state3, icmp_ln657_fu_439_p2, ap_phi_mux_ret_phi_fu_287_p4, ap_CS_fsm_state6, grp_picnic_sign_fu_324_ap_done, icmp_ln101_fu_498_p2, icmp_ln104_fu_504_p2, ap_CS_fsm_state9, icmp_ln119_fu_534_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((empty_96_reg_578 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_1)) or ((ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_1) and (icmp_ln657_fu_439_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (((empty_96_reg_578 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0)) or ((icmp_ln657_fu_439_p2 = ap_const_lv1_1) and (ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_picnic_sign_fu_324_ap_done = ap_const_logic_1) and (icmp_ln101_fu_498_p2 = ap_const_lv1_1) and (icmp_ln104_fu_504_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_picnic_sign_fu_324_ap_done = ap_const_logic_1) and ((icmp_ln104_fu_504_p2 = ap_const_lv1_1) or (icmp_ln101_fu_498_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln119_fu_534_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_464_p2 <= std_logic_vector(unsigned(mlen) + unsigned(ap_const_lv64_4));
    add_ln108_fu_510_p2 <= std_logic_vector(unsigned(add_ln100_reg_613) + unsigned(grp_picnic_sign_fu_324_ap_return_1));
    add_ln120_fu_545_p2 <= std_logic_vector(signed(loop_0_reg_295) + signed(ap_const_lv32_4));
    add_ln659_fu_470_p2 <= std_logic_vector(unsigned(sext_ln657_i_cast_reg_589) + unsigned(ap_const_lv6_11));
    add_ln660_fu_480_p2 <= std_logic_vector(unsigned(sext_ln657_i_cast_reg_589) + unsigned(ap_const_lv6_21));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ret_phi_fu_287_p4_assign_proc : process(empty_96_reg_578, ap_CS_fsm_state3, icmp_ln657_fu_439_p2, ret_reg_283)
    begin
        if (((empty_96_reg_578 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln657_fu_439_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_ret_phi_fu_287_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_ret_phi_fu_287_p4 <= ret_reg_283;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_reg_307;
    empty_85_fu_359_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_E) else "0";
    empty_86_fu_365_p2 <= (empty_fu_353_p2 or empty_85_fu_359_p2);
    empty_87_fu_371_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_D) else "0";
    empty_88_fu_377_p2 <= (empty_87_fu_371_p2 or empty_86_fu_365_p2);
    empty_89_fu_383_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_C) else "0";
    empty_90_fu_389_p2 <= (empty_89_fu_383_p2 or empty_88_fu_377_p2);
    empty_91_fu_395_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_B) else "0";
    empty_92_fu_401_p2 <= (empty_91_fu_395_p2 or empty_90_fu_389_p2);
    empty_93_fu_407_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_A) else "0";
    empty_94_fu_413_p2 <= (empty_93_fu_407_p2 or empty_92_fu_401_p2);
    empty_95_fu_419_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_0) else "0";
    empty_96_fu_425_p2 <= (empty_95_fu_419_p2 or empty_94_fu_413_p2);
    empty_fu_353_p2 <= "1" when (trunc_ln632_fu_349_p1 = ap_const_lv4_F) else "0";
    grp_picnic_sign_fu_324_ap_start <= grp_picnic_sign_fu_324_ap_start_reg;
    icmp_ln101_fu_498_p2 <= "1" when (grp_picnic_sign_fu_324_ap_return_0 = ap_const_lv32_0) else "0";
    icmp_ln104_fu_504_p2 <= "1" when (unsigned(grp_picnic_sign_fu_324_ap_return_1) > unsigned(ap_const_lv64_84F4)) else "0";
    icmp_ln119_fu_534_p2 <= "1" when (unsigned(sext_ln119_fu_529_p1) < unsigned(mlen)) else "0";
    icmp_ln657_fu_439_p2 <= "1" when (loop_0_i_reg_272 = ap_const_lv5_10) else "0";
    loop_22_fu_445_p2 <= std_logic_vector(unsigned(loop_0_i_reg_272) + unsigned(ap_const_lv5_1));
    loop_fu_539_p2 <= std_logic_vector(signed(loop_0_reg_295) + signed(ap_const_lv32_1));

    m_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, grp_picnic_sign_fu_324_message_address0, sext_ln119_fu_529_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_address0 <= sext_ln119_fu_529_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address0 <= grp_picnic_sign_fu_324_message_address0;
        else 
            m_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, grp_picnic_sign_fu_324_message_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            m_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_ce0 <= grp_picnic_sign_fu_324_message_ce0;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_address0_assign_proc : process(zext_ln657_reg_582, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            secret_data_address0 <= zext_ln657_reg_582(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_data_address0 <= grp_picnic_sign_fu_324_sk_data_address0;
        else 
            secret_data_address0 <= "XXXXX";
        end if; 
    end process;


    secret_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            secret_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_data_ce0 <= grp_picnic_sign_fu_324_sk_data_ce0;
        else 
            secret_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_ce1_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_data_ce1 <= grp_picnic_sign_fu_324_sk_data_ce1;
        else 
            secret_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_data_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            secret_data_we0 <= ap_const_logic_1;
        else 
            secret_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_address0_assign_proc : process(zext_ln657_reg_582, ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_pk_ciphertext_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secret_pk_ciphertext_address0 <= zext_ln657_reg_582(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_pk_ciphertext_address0 <= grp_picnic_sign_fu_324_sk_pk_ciphertext_address0;
        else 
            secret_pk_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    secret_pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secret_pk_ciphertext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_pk_ciphertext_ce0 <= grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0;
        else 
            secret_pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_pk_ciphertext_ce1 <= grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1;
        else 
            secret_pk_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_ciphertext_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secret_pk_ciphertext_we0 <= ap_const_logic_1;
        else 
            secret_pk_ciphertext_we0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_address0_assign_proc : process(zext_ln657_reg_582, ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_pk_plaintext_address0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secret_pk_plaintext_address0 <= zext_ln657_reg_582(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_pk_plaintext_address0 <= grp_picnic_sign_fu_324_sk_pk_plaintext_address0;
        else 
            secret_pk_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    secret_pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_pk_plaintext_ce0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secret_pk_plaintext_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_pk_plaintext_ce0 <= grp_picnic_sign_fu_324_sk_pk_plaintext_ce0;
        else 
            secret_pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_ce1_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_sk_pk_plaintext_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            secret_pk_plaintext_ce1 <= grp_picnic_sign_fu_324_sk_pk_plaintext_ce1;
        else 
            secret_pk_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    secret_pk_plaintext_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secret_pk_plaintext_we0 <= ap_const_logic_1;
        else 
            secret_pk_plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln625_fu_456_p3 <= 
        ap_const_lv32_FFFFFFFF when (ap_phi_mux_ret_phi_fu_287_p4(0) = '1') else 
        ap_const_lv32_0;
        sext_ln119_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(loop_0_reg_295),64));

        sext_ln120_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln120_fu_545_p2),64));

    sext_ln657_i_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_reg_272),6));

    sk_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln658_fu_451_p1, zext_ln659_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_address0 <= zext_ln659_fu_475_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sk_address0 <= zext_ln658_fu_451_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sk_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            sk_address0 <= "XXXXXX";
        end if; 
    end process;

    sk_address1 <= zext_ln660_fu_485_p1(6 - 1 downto 0);

    sk_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            sk_ce0 <= ap_const_logic_1;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sk_ce1 <= ap_const_logic_1;
        else 
            sk_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sm_address0_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_signature_address0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7, sext_ln120_fu_551_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sm_address0 <= sext_ln120_fu_551_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sm_address0 <= ap_const_lv64_2(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_address0 <= grp_picnic_sign_fu_324_signature_address0;
        else 
            sm_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sm_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sm_address1 <= ap_const_lv64_3(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_address1 <= ap_const_lv64_1(16 - 1 downto 0);
        else 
            sm_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sm_ce0_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_signature_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sm_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_ce0 <= grp_picnic_sign_fu_324_signature_ce0;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sm_ce1 <= ap_const_logic_1;
        else 
            sm_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sm_d0_assign_proc : process(m_q0, ap_CS_fsm_state6, trunc_ln111_reg_645, grp_picnic_sign_fu_324_signature_d0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sm_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sm_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_d0 <= trunc_ln111_reg_645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_d0 <= grp_picnic_sign_fu_324_signature_d0;
        else 
            sm_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sm_d1_assign_proc : process(trunc_ln_reg_650, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sm_d1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sm_d1 <= trunc_ln_reg_650;
        else 
            sm_d1 <= "XXXXXXXX";
        end if; 
    end process;


    sm_we0_assign_proc : process(ap_CS_fsm_state6, grp_picnic_sign_fu_324_signature_we0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sm_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_we0 <= grp_picnic_sign_fu_324_signature_we0;
        else 
            sm_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sm_we1 <= ap_const_logic_1;
        else 
            sm_we1 <= ap_const_logic_0;
        end if; 
    end process;

    smlen_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    smlen_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            smlen_ce0 <= ap_const_logic_1;
        else 
            smlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    smlen_d0 <= add_ln108_reg_640;

    smlen_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            smlen_we0 <= ap_const_logic_1;
        else 
            smlen_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln111_fu_515_p1 <= grp_picnic_sign_fu_324_ap_return_1(8 - 1 downto 0);
    trunc_ln632_fu_349_p1 <= sk_q0(4 - 1 downto 0);
    viewOutputs_address0 <= grp_picnic_sign_fu_324_viewOutputs_address0;
    viewOutputs_address1 <= grp_picnic_sign_fu_324_viewOutputs_address1;
    viewOutputs_ce0 <= grp_picnic_sign_fu_324_viewOutputs_ce0;
    viewOutputs_ce1 <= grp_picnic_sign_fu_324_viewOutputs_ce1;
    viewOutputs_d0 <= grp_picnic_sign_fu_324_viewOutputs_d0;
    viewOutputs_we0 <= grp_picnic_sign_fu_324_viewOutputs_we0;
    zext_ln657_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_i_reg_272),64));
    zext_ln658_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_22_fu_445_p2),64));
    zext_ln659_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln659_fu_470_p2),64));
    zext_ln660_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln660_fu_480_p2),64));
end behav;
