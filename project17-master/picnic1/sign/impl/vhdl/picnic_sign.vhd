-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity picnic_sign is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sk_data_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_data_ce0 : OUT STD_LOGIC;
    sk_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_data_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_data_ce1 : OUT STD_LOGIC;
    sk_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_plaintext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_plaintext_ce0 : OUT STD_LOGIC;
    sk_pk_plaintext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_plaintext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_plaintext_ce1 : OUT STD_LOGIC;
    sk_pk_plaintext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_ciphertext_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_ciphertext_ce0 : OUT STD_LOGIC;
    sk_pk_ciphertext_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_pk_ciphertext_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sk_pk_ciphertext_ce1 : OUT STD_LOGIC;
    sk_pk_ciphertext_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    message_len : IN STD_LOGIC_VECTOR (63 downto 0);
    signature_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    signature_ce0 : OUT STD_LOGIC;
    signature_we0 : OUT STD_LOGIC;
    signature_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    signature_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce0 : OUT STD_LOGIC;
    viewOutputs_we0 : OUT STD_LOGIC;
    viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce1 : OUT STD_LOGIC;
    viewOutputs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of picnic_sign is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_84F4 : STD_LOGIC_VECTOR (15 downto 0) := "1000010011110100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln269_fu_434_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln269_1_fu_451_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln269_2_fu_468_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_485_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln270_reg_662 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln271_1_reg_673 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_fu_527_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_698 : STD_LOGIC_VECTOR (5 downto 0);
    signal sk_pk_ciphertext_loa_reg_703 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sk_pk_ciphertext_loa_1_reg_708 : STD_LOGIC_VECTOR (7 downto 0);
    signal sk_pk_plaintext_load_reg_723 : STD_LOGIC_VECTOR (7 downto 0);
    signal sk_pk_plaintext_load_1_reg_728 : STD_LOGIC_VECTOR (7 downto 0);
    signal sk_data_load_reg_743 : STD_LOGIC_VECTOR (7 downto 0);
    signal sk_data_load_1_reg_748 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ret2_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sign_picnic1_fu_390_ap_ready : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_ap_done : STD_LOGIC;
    signal sig_0_proofs_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sig_0_proofs_seed1_ce0 : STD_LOGIC;
    signal sig_0_proofs_seed1_we0 : STD_LOGIC;
    signal sig_0_proofs_seed1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_proofs_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sig_0_proofs_seed2_ce0 : STD_LOGIC;
    signal sig_0_proofs_seed2_we0 : STD_LOGIC;
    signal sig_0_proofs_seed2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_proofs_inputS_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sig_0_proofs_inputS_ce0 : STD_LOGIC;
    signal sig_0_proofs_inputS_we0 : STD_LOGIC;
    signal sig_0_proofs_inputS_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sig_0_proofs_commun_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sig_0_proofs_commun_ce0 : STD_LOGIC;
    signal sig_0_proofs_commun_we0 : STD_LOGIC;
    signal sig_0_proofs_commun_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_proofs_view3C_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sig_0_proofs_view3C_ce0 : STD_LOGIC;
    signal sig_0_proofs_view3C_we0 : STD_LOGIC;
    signal sig_0_proofs_view3C_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_challengeBits_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sig_0_challengeBits_ce0 : STD_LOGIC;
    signal sig_0_challengeBits_we0 : STD_LOGIC;
    signal sig_0_challengeBits_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sig_0_salt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sig_0_salt_ce0 : STD_LOGIC;
    signal sig_0_salt_we0 : STD_LOGIC;
    signal sig_0_salt_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_ce0 : STD_LOGIC;
    signal temp2_we0 : STD_LOGIC;
    signal temp2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp3_ce0 : STD_LOGIC;
    signal temp3_we0 : STD_LOGIC;
    signal temp3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sign_picnic1_fu_390_ap_start : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_ap_idle : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_privateKey_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sign_picnic1_fu_390_privateKey_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_pubKey_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sign_picnic1_fu_390_pubKey_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sign_picnic1_fu_390_plaintext_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_message_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sign_picnic1_fu_390_message_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_seed2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_inputS_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_commun_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_proofs_view3C_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_challengeBits_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_challengeBits_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_challengeBits_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_salt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sign_picnic1_fu_390_sig_0_salt_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_salt_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_sig_0_salt_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sign_picnic1_fu_390_viewOutputs_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sign_picnic1_fu_390_viewOutputs_ce0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_viewOutputs_we0 : STD_LOGIC;
    signal grp_sign_picnic1_fu_390_viewOutputs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sign_picnic1_fu_390_viewOutputs_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sign_picnic1_fu_390_viewOutputs_ce1 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_ap_start : STD_LOGIC;
    signal grp_serializeSignature_fu_419_ap_done : STD_LOGIC;
    signal grp_serializeSignature_fu_419_ap_idle : STD_LOGIC;
    signal grp_serializeSignature_fu_419_ap_ready : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_proofs_commun_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_challengeBits_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_challengeBits_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sig_0_salt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_serializeSignature_fu_419_sig_0_salt_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sigBytes_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_serializeSignature_fu_419_sigBytes_ce0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sigBytes_we0 : STD_LOGIC;
    signal grp_serializeSignature_fu_419_sigBytes_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_serializeSignature_fu_419_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln269_reg_323 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln269_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln269_1_reg_334 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln269_1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln269_2_reg_345 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln269_2_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_0_reg_356 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_signature_len_write_s_phi_fu_371_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal signature_len_write_s_reg_367 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_p_0_phi_fu_382_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sign_picnic1_fu_390_ap_start_reg : STD_LOGIC := '0';
    signal grp_serializeSignature_fu_419_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln269_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_1_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_2_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_1_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_2_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_3_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_4_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln271_5_fu_557_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln272_2_fu_574_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln273_2_fu_585_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln271_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln271_1_fu_533_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln271_2_fu_545_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln249_fu_600_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln249_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component sign_picnic1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        privateKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        privateKey_ce0 : OUT STD_LOGIC;
        privateKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pubKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        pubKey_ce0 : OUT STD_LOGIC;
        pubKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        messageByteLength : IN STD_LOGIC_VECTOR (63 downto 0);
        sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed1_we0 : OUT STD_LOGIC;
        sig_0_proofs_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed2_we0 : OUT STD_LOGIC;
        sig_0_proofs_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
        sig_0_proofs_inputS_we0 : OUT STD_LOGIC;
        sig_0_proofs_inputS_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
        sig_0_proofs_commun_we0 : OUT STD_LOGIC;
        sig_0_proofs_commun_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
        sig_0_proofs_view3C_we0 : OUT STD_LOGIC;
        sig_0_proofs_view3C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sig_0_challengeBits_ce0 : OUT STD_LOGIC;
        sig_0_challengeBits_we0 : OUT STD_LOGIC;
        sig_0_challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sig_0_salt_ce0 : OUT STD_LOGIC;
        sig_0_salt_we0 : OUT STD_LOGIC;
        sig_0_salt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_0_salt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce0 : OUT STD_LOGIC;
        viewOutputs_we0 : OUT STD_LOGIC;
        viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        viewOutputs_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce1 : OUT STD_LOGIC;
        viewOutputs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component serializeSignature IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
        sig_0_proofs_seed2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
        sig_0_proofs_inputS_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
        sig_0_proofs_commun_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
        sig_0_proofs_view3C_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        sig_0_challengeBits_ce0 : OUT STD_LOGIC;
        sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        sig_0_salt_ce0 : OUT STD_LOGIC;
        sig_0_salt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sigBytes_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sigBytes_ce0 : OUT STD_LOGIC;
        sigBytes_we0 : OUT STD_LOGIC;
        sigBytes_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sigBytes_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component picnic_sign_sig_0bCo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_sign_sig_0bEo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component picnic_sign_sig_0bFp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_sign_sig_0bGp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_sign_sig_0bHp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component H3_2_hash IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component picnic_sign_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sig_0_proofs_seed1_U : component picnic_sign_sig_0bCo
    generic map (
        DataWidth => 8,
        AddressRange => 3504,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_seed1_address0,
        ce0 => sig_0_proofs_seed1_ce0,
        we0 => sig_0_proofs_seed1_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed1_d0,
        q0 => sig_0_proofs_seed1_q0);

    sig_0_proofs_seed2_U : component picnic_sign_sig_0bCo
    generic map (
        DataWidth => 8,
        AddressRange => 3504,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_seed2_address0,
        ce0 => sig_0_proofs_seed2_ce0,
        we0 => sig_0_proofs_seed2_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed2_d0,
        q0 => sig_0_proofs_seed2_q0);

    sig_0_proofs_inputS_U : component picnic_sign_sig_0bEo
    generic map (
        DataWidth => 32,
        AddressRange => 876,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_inputS_address0,
        ce0 => sig_0_proofs_inputS_ce0,
        we0 => sig_0_proofs_inputS_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_proofs_inputS_d0,
        q0 => sig_0_proofs_inputS_q0);

    sig_0_proofs_commun_U : component picnic_sign_sig_0bFp
    generic map (
        DataWidth => 8,
        AddressRange => 16425,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_commun_address0,
        ce0 => sig_0_proofs_commun_ce0,
        we0 => sig_0_proofs_commun_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_proofs_commun_d0,
        q0 => sig_0_proofs_commun_q0);

    sig_0_proofs_view3C_U : component picnic_sign_sig_0bGp
    generic map (
        DataWidth => 8,
        AddressRange => 7008,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_proofs_view3C_address0,
        ce0 => sig_0_proofs_view3C_ce0,
        we0 => sig_0_proofs_view3C_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_proofs_view3C_d0,
        q0 => sig_0_proofs_view3C_q0);

    sig_0_challengeBits_U : component picnic_sign_sig_0bHp
    generic map (
        DataWidth => 8,
        AddressRange => 55,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_challengeBits_address0,
        ce0 => sig_0_challengeBits_ce0,
        we0 => sig_0_challengeBits_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_challengeBits_d0,
        q0 => sig_0_challengeBits_q0);

    sig_0_salt_U : component H3_2_hash
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sig_0_salt_address0,
        ce0 => sig_0_salt_ce0,
        we0 => sig_0_salt_we0,
        d0 => grp_sign_picnic1_fu_390_sig_0_salt_d0,
        q0 => sig_0_salt_q0);

    temp_U : component picnic_sign_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    temp2_U : component picnic_sign_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_address0,
        ce0 => temp2_ce0,
        we0 => temp2_we0,
        d0 => temp2_d0,
        q0 => temp2_q0);

    temp3_U : component picnic_sign_temp
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp3_address0,
        ce0 => temp3_ce0,
        we0 => temp3_we0,
        d0 => temp3_d0,
        q0 => temp3_q0);

    grp_sign_picnic1_fu_390 : component sign_picnic1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sign_picnic1_fu_390_ap_start,
        ap_done => grp_sign_picnic1_fu_390_ap_done,
        ap_idle => grp_sign_picnic1_fu_390_ap_idle,
        ap_ready => grp_sign_picnic1_fu_390_ap_ready,
        privateKey_address0 => grp_sign_picnic1_fu_390_privateKey_address0,
        privateKey_ce0 => grp_sign_picnic1_fu_390_privateKey_ce0,
        privateKey_q0 => temp3_q0,
        pubKey_address0 => grp_sign_picnic1_fu_390_pubKey_address0,
        pubKey_ce0 => grp_sign_picnic1_fu_390_pubKey_ce0,
        pubKey_q0 => temp_q0,
        plaintext_address0 => grp_sign_picnic1_fu_390_plaintext_address0,
        plaintext_ce0 => grp_sign_picnic1_fu_390_plaintext_ce0,
        plaintext_q0 => temp2_q0,
        message_address0 => grp_sign_picnic1_fu_390_message_address0,
        message_ce0 => grp_sign_picnic1_fu_390_message_ce0,
        message_q0 => message_q0,
        messageByteLength => message_len,
        sig_0_proofs_seed1_address0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_we0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0,
        sig_0_proofs_seed1_d0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed1_d0,
        sig_0_proofs_seed2_address0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_we0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0,
        sig_0_proofs_seed2_d0 => grp_sign_picnic1_fu_390_sig_0_proofs_seed2_d0,
        sig_0_proofs_inputS_address0 => grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0 => grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_we0 => grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0,
        sig_0_proofs_inputS_d0 => grp_sign_picnic1_fu_390_sig_0_proofs_inputS_d0,
        sig_0_proofs_commun_address0 => grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0 => grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_we0 => grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0,
        sig_0_proofs_commun_d0 => grp_sign_picnic1_fu_390_sig_0_proofs_commun_d0,
        sig_0_proofs_view3C_address0 => grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0 => grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_we0 => grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0,
        sig_0_proofs_view3C_d0 => grp_sign_picnic1_fu_390_sig_0_proofs_view3C_d0,
        sig_0_challengeBits_address0 => grp_sign_picnic1_fu_390_sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0 => grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0,
        sig_0_challengeBits_we0 => grp_sign_picnic1_fu_390_sig_0_challengeBits_we0,
        sig_0_challengeBits_d0 => grp_sign_picnic1_fu_390_sig_0_challengeBits_d0,
        sig_0_challengeBits_q0 => sig_0_challengeBits_q0,
        sig_0_salt_address0 => grp_sign_picnic1_fu_390_sig_0_salt_address0,
        sig_0_salt_ce0 => grp_sign_picnic1_fu_390_sig_0_salt_ce0,
        sig_0_salt_we0 => grp_sign_picnic1_fu_390_sig_0_salt_we0,
        sig_0_salt_d0 => grp_sign_picnic1_fu_390_sig_0_salt_d0,
        sig_0_salt_q0 => sig_0_salt_q0,
        viewOutputs_address0 => grp_sign_picnic1_fu_390_viewOutputs_address0,
        viewOutputs_ce0 => grp_sign_picnic1_fu_390_viewOutputs_ce0,
        viewOutputs_we0 => grp_sign_picnic1_fu_390_viewOutputs_we0,
        viewOutputs_d0 => grp_sign_picnic1_fu_390_viewOutputs_d0,
        viewOutputs_q0 => viewOutputs_q0,
        viewOutputs_address1 => grp_sign_picnic1_fu_390_viewOutputs_address1,
        viewOutputs_ce1 => grp_sign_picnic1_fu_390_viewOutputs_ce1,
        viewOutputs_q1 => viewOutputs_q1,
        ap_return => grp_sign_picnic1_fu_390_ap_return);

    grp_serializeSignature_fu_419 : component serializeSignature
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_serializeSignature_fu_419_ap_start,
        ap_done => grp_serializeSignature_fu_419_ap_done,
        ap_idle => grp_serializeSignature_fu_419_ap_idle,
        ap_ready => grp_serializeSignature_fu_419_ap_ready,
        sig_0_proofs_seed1_address0 => grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0,
        sig_0_proofs_seed1_ce0 => grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0,
        sig_0_proofs_seed1_q0 => sig_0_proofs_seed1_q0,
        sig_0_proofs_seed2_address0 => grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0,
        sig_0_proofs_seed2_ce0 => grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0,
        sig_0_proofs_seed2_q0 => sig_0_proofs_seed2_q0,
        sig_0_proofs_inputS_address0 => grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0,
        sig_0_proofs_inputS_ce0 => grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0,
        sig_0_proofs_inputS_q0 => sig_0_proofs_inputS_q0,
        sig_0_proofs_commun_address0 => grp_serializeSignature_fu_419_sig_0_proofs_commun_address0,
        sig_0_proofs_commun_ce0 => grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0,
        sig_0_proofs_commun_q0 => sig_0_proofs_commun_q0,
        sig_0_proofs_view3C_address0 => grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0,
        sig_0_proofs_view3C_ce0 => grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0,
        sig_0_proofs_view3C_q0 => sig_0_proofs_view3C_q0,
        sig_0_challengeBits_address0 => grp_serializeSignature_fu_419_sig_0_challengeBits_address0,
        sig_0_challengeBits_ce0 => grp_serializeSignature_fu_419_sig_0_challengeBits_ce0,
        sig_0_challengeBits_q0 => sig_0_challengeBits_q0,
        sig_0_salt_address0 => grp_serializeSignature_fu_419_sig_0_salt_address0,
        sig_0_salt_ce0 => grp_serializeSignature_fu_419_sig_0_salt_ce0,
        sig_0_salt_q0 => sig_0_salt_q0,
        sigBytes_address0 => grp_serializeSignature_fu_419_sigBytes_address0,
        sigBytes_ce0 => grp_serializeSignature_fu_419_sigBytes_ce0,
        sigBytes_we0 => grp_serializeSignature_fu_419_sigBytes_we0,
        sigBytes_d0 => grp_serializeSignature_fu_419_sigBytes_d0,
        sigBytes_offset => signature_offset,
        ap_return => grp_serializeSignature_fu_419_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_return_0_preg <= select_ln249_fu_600_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg(0) <= '0';
                ap_return_1_preg(1) <= '0';
                ap_return_1_preg(2) <= '0';
                ap_return_1_preg(3) <= '0';
                ap_return_1_preg(4) <= '0';
                ap_return_1_preg(5) <= '0';
                ap_return_1_preg(6) <= '0';
                ap_return_1_preg(7) <= '0';
                ap_return_1_preg(8) <= '0';
                ap_return_1_preg(9) <= '0';
                ap_return_1_preg(10) <= '0';
                ap_return_1_preg(11) <= '0';
                ap_return_1_preg(12) <= '0';
                ap_return_1_preg(13) <= '0';
                ap_return_1_preg(14) <= '0';
                ap_return_1_preg(15) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                                        ap_return_1_preg(15 downto 0) <= zext_ln249_fu_596_p1(15 downto 0);
                end if; 
            end if;
        end if;
    end process;


    grp_serializeSignature_fu_419_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_serializeSignature_fu_419_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_serializeSignature_fu_419_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_serializeSignature_fu_419_ap_ready = ap_const_logic_1)) then 
                    grp_serializeSignature_fu_419_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sign_picnic1_fu_390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sign_picnic1_fu_390_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_fu_485_p3 = ap_const_lv1_1))) then 
                    grp_sign_picnic1_fu_390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sign_picnic1_fu_390_ap_ready = ap_const_logic_1)) then 
                    grp_sign_picnic1_fu_390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    loop_0_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_2_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                loop_0_reg_356 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                loop_0_reg_356 <= loop_reg_698;
            end if; 
        end if;
    end process;

    p_0_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
                p_0_reg_378 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sign_picnic1_fu_390_ap_done = ap_const_logic_1) and (grp_sign_picnic1_fu_390_ap_return = ap_const_lv1_1))) then 
                p_0_reg_378 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    phi_ln269_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln269_1_reg_334 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln269_1_fu_462_p2 = ap_const_lv1_0))) then 
                phi_ln269_1_reg_334 <= add_ln269_1_fu_451_p2;
            end if; 
        end if;
    end process;

    phi_ln269_2_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_1_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln269_2_reg_345 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln269_2_fu_479_p2 = ap_const_lv1_0))) then 
                phi_ln269_2_reg_345 <= add_ln269_2_fu_468_p2;
            end if; 
        end if;
    end process;

    phi_ln269_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln269_fu_445_p2 = ap_const_lv1_0))) then 
                phi_ln269_reg_323 <= add_ln269_fu_434_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln269_reg_323 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    signature_len_write_s_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
                signature_len_write_s_reg_367 <= grp_serializeSignature_fu_419_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sign_picnic1_fu_390_ap_done = ap_const_logic_1) and (grp_sign_picnic1_fu_390_ap_return = ap_const_lv1_1))) then 
                signature_len_write_s_reg_367 <= ap_const_lv16_84F4;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_fu_485_p3 = ap_const_lv1_0))) then
                loop_reg_698 <= loop_fu_527_p2;
                trunc_ln270_reg_662 <= trunc_ln270_fu_500_p1;
                trunc_ln271_1_reg_673 <= loop_0_reg_356(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sign_picnic1_fu_390_ap_done = ap_const_logic_1))) then
                ret2_reg_763 <= grp_sign_picnic1_fu_390_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sk_data_load_1_reg_748 <= sk_data_q1;
                sk_data_load_reg_743 <= sk_data_q0;
                sk_pk_ciphertext_loa_1_reg_708 <= sk_pk_ciphertext_q1;
                sk_pk_ciphertext_loa_reg_703 <= sk_pk_ciphertext_q0;
                sk_pk_plaintext_load_1_reg_728 <= sk_pk_plaintext_q1;
                sk_pk_plaintext_load_reg_723 <= sk_pk_plaintext_q0;
            end if;
        end if;
    end process;
    ap_return_1_preg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_fu_485_p3, grp_sign_picnic1_fu_390_ap_return, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_ap_done, icmp_ln269_fu_445_p2, icmp_ln269_1_fu_462_p2, icmp_ln269_2_fu_479_p2, ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln269_fu_445_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln269_1_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln269_2_fu_479_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_fu_485_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sign_picnic1_fu_390_ap_done = ap_const_logic_1) and (grp_sign_picnic1_fu_390_ap_return = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sign_picnic1_fu_390_ap_done = ap_const_logic_1) and (grp_sign_picnic1_fu_390_ap_return = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln269_1_fu_451_p2 <= std_logic_vector(unsigned(phi_ln269_1_reg_334) + unsigned(ap_const_lv3_1));
    add_ln269_2_fu_468_p2 <= std_logic_vector(unsigned(phi_ln269_2_reg_345) + unsigned(ap_const_lv3_1));
    add_ln269_fu_434_p2 <= std_logic_vector(unsigned(phi_ln269_reg_323) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(ret2_reg_763, grp_serializeSignature_fu_419_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_serializeSignature_fu_419_ap_done = ap_const_logic_0) and (ret2_reg_763 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_382_p4_assign_proc : process(ret2_reg_763, ap_CS_fsm_state10, p_0_reg_378)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            ap_phi_mux_p_0_phi_fu_382_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_p_0_phi_fu_382_p4 <= p_0_reg_378;
        end if; 
    end process;


    ap_phi_mux_signature_len_write_s_phi_fu_371_p4_assign_proc : process(ret2_reg_763, grp_serializeSignature_fu_419_ap_return, signature_len_write_s_reg_367, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            ap_phi_mux_signature_len_write_s_phi_fu_371_p4 <= grp_serializeSignature_fu_419_ap_return;
        else 
            ap_phi_mux_signature_len_write_s_phi_fu_371_p4 <= signature_len_write_s_reg_367;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done, select_ln249_fu_600_p3, ap_return_0_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_return_0 <= select_ln249_fu_600_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done, zext_ln249_fu_596_p1, ap_return_1_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_return_1 <= zext_ln249_fu_596_p1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    grp_serializeSignature_fu_419_ap_start <= grp_serializeSignature_fu_419_ap_start_reg;
    grp_sign_picnic1_fu_390_ap_start <= grp_sign_picnic1_fu_390_ap_start_reg;
    icmp_ln269_1_fu_462_p2 <= "1" when (phi_ln269_1_reg_334 = ap_const_lv3_7) else "0";
    icmp_ln269_2_fu_479_p2 <= "1" when (phi_ln269_2_reg_345 = ap_const_lv3_7) else "0";
    icmp_ln269_fu_445_p2 <= "1" when (phi_ln269_reg_323 = ap_const_lv3_7) else "0";
    loop_fu_527_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(loop_0_reg_356));
    message_address0 <= grp_sign_picnic1_fu_390_message_address0;
    message_ce0 <= grp_sign_picnic1_fu_390_message_ce0;
    or_ln271_1_fu_533_p2 <= (trunc_ln270_reg_662 or ap_const_lv5_2);
    or_ln271_2_fu_545_p2 <= (trunc_ln270_reg_662 or ap_const_lv5_3);
    or_ln271_5_fu_557_p5 <= (((sk_pk_ciphertext_q1 & sk_pk_ciphertext_q0) & sk_pk_ciphertext_loa_1_reg_708) & sk_pk_ciphertext_loa_reg_703);
    or_ln271_fu_504_p2 <= (trunc_ln270_fu_500_p1 or ap_const_lv5_1);
    or_ln272_2_fu_574_p5 <= (((sk_pk_plaintext_q1 & sk_pk_plaintext_q0) & sk_pk_plaintext_load_1_reg_728) & sk_pk_plaintext_load_reg_723);
    or_ln273_2_fu_585_p5 <= (((sk_data_q1 & sk_data_q0) & sk_data_load_1_reg_748) & sk_data_load_reg_743);
    select_ln249_fu_600_p3 <= 
        ap_const_lv32_FFFFFFFF when (ap_phi_mux_p_0_phi_fu_382_p4(0) = '1') else 
        ap_const_lv32_0;

    sig_0_challengeBits_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_challengeBits_address0, grp_serializeSignature_fu_419_sig_0_challengeBits_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_challengeBits_address0 <= grp_serializeSignature_fu_419_sig_0_challengeBits_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_challengeBits_address0 <= grp_sign_picnic1_fu_390_sig_0_challengeBits_address0;
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0, grp_serializeSignature_fu_419_sig_0_challengeBits_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_challengeBits_ce0 <= grp_serializeSignature_fu_419_sig_0_challengeBits_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_challengeBits_ce0 <= grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_challengeBits_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_challengeBits_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_challengeBits_we0 <= grp_sign_picnic1_fu_390_sig_0_challengeBits_we0;
        else 
            sig_0_challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_commun_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0, grp_serializeSignature_fu_419_sig_0_proofs_commun_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_commun_address0 <= grp_serializeSignature_fu_419_sig_0_proofs_commun_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_commun_address0 <= grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0;
        else 
            sig_0_proofs_commun_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_commun_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0, grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_commun_ce0 <= grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_commun_ce0 <= grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0;
        else 
            sig_0_proofs_commun_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_commun_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_commun_we0 <= grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0;
        else 
            sig_0_proofs_commun_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_inputS_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0, grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_inputS_address0 <= grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_inputS_address0 <= grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0;
        else 
            sig_0_proofs_inputS_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_inputS_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0, grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_inputS_ce0 <= grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_inputS_ce0 <= grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0;
        else 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_inputS_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_inputS_we0 <= grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0;
        else 
            sig_0_proofs_inputS_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed1_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0, grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_seed1_address0 <= grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed1_address0 <= grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0;
        else 
            sig_0_proofs_seed1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_seed1_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0, grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_seed1_ce0 <= grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed1_ce0 <= grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0;
        else 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed1_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed1_we0 <= grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0;
        else 
            sig_0_proofs_seed1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed2_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0, grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_seed2_address0 <= grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed2_address0 <= grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0;
        else 
            sig_0_proofs_seed2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_seed2_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0, grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_seed2_ce0 <= grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed2_ce0 <= grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0;
        else 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_seed2_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_seed2_we0 <= grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0;
        else 
            sig_0_proofs_seed2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_view3C_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0, grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_view3C_address0 <= grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_view3C_address0 <= grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0;
        else 
            sig_0_proofs_view3C_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_0_proofs_view3C_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0, grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_proofs_view3C_ce0 <= grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_view3C_ce0 <= grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0;
        else 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_proofs_view3C_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_view3C_we0 <= grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0;
        else 
            sig_0_proofs_view3C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_salt_address0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_salt_address0, grp_serializeSignature_fu_419_sig_0_salt_address0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_salt_address0 <= grp_serializeSignature_fu_419_sig_0_salt_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_salt_address0 <= grp_sign_picnic1_fu_390_sig_0_salt_address0;
        else 
            sig_0_salt_address0 <= "XXXXX";
        end if; 
    end process;


    sig_0_salt_ce0_assign_proc : process(ret2_reg_763, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_salt_ce0, grp_serializeSignature_fu_419_sig_0_salt_ce0, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ret2_reg_763 = ap_const_lv1_0))) then 
            sig_0_salt_ce0 <= grp_serializeSignature_fu_419_sig_0_salt_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_salt_ce0 <= grp_sign_picnic1_fu_390_sig_0_salt_ce0;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_salt_we0_assign_proc : process(ap_CS_fsm_state8, grp_sign_picnic1_fu_390_sig_0_salt_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_salt_we0 <= grp_sign_picnic1_fu_390_sig_0_salt_we0;
        else 
            sig_0_salt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    signature_address0 <= grp_serializeSignature_fu_419_sigBytes_address0;
    signature_ce0 <= grp_serializeSignature_fu_419_sigBytes_ce0;
    signature_d0 <= grp_serializeSignature_fu_419_sigBytes_d0;
    signature_we0 <= grp_serializeSignature_fu_419_sigBytes_we0;

    sk_data_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln271_fu_493_p1, zext_ln271_2_fu_538_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_data_address0 <= zext_ln271_2_fu_538_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_data_address0 <= zext_ln271_fu_493_p1(5 - 1 downto 0);
        else 
            sk_data_address0 <= "XXXXX";
        end if; 
    end process;


    sk_data_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln271_1_fu_510_p1, zext_ln271_3_fu_550_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_data_address1 <= zext_ln271_3_fu_550_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_data_address1 <= zext_ln271_1_fu_510_p1(5 - 1 downto 0);
        else 
            sk_data_address1 <= "XXXXX";
        end if; 
    end process;


    sk_data_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sk_data_ce0 <= ap_const_logic_1;
        else 
            sk_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_data_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sk_data_ce1 <= ap_const_logic_1;
        else 
            sk_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_ciphertext_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln271_fu_493_p1, zext_ln271_2_fu_538_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_pk_ciphertext_address0 <= zext_ln271_2_fu_538_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_pk_ciphertext_address0 <= zext_ln271_fu_493_p1(5 - 1 downto 0);
        else 
            sk_pk_ciphertext_address0 <= "XXXXX";
        end if; 
    end process;


    sk_pk_ciphertext_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln271_1_fu_510_p1, zext_ln271_3_fu_550_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_pk_ciphertext_address1 <= zext_ln271_3_fu_550_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_pk_ciphertext_address1 <= zext_ln271_1_fu_510_p1(5 - 1 downto 0);
        else 
            sk_pk_ciphertext_address1 <= "XXXXX";
        end if; 
    end process;


    sk_pk_ciphertext_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sk_pk_ciphertext_ce0 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_ciphertext_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sk_pk_ciphertext_ce1 <= ap_const_logic_1;
        else 
            sk_pk_ciphertext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_plaintext_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln271_fu_493_p1, zext_ln271_2_fu_538_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_pk_plaintext_address0 <= zext_ln271_2_fu_538_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_pk_plaintext_address0 <= zext_ln271_fu_493_p1(5 - 1 downto 0);
        else 
            sk_pk_plaintext_address0 <= "XXXXX";
        end if; 
    end process;


    sk_pk_plaintext_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln271_1_fu_510_p1, zext_ln271_3_fu_550_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sk_pk_plaintext_address1 <= zext_ln271_3_fu_550_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sk_pk_plaintext_address1 <= zext_ln271_1_fu_510_p1(5 - 1 downto 0);
        else 
            sk_pk_plaintext_address1 <= "XXXXX";
        end if; 
    end process;


    sk_pk_plaintext_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sk_pk_plaintext_ce0 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_pk_plaintext_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sk_pk_plaintext_ce1 <= ap_const_logic_1;
        else 
            sk_pk_plaintext_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_plaintext_address0, ap_CS_fsm_state7, zext_ln269_1_fu_457_p1, zext_ln271_4_fu_568_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp2_address0 <= zext_ln271_4_fu_568_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp2_address0 <= zext_ln269_1_fu_457_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp2_address0 <= grp_sign_picnic1_fu_390_plaintext_address0;
        else 
            temp2_address0 <= "XXX";
        end if; 
    end process;


    temp2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_plaintext_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp2_ce0 <= grp_sign_picnic1_fu_390_plaintext_ce0;
        else 
            temp2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, or_ln272_2_fu_574_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp2_d0 <= or_ln272_2_fu_574_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp2_d0 <= ap_const_lv32_0;
        else 
            temp2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp2_we0 <= ap_const_logic_1;
        else 
            temp2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_privateKey_address0, ap_CS_fsm_state7, zext_ln269_2_fu_474_p1, zext_ln271_4_fu_568_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp3_address0 <= zext_ln271_4_fu_568_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp3_address0 <= zext_ln269_2_fu_474_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp3_address0 <= grp_sign_picnic1_fu_390_privateKey_address0;
        else 
            temp3_address0 <= "XXX";
        end if; 
    end process;


    temp3_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_privateKey_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp3_ce0 <= grp_sign_picnic1_fu_390_privateKey_ce0;
        else 
            temp3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp3_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, or_ln273_2_fu_585_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp3_d0 <= or_ln273_2_fu_585_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp3_d0 <= ap_const_lv32_0;
        else 
            temp3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp3_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp3_we0 <= ap_const_logic_1;
        else 
            temp3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_pubKey_address0, ap_CS_fsm_state7, zext_ln269_fu_440_p1, zext_ln271_4_fu_568_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= zext_ln271_4_fu_568_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_address0 <= zext_ln269_fu_440_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_address0 <= grp_sign_picnic1_fu_390_pubKey_address0;
        else 
            temp_address0 <= "XXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_sign_picnic1_fu_390_pubKey_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_ce0 <= grp_sign_picnic1_fu_390_pubKey_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, or_ln271_5_fu_557_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_d0 <= or_ln271_5_fu_557_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_d0 <= ap_const_lv32_0;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_485_p3 <= loop_0_reg_356(5 downto 5);
    trunc_ln270_fu_500_p1 <= loop_0_reg_356(5 - 1 downto 0);
    viewOutputs_address0 <= grp_sign_picnic1_fu_390_viewOutputs_address0;
    viewOutputs_address1 <= grp_sign_picnic1_fu_390_viewOutputs_address1;
    viewOutputs_ce0 <= grp_sign_picnic1_fu_390_viewOutputs_ce0;
    viewOutputs_ce1 <= grp_sign_picnic1_fu_390_viewOutputs_ce1;
    viewOutputs_d0 <= grp_sign_picnic1_fu_390_viewOutputs_d0;
    viewOutputs_we0 <= grp_sign_picnic1_fu_390_viewOutputs_we0;
    zext_ln249_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_signature_len_write_s_phi_fu_371_p4),64));
    zext_ln269_1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln269_1_reg_334),64));
    zext_ln269_2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln269_2_reg_345),64));
    zext_ln269_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln269_reg_323),64));
    zext_ln271_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln271_fu_504_p2),64));
    zext_ln271_2_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln271_1_fu_533_p2),64));
    zext_ln271_3_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln271_2_fu_545_p2),64));
    zext_ln271_4_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln271_1_reg_673),64));
    zext_ln271_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_356),64));
end behav;
