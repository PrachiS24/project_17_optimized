-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakWidth1600_Spon is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_ce0 : OUT STD_LOGIC;
    instance_state_we0 : OUT STD_LOGIC;
    instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    data_offset1 : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of KeccakWidth1600_Spon is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal KeccakRhoOffsets_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRhoOffsets_ce0 : STD_LOGIC;
    signal KeccakRhoOffsets_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal KeccakRoundConstants_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRoundConstants_ce0 : STD_LOGIC;
    signal KeccakRoundConstants_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_reg_313 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_i_reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_i_reg_336 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_347 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i2_reg_358 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_i5_reg_369 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_cast_fu_451_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_cast_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln304_fu_475_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln304_reg_978 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln304_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_reg_983 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln269_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_30_fu_491_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_30_reg_991 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_addr_10_reg_996 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_502_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1001 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1009 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln271_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_32_fu_575_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_32_reg_1023 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln352_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln352_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln352_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln352_reg_1032 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal x_fu_593_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_1037 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln352_3_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln352_3_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln353_13_fu_605_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_13_reg_1047 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_14_fu_613_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_14_reg_1055 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state10_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln353_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal stateAsWords_addr_12_reg_1070 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln353_fu_736_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln353_reg_1076 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state11_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal y_fu_743_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_1081 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln280_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln280_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state19_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln280_reg_1091_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln280_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln280_fu_784_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln280_reg_1100 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln280_reg_1100_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln280_5_fu_792_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln280_5_reg_1105 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln280_5_reg_1105_pp2_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln282_fu_805_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln282_reg_1116 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_12_fu_809_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln282_5_fu_832_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln282_5_reg_1126 : STD_LOGIC_VECTOR (7 downto 0);
    signal partialBlock_fu_861_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal partialBlock_reg_1131 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal partialBlock_31_fu_888_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal partialBlock_31_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln325_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln325_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_904_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_reg_1147 : STD_LOGIC_VECTOR (32 downto 0);
    signal loop_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln393_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_8_fu_945_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln394_8_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln332_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln331_fu_955_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_theta_fu_409_ap_ready : STD_LOGIC;
    signal grp_theta_fu_409_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal stateAsWords_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce0 : STD_LOGIC;
    signal stateAsWords_we0 : STD_LOGIC;
    signal stateAsWords_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce1 : STD_LOGIC;
    signal stateAsWords_we1 : STD_LOGIC;
    signal stateAsWords_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pi_fu_404_ap_start : STD_LOGIC;
    signal grp_pi_fu_404_ap_done : STD_LOGIC;
    signal grp_pi_fu_404_ap_idle : STD_LOGIC;
    signal grp_pi_fu_404_ap_ready : STD_LOGIC;
    signal grp_pi_fu_404_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_404_A_ce0 : STD_LOGIC;
    signal grp_pi_fu_404_A_we0 : STD_LOGIC;
    signal grp_pi_fu_404_A_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pi_fu_404_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_404_A_ce1 : STD_LOGIC;
    signal grp_pi_fu_404_A_we1 : STD_LOGIC;
    signal grp_pi_fu_404_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_theta_fu_409_ap_start : STD_LOGIC;
    signal grp_theta_fu_409_ap_idle : STD_LOGIC;
    signal grp_theta_fu_409_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_409_A_ce0 : STD_LOGIC;
    signal grp_theta_fu_409_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_409_A_ce1 : STD_LOGIC;
    signal grp_theta_fu_409_A_we1 : STD_LOGIC;
    signal grp_theta_fu_409_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_chi_fu_414_ap_start : STD_LOGIC;
    signal grp_chi_fu_414_ap_done : STD_LOGIC;
    signal grp_chi_fu_414_ap_idle : STD_LOGIC;
    signal grp_chi_fu_414_ap_ready : STD_LOGIC;
    signal grp_chi_fu_414_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_414_A_ce0 : STD_LOGIC;
    signal grp_chi_fu_414_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_414_A_ce1 : STD_LOGIC;
    signal grp_chi_fu_414_A_we1 : STD_LOGIC;
    signal grp_chi_fu_414_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal instance_byteIOIndex_1_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_254 : STD_LOGIC_VECTOR (32 downto 0);
    signal curData_0_idx_reg_266 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_i_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indexRound_assign_reg_301 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_317_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_x_0_i_phi_fu_328_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_y_0_i_phi_fu_340_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i_0_i2_phi_fu_362_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal offset_assign_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_0_i11_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_pi_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_theta_fu_409_ap_start_reg : STD_LOGIC := '0';
    signal grp_chi_fu_414_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln270_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_4_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln382_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln280_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_4_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_13_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln272_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln382_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_427_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln394_11_fu_435_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln394_10_fu_423_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln394_fu_439_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln394_9_fu_419_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln394_7_fu_445_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_459_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln271_fu_522_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln272_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln272_fu_540_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln272_3_fu_544_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln272_3_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_4_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln272_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln353_7_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln353_8_fu_625_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_15_fu_631_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln353_8_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln353_9_fu_648_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_16_fu_653_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln353_fu_639_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln353_1_fu_660_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln353_fu_672_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln5_fu_664_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln353_3_fu_678_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln353_1_fu_682_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln353_6_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_5_fu_700_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln353_fu_714_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln353_7_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln353_fu_724_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln353_fu_708_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln353_fu_730_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln281_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_31_fu_772_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln282_2_fu_815_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln282_3_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln282_fu_826_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln281_fu_843_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln282_mid2_fu_836_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln282_fu_846_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln322_fu_857_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln322_fu_867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln323_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln323_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partialBlock_30_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln325_1_fu_900_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln394_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln394_fu_932_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln394_1_fu_936_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln394_12_fu_941_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component pi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component theta IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component chi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakP1600OnWordeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component KeccakP1600OnWordfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pi_tempA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    KeccakRhoOffsets_U : component KeccakP1600OnWordeOg
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRhoOffsets_address0,
        ce0 => KeccakRhoOffsets_ce0,
        q0 => KeccakRhoOffsets_q0);

    KeccakRoundConstants_U : component KeccakP1600OnWordfYi
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRoundConstants_address0,
        ce0 => KeccakRoundConstants_ce0,
        q0 => KeccakRoundConstants_q0);

    stateAsWords_U : component pi_tempA
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stateAsWords_address0,
        ce0 => stateAsWords_ce0,
        we0 => stateAsWords_we0,
        d0 => stateAsWords_d0,
        q0 => stateAsWords_q0,
        address1 => stateAsWords_address1,
        ce1 => stateAsWords_ce1,
        we1 => stateAsWords_we1,
        d1 => stateAsWords_d1,
        q1 => stateAsWords_q1);

    grp_pi_fu_404 : component pi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pi_fu_404_ap_start,
        ap_done => grp_pi_fu_404_ap_done,
        ap_idle => grp_pi_fu_404_ap_idle,
        ap_ready => grp_pi_fu_404_ap_ready,
        A_address0 => grp_pi_fu_404_A_address0,
        A_ce0 => grp_pi_fu_404_A_ce0,
        A_we0 => grp_pi_fu_404_A_we0,
        A_d0 => grp_pi_fu_404_A_d0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_pi_fu_404_A_address1,
        A_ce1 => grp_pi_fu_404_A_ce1,
        A_we1 => grp_pi_fu_404_A_we1,
        A_d1 => grp_pi_fu_404_A_d1,
        A_q1 => stateAsWords_q1);

    grp_theta_fu_409 : component theta
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_theta_fu_409_ap_start,
        ap_done => grp_theta_fu_409_ap_done,
        ap_idle => grp_theta_fu_409_ap_idle,
        ap_ready => grp_theta_fu_409_ap_ready,
        A_address0 => grp_theta_fu_409_A_address0,
        A_ce0 => grp_theta_fu_409_A_ce0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_theta_fu_409_A_address1,
        A_ce1 => grp_theta_fu_409_A_ce1,
        A_we1 => grp_theta_fu_409_A_we1,
        A_d1 => grp_theta_fu_409_A_d1,
        A_q1 => stateAsWords_q1);

    grp_chi_fu_414 : component chi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_chi_fu_414_ap_start,
        ap_done => grp_chi_fu_414_ap_done,
        ap_idle => grp_chi_fu_414_ap_idle,
        ap_ready => grp_chi_fu_414_ap_ready,
        A_address0 => grp_chi_fu_414_A_address0,
        A_ce0 => grp_chi_fu_414_A_ce0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_chi_fu_414_A_address1,
        A_ce1 => grp_chi_fu_414_A_ce1,
        A_we1 => grp_chi_fu_414_A_we1,
        A_d1 => grp_chi_fu_414_A_d1,
        A_q1 => stateAsWords_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_theta_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_theta_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln293_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((icmp_ln293_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_chi_fu_414_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_chi_fu_414_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_chi_fu_414_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_chi_fu_414_ap_ready = ap_const_logic_1)) then 
                    grp_chi_fu_414_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pi_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pi_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_pi_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pi_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_pi_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_theta_fu_409_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_theta_fu_409_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln293_fu_569_p2 = ap_const_lv1_0))) then 
                    grp_theta_fu_409_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_theta_fu_409_ap_ready = ap_const_logic_1)) then 
                    grp_theta_fu_409_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    curData_0_idx_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_910_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                curData_0_idx_reg_266 <= add_ln331_fu_955_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                curData_0_idx_reg_266 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_0_i2_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_i2_reg_358 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_reg_1091 = ap_const_lv1_0))) then 
                i_0_i2_reg_358 <= select_ln280_5_reg_1105;
            end if; 
        end if;
    end process;

    i_0_i_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_i_reg_278 <= i_30_reg_991;
            elsif (((icmp_ln305_fu_479_p2 = ap_const_lv1_1) and (icmp_ln304_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_278 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_910_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_0_reg_254 <= i_reg_1147;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_254 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    indexRound_assign_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indexRound_assign_reg_301 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indexRound_assign_reg_301 <= i_32_reg_1023;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                indvar_flatten7_reg_347 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_760_p2 = ap_const_lv1_0))) then 
                indvar_flatten7_reg_347 <= add_ln280_fu_766_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then 
                indvar_flatten_reg_313 <= add_ln352_reg_1032;
            elsif (((grp_theta_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvar_flatten_reg_313 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_1_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_910_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                instance_byteIOIndex_1_reg_242 <= add_ln332_fu_950_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                instance_byteIOIndex_1_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_0_i5_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_0_i5_reg_369 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_760_p2 = ap_const_lv1_0))) then 
                j_0_i5_reg_369 <= j_12_fu_809_p2;
            end if; 
        end if;
    end process;

    j_0_i_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_i_reg_289 <= j_reg_1009;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln269_fu_485_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    loop_0_i11_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                loop_0_i11_reg_393 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                loop_0_i11_reg_393 <= loop_reg_1155;
            end if; 
        end if;
    end process;

    offset_assign_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln305_reg_983 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                offset_assign_reg_380 <= ap_const_lv32_0;
            elsif (((icmp_ln304_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln305_fu_479_p2 = ap_const_lv1_0))) then 
                offset_assign_reg_380 <= instance_byteIOIndex_1_reg_242;
            end if; 
        end if;
    end process;

    x_0_i_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then 
                x_0_i_reg_324 <= select_ln353_14_reg_1055;
            elsif (((grp_theta_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                x_0_i_reg_324 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then 
                y_0_i_reg_336 <= y_reg_1081;
            elsif (((grp_theta_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                y_0_i_reg_336 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln352_reg_1032 <= add_ln352_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln393_fu_910_p2 = ap_const_lv1_0))) then
                add_ln394_8_reg_1165 <= add_ln394_8_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_30_reg_991 <= i_30_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_32_reg_1023 <= i_32_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_reg_1147 <= i_fu_904_p2;
                partialBlock_31_reg_1136 <= partialBlock_31_fu_888_p3;
                    zext_ln325_reg_1142(31 downto 0) <= zext_ln325_fu_896_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln280_reg_1091 <= icmp_ln280_fu_760_p2;
                icmp_ln280_reg_1091_pp2_iter1_reg <= icmp_ln280_reg_1091;
                select_ln280_5_reg_1105_pp2_iter1_reg <= select_ln280_5_reg_1105;
                select_ln280_reg_1100_pp2_iter1_reg <= select_ln280_reg_1100;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln304_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln305_reg_983 <= icmp_ln305_fu_479_p2;
                trunc_ln304_reg_978 <= trunc_ln304_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_fu_581_p2 = ap_const_lv1_0))) then
                icmp_ln352_3_reg_1042 <= icmp_ln352_3_fu_599_p2;
                select_ln353_13_reg_1047 <= select_ln353_13_fu_605_p3;
                x_reg_1037 <= x_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln352_reg_1028 <= icmp_ln352_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then
                icmp_ln353_reg_1065 <= icmp_ln353_fu_694_p2;
                stateAsWords_addr_12_reg_1070 <= zext_ln353_4_fu_688_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_1009 <= j_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                loop_reg_1155 <= loop_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                partialBlock_reg_1131 <= partialBlock_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_760_p2 = ap_const_lv1_0))) then
                select_ln280_5_reg_1105 <= select_ln280_5_fu_792_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_760_p2 = ap_const_lv1_0))) then
                select_ln280_reg_1100 <= select_ln280_fu_784_p3;
                trunc_ln282_reg_1116 <= trunc_ln282_fu_805_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then
                select_ln353_14_reg_1055 <= select_ln353_14_fu_613_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then
                select_ln353_reg_1076 <= select_ln353_fu_736_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln269_fu_485_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_1001(7 downto 3) <= shl_ln_fu_502_p3(7 downto 3);
                stateAsWords_addr_10_reg_996 <= zext_ln270_fu_497_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_54_cast_reg_964(15 downto 5) <= tmp_54_cast_fu_451_p3(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_reg_1091 = ap_const_lv1_0))) then
                trunc_ln282_5_reg_1126 <= trunc_ln282_5_fu_832_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then
                y_reg_1081 <= y_fu_743_p2;
            end if;
        end if;
    end process;
    tmp_54_cast_reg_964(4 downto 0) <= "00000";
    shl_ln_reg_1001(2 downto 0) <= "000";
    zext_ln325_reg_1142(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln304_fu_469_p2, icmp_ln305_fu_479_p2, icmp_ln269_fu_485_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln271_fu_510_p2, icmp_ln293_fu_569_p2, ap_CS_fsm_state7, icmp_ln352_fu_581_p2, ap_enable_reg_pp1_iter0, icmp_ln280_fu_760_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state24, icmp_ln393_fu_910_p2, ap_CS_fsm_state8, grp_theta_fu_409_ap_done, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, grp_pi_fu_404_ap_done, grp_chi_fu_414_ap_done, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln304_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln305_fu_479_p2 = ap_const_lv1_1) and (icmp_ln304_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln269_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln271_fu_510_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln293_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((grp_theta_fu_409_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln352_fu_581_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln352_fu_581_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_pi_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_chi_fu_414_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln280_fu_760_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((icmp_ln280_fu_760_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln393_fu_910_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    KeccakRhoOffsets_address0 <= zext_ln353_4_fu_688_p1(5 - 1 downto 0);

    KeccakRhoOffsets_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            KeccakRhoOffsets_ce0 <= ap_const_logic_1;
        else 
            KeccakRhoOffsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    KeccakRoundConstants_address0 <= zext_ln382_fu_748_p1(5 - 1 downto 0);

    KeccakRoundConstants_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            KeccakRoundConstants_ce0 <= ap_const_logic_1;
        else 
            KeccakRoundConstants_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln272_fu_526_p2 <= std_logic_vector(unsigned(shl_ln_reg_1001) + unsigned(zext_ln271_fu_522_p1));
    add_ln280_fu_766_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_347) + unsigned(ap_const_lv8_1));
    add_ln282_fu_846_p2 <= std_logic_vector(unsigned(zext_ln281_fu_843_p1) + unsigned(shl_ln282_mid2_fu_836_p3));
    add_ln323_fu_870_p2 <= std_logic_vector(unsigned(offset_assign_reg_380) + unsigned(zext_ln322_fu_867_p1));
    add_ln331_fu_955_p2 <= std_logic_vector(unsigned(zext_ln325_reg_1142) + unsigned(curData_0_idx_reg_266));
    add_ln332_fu_950_p2 <= std_logic_vector(unsigned(offset_assign_reg_380) + unsigned(partialBlock_31_reg_1136));
    add_ln352_fu_587_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_317_p4) + unsigned(ap_const_lv5_1));
    add_ln353_1_fu_682_p2 <= std_logic_vector(unsigned(shl_ln5_fu_664_p3) + unsigned(zext_ln353_3_fu_678_p1));
    add_ln353_8_fu_625_p2 <= std_logic_vector(unsigned(select_ln353_14_fu_613_p3) + unsigned(ap_const_lv3_3));
    add_ln353_9_fu_648_p2 <= std_logic_vector(unsigned(select_ln353_13_reg_1047) + unsigned(ap_const_lv3_3));
    add_ln353_fu_672_p2 <= std_logic_vector(unsigned(zext_ln353_fu_639_p1) + unsigned(zext_ln353_1_fu_660_p1));
    add_ln394_1_fu_936_p2 <= std_logic_vector(unsigned(trunc_ln394_fu_932_p1) + unsigned(trunc_ln304_reg_978));
    add_ln394_7_fu_445_p2 <= std_logic_vector(unsigned(sub_ln394_fu_439_p2) + unsigned(zext_ln394_9_fu_419_p1));
    add_ln394_8_fu_945_p2 <= std_logic_vector(unsigned(tmp_54_cast_reg_964) + unsigned(zext_ln394_12_fu_941_p1));
    add_ln394_fu_921_p2 <= std_logic_vector(unsigned(offset_assign_reg_380) + unsigned(loop_0_i11_reg_393));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln352_fu_581_p2)
    begin
        if ((icmp_ln352_fu_581_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state19_assign_proc : process(icmp_ln280_fu_760_p2)
    begin
        if ((icmp_ln280_fu_760_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln304_fu_469_p2)
    begin
        if ((((icmp_ln304_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i2_phi_fu_362_p4_assign_proc : process(i_0_i2_reg_358, icmp_ln280_reg_1091, ap_CS_fsm_pp2_stage0, select_ln280_5_reg_1105, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_reg_1091 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i2_phi_fu_362_p4 <= select_ln280_5_reg_1105;
        else 
            ap_phi_mux_i_0_i2_phi_fu_362_p4 <= i_0_i2_reg_358;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_317_p4_assign_proc : process(indvar_flatten_reg_313, icmp_ln352_reg_1028, ap_CS_fsm_pp1_stage0, add_ln352_reg_1032, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_317_p4 <= add_ln352_reg_1032;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_317_p4 <= indvar_flatten_reg_313;
        end if; 
    end process;


    ap_phi_mux_x_0_i_phi_fu_328_p4_assign_proc : process(x_0_i_reg_324, icmp_ln352_reg_1028, ap_CS_fsm_pp1_stage0, select_ln353_14_reg_1055, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then 
            ap_phi_mux_x_0_i_phi_fu_328_p4 <= select_ln353_14_reg_1055;
        else 
            ap_phi_mux_x_0_i_phi_fu_328_p4 <= x_0_i_reg_324;
        end if; 
    end process;


    ap_phi_mux_y_0_i_phi_fu_340_p4_assign_proc : process(y_0_i_reg_336, icmp_ln352_reg_1028, ap_CS_fsm_pp1_stage0, y_reg_1081, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln352_reg_1028 = ap_const_lv1_0))) then 
            ap_phi_mux_y_0_i_phi_fu_340_p4 <= y_reg_1081;
        else 
            ap_phi_mux_y_0_i_phi_fu_340_p4 <= y_0_i_reg_336;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln304_fu_469_p2)
    begin
        if (((icmp_ln304_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= zext_ln394_13_fu_960_p1(15 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_d0 <= instance_state_q0;

    data_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_chi_fu_414_ap_start <= grp_chi_fu_414_ap_start_reg;
    grp_pi_fu_404_ap_start <= grp_pi_fu_404_ap_start_reg;
    grp_theta_fu_409_ap_start <= grp_theta_fu_409_ap_start_reg;
    i_30_fu_491_p2 <= std_logic_vector(unsigned(i_0_i_reg_278) + unsigned(ap_const_lv5_1));
    i_31_fu_772_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_i_0_i2_phi_fu_362_p4));
    i_32_fu_575_p2 <= std_logic_vector(unsigned(indexRound_assign_reg_301) + unsigned(ap_const_lv5_1));
    i_fu_904_p2 <= std_logic_vector(unsigned(zext_ln325_1_fu_900_p1) + unsigned(i_0_reg_254));
    icmp_ln269_fu_485_p2 <= "1" when (i_0_i_reg_278 = ap_const_lv5_19) else "0";
    icmp_ln271_fu_510_p2 <= "1" when (j_0_i_reg_289 = ap_const_lv4_8) else "0";
    icmp_ln280_fu_760_p2 <= "1" when (indvar_flatten7_reg_347 = ap_const_lv8_C8) else "0";
    icmp_ln281_fu_778_p2 <= "1" when (j_0_i5_reg_369 = ap_const_lv4_8) else "0";
    icmp_ln293_fu_569_p2 <= "1" when (indexRound_assign_reg_301 = ap_const_lv5_18) else "0";
    icmp_ln304_fu_469_p2 <= "1" when (tmp_62_fu_459_p4 = ap_const_lv28_0) else "0";
    icmp_ln305_fu_479_p2 <= "1" when (instance_byteIOIndex_1_reg_242 = ap_const_lv32_A8) else "0";
    icmp_ln323_fu_876_p2 <= "1" when (unsigned(add_ln323_fu_870_p2) > unsigned(ap_const_lv32_A8)) else "0";
    icmp_ln352_3_fu_599_p2 <= "1" when (ap_phi_mux_y_0_i_phi_fu_340_p4 = ap_const_lv3_5) else "0";
    icmp_ln352_fu_581_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_317_p4 = ap_const_lv5_19) else "0";
    icmp_ln353_7_fu_619_p2 <= "1" when (unsigned(select_ln353_14_fu_613_p3) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln353_8_fu_643_p2 <= "1" when (unsigned(select_ln353_13_reg_1047) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln353_fu_694_p2 <= "1" when (add_ln353_1_fu_682_p2 = ap_const_lv5_0) else "0";
    icmp_ln393_fu_910_p2 <= "1" when (loop_0_i11_reg_393 = partialBlock_31_reg_1136) else "0";

    instance_state_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state24, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, zext_ln272_fu_531_p1, zext_ln282_4_fu_852_p1, zext_ln394_fu_927_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            instance_state_address0 <= zext_ln394_fu_927_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            instance_state_address0 <= zext_ln282_4_fu_852_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            instance_state_address0 <= zext_ln272_fu_531_p1(8 - 1 downto 0);
        else 
            instance_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_ce0_assign_proc : process(ap_CS_fsm_state4, ap_block_pp2_stage0_11001, ap_CS_fsm_state24, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            instance_state_ce0 <= ap_const_logic_1;
        else 
            instance_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    instance_state_d0 <= trunc_ln282_5_reg_1126;

    instance_state_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln280_reg_1091_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln280_reg_1091_pp2_iter1_reg = ap_const_lv1_0))) then 
            instance_state_we0 <= ap_const_logic_1;
        else 
            instance_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_12_fu_809_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln280_fu_784_p3));
    j_fu_516_p2 <= std_logic_vector(unsigned(j_0_i_reg_289) + unsigned(ap_const_lv4_1));
    loop_fu_915_p2 <= std_logic_vector(unsigned(loop_0_i11_reg_393) + unsigned(ap_const_lv32_1));
    lshr_ln282_fu_826_p2 <= std_logic_vector(shift_right(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln282_3_fu_822_p1(31-1 downto 0)))));
    lshr_ln353_fu_724_p2 <= std_logic_vector(shift_right(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln353_7_fu_720_p1(31-1 downto 0)))));
    or_ln272_fu_562_p2 <= (stateAsWords_q0 or shl_ln272_fu_556_p2);
    partialBlock_30_fu_882_p2 <= std_logic_vector(unsigned(ap_const_lv32_A8) - unsigned(offset_assign_reg_380));
    partialBlock_31_fu_888_p3 <= 
        partialBlock_30_fu_882_p2 when (icmp_ln323_fu_876_p2(0) = '1') else 
        zext_ln322_fu_867_p1;
    partialBlock_fu_861_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(trunc_ln322_fu_857_p1));
    select_ln280_5_fu_792_p3 <= 
        i_31_fu_772_p2 when (icmp_ln281_fu_778_p2(0) = '1') else 
        ap_phi_mux_i_0_i2_phi_fu_362_p4;
    select_ln280_fu_784_p3 <= 
        ap_const_lv4_0 when (icmp_ln281_fu_778_p2(0) = '1') else 
        j_0_i5_reg_369;
    select_ln353_13_fu_605_p3 <= 
        ap_const_lv3_0 when (icmp_ln352_3_fu_599_p2(0) = '1') else 
        ap_phi_mux_y_0_i_phi_fu_340_p4;
    select_ln353_14_fu_613_p3 <= 
        x_reg_1037 when (icmp_ln352_3_reg_1042(0) = '1') else 
        x_0_i_reg_324;
    select_ln353_15_fu_631_p3 <= 
        select_ln353_14_fu_613_p3 when (icmp_ln353_7_fu_619_p2(0) = '1') else 
        add_ln353_8_fu_625_p2;
    select_ln353_16_fu_653_p3 <= 
        select_ln353_13_reg_1047 when (icmp_ln353_8_fu_643_p2(0) = '1') else 
        add_ln353_9_fu_648_p2;
    select_ln353_fu_736_p3 <= 
        stateAsWords_q0 when (icmp_ln353_reg_1065(0) = '1') else 
        xor_ln353_fu_730_p2;
    shl_ln272_3_fu_544_p3 <= (trunc_ln272_fu_540_p1 & ap_const_lv3_0);
    shl_ln272_fu_556_p2 <= std_logic_vector(shift_left(unsigned(zext_ln272_3_fu_536_p1),to_integer(unsigned('0' & zext_ln272_4_fu_552_p1(31-1 downto 0)))));
    shl_ln282_2_fu_815_p3 <= (trunc_ln282_reg_1116 & ap_const_lv3_0);
    shl_ln282_mid2_fu_836_p3 <= (select_ln280_5_reg_1105_pp2_iter1_reg & ap_const_lv3_0);
    shl_ln353_fu_708_p2 <= std_logic_vector(shift_left(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln353_6_fu_704_p1(31-1 downto 0)))));
    shl_ln5_fu_664_p3 <= (select_ln353_16_fu_653_p3 & ap_const_lv2_0);
    shl_ln_fu_502_p3 <= (i_0_i_reg_278 & ap_const_lv3_0);

    stateAsWords_address0_assign_proc : process(ap_CS_fsm_state3, stateAsWords_addr_10_reg_996, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, stateAsWords_addr_12_reg_1070, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, grp_pi_fu_404_A_address0, grp_theta_fu_409_A_address0, grp_chi_fu_414_A_address0, ap_CS_fsm_state5, ap_block_pp1_stage0, ap_CS_fsm_state14, ap_CS_fsm_state16, zext_ln270_fu_497_p1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stateAsWords_address0 <= stateAsWords_addr_12_reg_1070;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            stateAsWords_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            stateAsWords_address0 <= stateAsWords_addr_10_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            stateAsWords_address0 <= zext_ln270_fu_497_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_address0 <= grp_chi_fu_414_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_address0 <= grp_theta_fu_409_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_address0 <= grp_pi_fu_404_A_address0;
        else 
            stateAsWords_address0 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_address1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state17, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state8, grp_pi_fu_404_A_address1, grp_theta_fu_409_A_address1, grp_chi_fu_414_A_address1, ap_CS_fsm_state18, ap_block_pp2_stage0, ap_CS_fsm_state14, ap_CS_fsm_state16, zext_ln353_4_fu_688_p1, ap_block_pp1_stage1, zext_ln280_fu_800_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            stateAsWords_address1 <= zext_ln280_fu_800_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            stateAsWords_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            stateAsWords_address1 <= zext_ln353_4_fu_688_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_address1 <= grp_chi_fu_414_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_address1 <= grp_theta_fu_409_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_address1 <= grp_pi_fu_404_A_address1;
        else 
            stateAsWords_address1 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter1, grp_pi_fu_404_A_ce0, grp_theta_fu_409_A_ce0, grp_chi_fu_414_A_ce0, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            stateAsWords_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_ce0 <= grp_chi_fu_414_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_ce0 <= grp_theta_fu_409_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_ce0 <= grp_pi_fu_404_A_ce0;
        else 
            stateAsWords_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_ce1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state17, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state8, grp_pi_fu_404_A_ce1, grp_theta_fu_409_A_ce1, grp_chi_fu_414_A_ce1, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            stateAsWords_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_ce1 <= grp_chi_fu_414_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_ce1 <= grp_theta_fu_409_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_ce1 <= grp_pi_fu_404_A_ce1;
        else 
            stateAsWords_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, select_ln353_reg_1076, ap_enable_reg_pp1_iter1, grp_pi_fu_404_A_d0, ap_CS_fsm_state5, ap_block_pp1_stage0, ap_CS_fsm_state14, or_ln272_fu_562_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stateAsWords_d0 <= select_ln353_reg_1076;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stateAsWords_d0 <= or_ln272_fu_562_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            stateAsWords_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_d0 <= grp_pi_fu_404_A_d0;
        else 
            stateAsWords_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_d1_assign_proc : process(ap_CS_fsm_state8, grp_pi_fu_404_A_d1, grp_theta_fu_409_A_d1, grp_chi_fu_414_A_d1, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state16, xor_ln382_fu_753_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_d1 <= xor_ln382_fu_753_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_d1 <= grp_chi_fu_414_A_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_d1 <= grp_theta_fu_409_A_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_d1 <= grp_pi_fu_404_A_d1;
        else 
            stateAsWords_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_we0_assign_proc : process(icmp_ln269_fu_485_p2, ap_CS_fsm_state3, icmp_ln352_reg_1028, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, grp_pi_fu_404_A_we0, ap_CS_fsm_state5, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1028 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln269_fu_485_p2 = ap_const_lv1_0)))) then 
            stateAsWords_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_we0 <= grp_pi_fu_404_A_we0;
        else 
            stateAsWords_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_we1_assign_proc : process(ap_CS_fsm_state8, grp_pi_fu_404_A_we1, grp_theta_fu_409_A_we1, grp_chi_fu_414_A_we1, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_we1 <= grp_chi_fu_414_A_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_we1 <= grp_theta_fu_409_A_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_we1 <= grp_pi_fu_404_A_we1;
        else 
            stateAsWords_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln353_fu_714_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln353_5_fu_700_p1));
    sub_ln394_fu_439_p2 <= std_logic_vector(unsigned(zext_ln394_11_fu_435_p1) - unsigned(zext_ln394_10_fu_423_p1));
    tmp_54_cast_fu_451_p3 <= (add_ln394_7_fu_445_p2 & ap_const_lv5_0);
    tmp_62_fu_459_p4 <= i_0_reg_254(32 downto 5);
    tmp_fu_427_p3 <= (data_offset & ap_const_lv2_0);
    trunc_ln272_fu_540_p1 <= j_0_i_reg_289(3 - 1 downto 0);
    trunc_ln282_5_fu_832_p1 <= lshr_ln282_fu_826_p2(8 - 1 downto 0);
    trunc_ln282_fu_805_p1 <= select_ln280_fu_784_p3(3 - 1 downto 0);
    trunc_ln304_fu_475_p1 <= curData_0_idx_reg_266(7 - 1 downto 0);
    trunc_ln322_fu_857_p1 <= i_0_reg_254(6 - 1 downto 0);
    trunc_ln394_fu_932_p1 <= loop_0_i11_reg_393(7 - 1 downto 0);
    x_fu_593_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_0_i_phi_fu_328_p4) + unsigned(ap_const_lv3_1));
    xor_ln353_fu_730_p2 <= (shl_ln353_fu_708_p2 xor lshr_ln353_fu_724_p2);
    xor_ln382_fu_753_p2 <= (stateAsWords_q1 xor KeccakRoundConstants_q0);
    y_fu_743_p2 <= std_logic_vector(unsigned(select_ln353_13_reg_1047) + unsigned(ap_const_lv3_1));
    zext_ln270_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_278),64));
    zext_ln271_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_289),8));
    zext_ln272_3_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(instance_state_q0),64));
    zext_ln272_4_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln272_3_fu_544_p3),64));
    zext_ln272_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln272_fu_526_p2),64));
    zext_ln280_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln280_5_fu_792_p3),64));
    zext_ln281_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln280_reg_1100_pp2_iter1_reg),8));
    zext_ln282_3_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln282_2_fu_815_p3),64));
    zext_ln282_4_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln282_fu_846_p2),64));
    zext_ln322_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_reg_1131),32));
    zext_ln325_1_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_31_fu_888_p3),33));
    zext_ln325_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_31_fu_888_p3),64));
    zext_ln353_1_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln353_16_fu_653_p3),4));
    zext_ln353_3_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_fu_672_p2),5));
    zext_ln353_4_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_1_fu_682_p2),64));
    zext_ln353_5_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),7));
    zext_ln353_6_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),64));
    zext_ln353_7_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln353_fu_714_p2),64));
    zext_ln353_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln353_15_fu_631_p3),4));
    zext_ln382_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexRound_assign_reg_301),64));
    zext_ln394_10_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_offset),11));
    zext_ln394_11_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_427_p3),11));
    zext_ln394_12_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_1_fu_936_p2),16));
    zext_ln394_13_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_8_reg_1165),64));
    zext_ln394_9_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_offset1),11));
    zext_ln394_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_fu_921_p2),64));
end behav;
