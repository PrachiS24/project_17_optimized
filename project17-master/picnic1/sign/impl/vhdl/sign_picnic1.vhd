-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sign_picnic1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    privateKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    privateKey_ce0 : OUT STD_LOGIC;
    privateKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pubKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    pubKey_ce0 : OUT STD_LOGIC;
    pubKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    plaintext_ce0 : OUT STD_LOGIC;
    plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    message_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    messageByteLength : IN STD_LOGIC_VECTOR (63 downto 0);
    sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_we0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_we0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
    sig_0_proofs_commun_we0 : OUT STD_LOGIC;
    sig_0_proofs_commun_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_we0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sig_0_challengeBits_ce0 : OUT STD_LOGIC;
    sig_0_challengeBits_we0 : OUT STD_LOGIC;
    sig_0_challengeBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sig_0_salt_ce0 : OUT STD_LOGIC;
    sig_0_salt_we0 : OUT STD_LOGIC;
    sig_0_salt_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_0_salt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce0 : OUT STD_LOGIC;
    viewOutputs_we0 : OUT STD_LOGIC;
    viewOutputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    viewOutputs_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    viewOutputs_ce1 : OUT STD_LOGIC;
    viewOutputs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sign_picnic1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_const_lv13_8 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_const_lv9_A6 : STD_LOGIC_VECTOR (8 downto 0) := "010100110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv16_E4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100100";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv12_A44 : STD_LOGIC_VECTOR (11 downto 0) := "101001000100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv61_2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv61_4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal loop_0_reg_521 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_1_reg_533 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal loop_1_reg_533_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_1_reg_533_pp1_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten19_reg_556 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_0_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_578 : STD_LOGIC_VECTOR (4 downto 0);
    signal j1_0_reg_589 : STD_LOGIC_VECTOR (1 downto 0);
    signal loop_2_reg_600 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1761_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_1541 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1772_fu_838_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1772_reg_1546 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1786_fu_854_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1786_reg_1551 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_fu_860_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_reg_1556 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_1_fu_866_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_1_reg_1561 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1763_fu_872_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1763_reg_1566 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_3_fu_886_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_1574 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1772_fu_896_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1772_reg_1579 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_901_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1584 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln1771_fu_909_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1771_reg_1588 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1_reg_1604 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_load_reg_1609 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_0_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_load_1_reg_1614 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_fu_959_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_reg_1629 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1774_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1774_reg_1634_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_4_fu_993_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_4_reg_1638 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln1775_fu_999_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_reg_1648 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_reg_1648_pp1_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1775_1_fu_1043_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1775_1_reg_1673 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_fu_1081_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1681 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln1785_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1786_4_fu_1116_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_4_reg_1696 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1808_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1808_reg_1706 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state33_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln1808_reg_1706_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1808_fu_1176_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln1808_1_fu_1202_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1808_1_reg_1715 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1809_fu_1270_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1809_reg_1722 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1809_reg_1722_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1809_1_fu_1282_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1809_1_reg_1728 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1809_2_fu_1304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1809_2_reg_1734 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1809_2_reg_1734_pp2_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal loop_3_fu_1312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1809_3_fu_1324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_fu_1402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_5_reg_1757 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln1817_fu_1408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1817_reg_1762 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1816_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal viewOutputs_load_reg_1782 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_1449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_1790 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln1826_fu_1443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_1522_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_1800 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_createRandomTape_fu_657_ap_ready : STD_LOGIC;
    signal grp_createRandomTape_fu_657_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state33 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal views_inputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal views_inputShare_ce0 : STD_LOGIC;
    signal views_inputShare_we0 : STD_LOGIC;
    signal views_inputShare_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal views_inputShare_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal views_inputShare_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal views_inputShare_ce1 : STD_LOGIC;
    signal views_inputShare_we1 : STD_LOGIC;
    signal views_inputShare_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal views_inputShare_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal views_communicatedBi_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal views_communicatedBi_ce0 : STD_LOGIC;
    signal views_communicatedBi_we0 : STD_LOGIC;
    signal views_communicatedBi_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal views_outputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal views_outputShare_ce0 : STD_LOGIC;
    signal views_outputShare_we0 : STD_LOGIC;
    signal views_outputShare_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal as_hashes_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal as_hashes_ce0 : STD_LOGIC;
    signal as_hashes_we0 : STD_LOGIC;
    signal as_hashes_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seeds_seed_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal seeds_seed_ce0 : STD_LOGIC;
    signal seeds_seed_we0 : STD_LOGIC;
    signal seeds_seed_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tape_tape_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tape_tape_ce0 : STD_LOGIC;
    signal tape_tape_we0 : STD_LOGIC;
    signal tape_tape_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tape_tape_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tape_tape_ce1 : STD_LOGIC;
    signal tape_tape_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_0_ce0 : STD_LOGIC;
    signal tmp_0_we0 : STD_LOGIC;
    signal tmp_0_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_0_ce1 : STD_LOGIC;
    signal tmp_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_ce0 : STD_LOGIC;
    signal tmp_1_we0 : STD_LOGIC;
    signal tmp_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_ce0 : STD_LOGIC;
    signal tmp_2_we0 : STD_LOGIC;
    signal tmp_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_ce0 : STD_LOGIC;
    signal tmp_3_we0 : STD_LOGIC;
    signal tmp_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal slab_assign_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal slab_assign_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_ce0 : STD_LOGIC;
    signal output_we0 : STD_LOGIC;
    signal output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_computeSeeds_2_fu_635_ap_start : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_ap_done : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_ap_idle : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_ap_ready : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_allSeeds_seed_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_computeSeeds_2_fu_635_allSeeds_seed_ce0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_allSeeds_seed_we0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_allSeeds_seed_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeSeeds_2_fu_635_salt_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_computeSeeds_2_fu_635_salt_0_ce0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_salt_0_we0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_salt_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_computeSeeds_2_fu_635_privateKey_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeSeeds_2_fu_635_privateKey_ce0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_publicKey_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeSeeds_2_fu_635_publicKey_ce0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_computeSeeds_2_fu_635_plaintext_ce0 : STD_LOGIC;
    signal grp_computeSeeds_2_fu_635_message_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_computeSeeds_2_fu_635_message_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_ap_start : STD_LOGIC;
    signal grp_createRandomTape_fu_657_ap_idle : STD_LOGIC;
    signal grp_createRandomTape_fu_657_seed_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_createRandomTape_fu_657_seed_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_salt_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_createRandomTape_fu_657_salt_0_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_createRandomTape_fu_657_tape_0_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_0_we0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_createRandomTape_fu_657_tape_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_createRandomTape_fu_657_tape_1_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_1_we0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_createRandomTape_fu_657_tape_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_createRandomTape_fu_657_tape_2_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_2_we0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_createRandomTape_fu_657_tape_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_createRandomTape_fu_657_tape_3_ce0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_3_we0 : STD_LOGIC;
    signal grp_createRandomTape_fu_657_tape_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_H3_2_fu_680_ap_start : STD_LOGIC;
    signal grp_H3_2_fu_680_ap_done : STD_LOGIC;
    signal grp_H3_2_fu_680_ap_idle : STD_LOGIC;
    signal grp_H3_2_fu_680_ap_ready : STD_LOGIC;
    signal grp_H3_2_fu_680_circuitOutput_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_H3_2_fu_680_circuitOutput_ce0 : STD_LOGIC;
    signal grp_H3_2_fu_680_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_H3_2_fu_680_plaintext_ce0 : STD_LOGIC;
    signal grp_H3_2_fu_680_as_hashes_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_H3_2_fu_680_as_hashes_ce0 : STD_LOGIC;
    signal grp_H3_2_fu_680_challengeBits_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_H3_2_fu_680_challengeBits_0_ce0 : STD_LOGIC;
    signal grp_H3_2_fu_680_challengeBits_0_we0 : STD_LOGIC;
    signal grp_H3_2_fu_680_challengeBits_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_H3_2_fu_680_salt_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_H3_2_fu_680_salt_0_ce0 : STD_LOGIC;
    signal grp_H3_2_fu_680_message_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_H3_2_fu_680_message_ce0 : STD_LOGIC;
    signal grp_H3_2_fu_680_viewOutputs_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_H3_2_fu_680_viewOutputs_ce0 : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_ap_start : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_ap_done : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_ap_idle : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_ap_ready : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_seed_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_createRandomTape_1_fu_701_seed_ce0 : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_salt_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_createRandomTape_1_fu_701_salt_0_ce0 : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_tape_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_createRandomTape_1_fu_701_tape_ce0 : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_tape_we0 : STD_LOGIC;
    signal grp_createRandomTape_1_fu_701_tape_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Commit_2_fu_717_ap_start : STD_LOGIC;
    signal grp_Commit_2_fu_717_ap_done : STD_LOGIC;
    signal grp_Commit_2_fu_717_ap_idle : STD_LOGIC;
    signal grp_Commit_2_fu_717_ap_ready : STD_LOGIC;
    signal grp_Commit_2_fu_717_seed_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_Commit_2_fu_717_seed_ce0 : STD_LOGIC;
    signal grp_Commit_2_fu_717_seed_offset1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Commit_2_fu_717_view_inputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Commit_2_fu_717_view_inputShare_ce0 : STD_LOGIC;
    signal grp_Commit_2_fu_717_view_inputShare_offset3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Commit_2_fu_717_view_communicatedBits_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Commit_2_fu_717_view_communicatedBits_ce0 : STD_LOGIC;
    signal grp_Commit_2_fu_717_view_communicatedBits_offset4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Commit_2_fu_717_view_outputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Commit_2_fu_717_view_outputShare_ce0 : STD_LOGIC;
    signal grp_Commit_2_fu_717_view_outputShare_offset5 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Commit_2_fu_717_hash_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_Commit_2_fu_717_hash_ce0 : STD_LOGIC;
    signal grp_Commit_2_fu_717_hash_we0 : STD_LOGIC;
    signal grp_Commit_2_fu_717_hash_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Commit_2_fu_717_hash_offset6 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mpc_LowMC_2_fu_760_ap_start : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_ap_done : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_ap_idle : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_ap_ready : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_tapes_tape_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_mpc_LowMC_2_fu_760_tapes_tape_ce0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_tapes_tape_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_mpc_LowMC_2_fu_760_tapes_tape_ce1 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_views_inputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_mpc_LowMC_2_fu_760_views_inputShare_ce0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_views_communicatedBi_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mpc_LowMC_2_fu_760_views_communicatedBi_ce0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_views_communicatedBi_we0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_views_communicatedBi_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mpc_LowMC_2_fu_760_views_outputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_mpc_LowMC_2_fu_760_views_outputShare_ce0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_views_outputShare_we0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_views_outputShare_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mpc_LowMC_2_fu_760_plaintext_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mpc_LowMC_2_fu_760_plaintext_ce0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_slab_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mpc_LowMC_2_fu_760_slab_ce0 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_slab_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mpc_LowMC_2_fu_760_slab_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mpc_LowMC_2_fu_760_slab_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_mpc_LowMC_2_fu_760_slab_ce1 : STD_LOGIC;
    signal grp_mpc_LowMC_2_fu_760_slab_we1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mpc_LowMC_2_fu_760_slab_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_prove_25_fu_779_ap_start : STD_LOGIC;
    signal grp_prove_25_fu_779_ap_done : STD_LOGIC;
    signal grp_prove_25_fu_779_ap_idle : STD_LOGIC;
    signal grp_prove_25_fu_779_ap_ready : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_seed1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_prove_25_fu_779_proof_0_seed1_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_seed1_we0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_seed1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_prove_25_fu_779_proof_0_seed2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_prove_25_fu_779_proof_0_seed2_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_seed2_we0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_seed2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_prove_25_fu_779_proof_0_inputShare_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_prove_25_fu_779_proof_0_inputShare_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_inputShare_we0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_inputShare_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_prove_25_fu_779_proof_0_communicatedBits_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_prove_25_fu_779_proof_0_communicatedBits_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_communicatedBits_we0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_communicatedBits_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_prove_25_fu_779_proof_0_view3Commitment_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_prove_25_fu_779_proof_0_view3Commitment_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_view3Commitment_we0 : STD_LOGIC;
    signal grp_prove_25_fu_779_proof_0_view3Commitment_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_prove_25_fu_779_seeds_seed_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_prove_25_fu_779_seeds_seed_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_views_inputShare_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_prove_25_fu_779_views_inputShare_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_views_communicatedBits_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_prove_25_fu_779_views_communicatedBits_ce0 : STD_LOGIC;
    signal grp_prove_25_fu_779_commitments_hashes_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_prove_25_fu_779_commitments_hashes_ce0 : STD_LOGIC;
    signal k_0_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal j_0_reg_497 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal phi_mul_reg_509 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_loop_0_phi_fu_525_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_loop_1_phi_fu_537_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal j_1_reg_545 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_phi_mux_i_0_phi_fu_571_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j1_0_phi_fu_593_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_611 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal round_assign_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_computeSeeds_2_fu_635_ap_start_reg : STD_LOGIC := '0';
    signal grp_createRandomTape_fu_657_ap_start_reg : STD_LOGIC := '0';
    signal grp_H3_2_fu_680_ap_start_reg : STD_LOGIC := '0';
    signal grp_createRandomTape_1_fu_701_ap_start_reg : STD_LOGIC := '0';
    signal grp_Commit_2_fu_717_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_mpc_LowMC_2_fu_760_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_prove_25_fu_779_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln1772_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1772_1_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1772_2_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1772_3_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1772_1_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1775_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1775_4_fu_1071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1786_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1786_1_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1786_fu_1087_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1786_2_fu_1121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1811_6_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1811_fu_1391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1413_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_1422_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_1465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_1056_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_816_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1772_6_fu_828_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1772_4_fu_812_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1772_fu_832_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_842_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1786_1_fu_850_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1772_5_fu_824_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1772_7_fu_892_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln1772_fu_918_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1772_1_fu_939_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln1772_2_fu_949_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_976_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1775_fu_1009_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1775_fu_1009_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1025_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1775_3_fu_1039_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1775_fu_1049_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_1056_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1786_2_fu_1092_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_2_fu_1096_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1786_3_fu_1106_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln1786_fu_1125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_1142_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1811_fu_1150_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1808_fu_1138_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1811_fu_1154_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1809_fu_1160_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1809_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln1811_mid1_fu_1214_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1811_3_fu_1222_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1808_1_fu_1210_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1811_2_fu_1226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1810_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1808_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1808_fu_1194_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln1808_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1809_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_1258_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1808_2_fu_1232_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1809_1_fu_1278_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1811_fu_1164_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1811_2_fu_1290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1808_3_fu_1296_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1809_1_fu_1318_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1335_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1811_2_fu_1342_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1811_1_fu_1332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1811_1_fu_1346_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1811_4_fu_1352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1811_1_fu_1355_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_cast_fu_1361_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1811_5_fu_1369_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1811_3_fu_1372_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_fu_1383_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln1817_fu_1431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_1455_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln386_fu_1470_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitNumber_assign_fu_1474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_fu_1482_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_1_fu_1488_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_fu_1492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_1_fu_1502_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_2_fu_1508_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_1_fu_1512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_1_fu_1498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_fu_1518_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln1775_fu_1009_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component computeSeeds_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        allSeeds_seed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        allSeeds_seed_ce0 : OUT STD_LOGIC;
        allSeeds_seed_we0 : OUT STD_LOGIC;
        allSeeds_seed_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        salt_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        salt_0_ce0 : OUT STD_LOGIC;
        salt_0_we0 : OUT STD_LOGIC;
        salt_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        privateKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        privateKey_ce0 : OUT STD_LOGIC;
        privateKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        publicKey_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        publicKey_ce0 : OUT STD_LOGIC;
        publicKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        messageByteLength : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component createRandomTape IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        seed_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        seed_offset1 : IN STD_LOGIC_VECTOR (1 downto 0);
        salt_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        salt_0_ce0 : OUT STD_LOGIC;
        salt_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        roundNumber : IN STD_LOGIC_VECTOR (7 downto 0);
        playerNumber : IN STD_LOGIC_VECTOR (1 downto 0);
        tape_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tape_0_ce0 : OUT STD_LOGIC;
        tape_0_we0 : OUT STD_LOGIC;
        tape_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tape_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tape_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tape_1_ce0 : OUT STD_LOGIC;
        tape_1_we0 : OUT STD_LOGIC;
        tape_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tape_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tape_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tape_2_ce0 : OUT STD_LOGIC;
        tape_2_we0 : OUT STD_LOGIC;
        tape_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tape_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tape_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tape_3_ce0 : OUT STD_LOGIC;
        tape_3_we0 : OUT STD_LOGIC;
        tape_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tape_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component H3_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        circuitOutput_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        circuitOutput_ce0 : OUT STD_LOGIC;
        circuitOutput_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        as_hashes_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        as_hashes_ce0 : OUT STD_LOGIC;
        as_hashes_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        challengeBits_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        challengeBits_0_ce0 : OUT STD_LOGIC;
        challengeBits_0_we0 : OUT STD_LOGIC;
        challengeBits_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        challengeBits_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        salt_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        salt_0_ce0 : OUT STD_LOGIC;
        salt_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        message_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        message_ce0 : OUT STD_LOGIC;
        message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        messageByteLength : IN STD_LOGIC_VECTOR (63 downto 0);
        viewOutputs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        viewOutputs_ce0 : OUT STD_LOGIC;
        viewOutputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component createRandomTape_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        seed_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        salt_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        salt_0_ce0 : OUT STD_LOGIC;
        salt_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        roundNumber : IN STD_LOGIC_VECTOR (7 downto 0);
        tape_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        tape_ce0 : OUT STD_LOGIC;
        tape_we0 : OUT STD_LOGIC;
        tape_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tape_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Commit_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        seed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        seed_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        seed_offset1 : IN STD_LOGIC_VECTOR (2 downto 0);
        view_inputShare_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        view_inputShare_ce0 : OUT STD_LOGIC;
        view_inputShare_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        view_inputShare_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        view_inputShare_offset3 : IN STD_LOGIC_VECTOR (2 downto 0);
        view_communicatedBits_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        view_communicatedBits_ce0 : OUT STD_LOGIC;
        view_communicatedBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        view_communicatedBits_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        view_communicatedBits_offset4 : IN STD_LOGIC_VECTOR (2 downto 0);
        view_outputShare_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        view_outputShare_ce0 : OUT STD_LOGIC;
        view_outputShare_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        view_outputShare_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        view_outputShare_offset5 : IN STD_LOGIC_VECTOR (2 downto 0);
        hash_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        hash_ce0 : OUT STD_LOGIC;
        hash_we0 : OUT STD_LOGIC;
        hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        hash_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        hash_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        hash_offset6 : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component mpc_LowMC_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tapes_tape_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        tapes_tape_ce0 : OUT STD_LOGIC;
        tapes_tape_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        tapes_tape_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        tapes_tape_ce1 : OUT STD_LOGIC;
        tapes_tape_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        views_inputShare_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        views_inputShare_ce0 : OUT STD_LOGIC;
        views_inputShare_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        views_inputShare_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        views_communicatedBi_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        views_communicatedBi_ce0 : OUT STD_LOGIC;
        views_communicatedBi_we0 : OUT STD_LOGIC;
        views_communicatedBi_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        views_communicatedBi_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        views_outputShare_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        views_outputShare_ce0 : OUT STD_LOGIC;
        views_outputShare_we0 : OUT STD_LOGIC;
        views_outputShare_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        plaintext_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        plaintext_ce0 : OUT STD_LOGIC;
        plaintext_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        slab_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        slab_ce0 : OUT STD_LOGIC;
        slab_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        slab_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        slab_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        slab_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        slab_ce1 : OUT STD_LOGIC;
        slab_we1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        slab_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        slab_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component prove_25 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        proof_0_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        proof_0_seed1_ce0 : OUT STD_LOGIC;
        proof_0_seed1_we0 : OUT STD_LOGIC;
        proof_0_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        proof_seed1_offset1 : IN STD_LOGIC_VECTOR (7 downto 0);
        proof_0_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        proof_0_seed2_ce0 : OUT STD_LOGIC;
        proof_0_seed2_we0 : OUT STD_LOGIC;
        proof_0_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        proof_0_inputShare_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        proof_0_inputShare_ce0 : OUT STD_LOGIC;
        proof_0_inputShare_we0 : OUT STD_LOGIC;
        proof_0_inputShare_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        proof_0_communicatedBits_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        proof_0_communicatedBits_ce0 : OUT STD_LOGIC;
        proof_0_communicatedBits_we0 : OUT STD_LOGIC;
        proof_0_communicatedBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        proof_0_view3Commitment_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        proof_0_view3Commitment_ce0 : OUT STD_LOGIC;
        proof_0_view3Commitment_we0 : OUT STD_LOGIC;
        proof_0_view3Commitment_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        challenge : IN STD_LOGIC_VECTOR (1 downto 0);
        seeds_seed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        seeds_seed_ce0 : OUT STD_LOGIC;
        seeds_seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        views_inputShare_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        views_inputShare_ce0 : OUT STD_LOGIC;
        views_inputShare_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        views_communicatedBits_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        views_communicatedBits_ce0 : OUT STD_LOGIC;
        views_communicatedBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        commitments_hashes_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        commitments_hashes_ce0 : OUT STD_LOGIC;
        commitments_hashes_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_urem_bAo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component crypto_sign_mux_4bBo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_viewbtn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sign_picnic1_viewbun IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_viewbvn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sign_picnic1_as_hbwn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_seedbxn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_tapebyn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_tmp_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_tmp_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sign_picnic1_slabbzo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (3 downto 0);
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_prod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    views_inputShare_U : component sign_picnic1_viewbtn
    generic map (
        DataWidth => 32,
        AddressRange => 2628,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => views_inputShare_address0,
        ce0 => views_inputShare_ce0,
        we0 => views_inputShare_we0,
        d0 => views_inputShare_d0,
        q0 => views_inputShare_q0,
        address1 => views_inputShare_address1,
        ce1 => views_inputShare_ce1,
        we1 => views_inputShare_we1,
        d1 => views_inputShare_d1,
        q1 => views_inputShare_q1);

    views_communicatedBi_U : component sign_picnic1_viewbun
    generic map (
        DataWidth => 8,
        AddressRange => 49275,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => views_communicatedBi_address0,
        ce0 => views_communicatedBi_ce0,
        we0 => views_communicatedBi_we0,
        d0 => grp_mpc_LowMC_2_fu_760_views_communicatedBi_d0,
        q0 => views_communicatedBi_q0);

    views_outputShare_U : component sign_picnic1_viewbvn
    generic map (
        DataWidth => 32,
        AddressRange => 2628,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => views_outputShare_address0,
        ce0 => views_outputShare_ce0,
        we0 => views_outputShare_we0,
        d0 => grp_mpc_LowMC_2_fu_760_views_outputShare_d0,
        q0 => views_outputShare_q0);

    as_hashes_U : component sign_picnic1_as_hbwn
    generic map (
        DataWidth => 8,
        AddressRange => 21024,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => as_hashes_address0,
        ce0 => as_hashes_ce0,
        we0 => as_hashes_we0,
        d0 => grp_Commit_2_fu_717_hash_d0,
        q0 => as_hashes_q0);

    seeds_seed_U : component sign_picnic1_seedbxn
    generic map (
        DataWidth => 8,
        AddressRange => 10512,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seeds_seed_address0,
        ce0 => seeds_seed_ce0,
        we0 => seeds_seed_we0,
        d0 => grp_computeSeeds_2_fu_635_allSeeds_seed_d0,
        q0 => seeds_seed_q0);

    tape_tape_U : component sign_picnic1_tapebyn
    generic map (
        DataWidth => 8,
        AddressRange => 498,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tape_tape_address0,
        ce0 => tape_tape_ce0,
        we0 => tape_tape_we0,
        d0 => tape_tape_d0,
        q0 => tape_tape_q0,
        address1 => grp_mpc_LowMC_2_fu_760_tapes_tape_address1,
        ce1 => tape_tape_ce1,
        q1 => tape_tape_q1);

    tmp_0_U : component sign_picnic1_tmp_0
    generic map (
        DataWidth => 8,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_0_address0,
        ce0 => tmp_0_ce0,
        we0 => tmp_0_we0,
        d0 => grp_createRandomTape_fu_657_tape_0_d0,
        q0 => tmp_0_q0,
        address1 => tmp_0_address1,
        ce1 => tmp_0_ce1,
        q1 => tmp_0_q1);

    tmp_1_U : component sign_picnic1_tmp_1
    generic map (
        DataWidth => 8,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_1_address0,
        ce0 => tmp_1_ce0,
        we0 => tmp_1_we0,
        d0 => grp_createRandomTape_fu_657_tape_1_d0,
        q0 => tmp_1_q0);

    tmp_2_U : component sign_picnic1_tmp_1
    generic map (
        DataWidth => 8,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_2_address0,
        ce0 => tmp_2_ce0,
        we0 => tmp_2_we0,
        d0 => grp_createRandomTape_fu_657_tape_2_d0,
        q0 => tmp_2_q0);

    tmp_3_U : component sign_picnic1_tmp_1
    generic map (
        DataWidth => 8,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_3_address0,
        ce0 => tmp_3_ce0,
        we0 => tmp_3_we0,
        d0 => grp_createRandomTape_fu_657_tape_3_d0,
        q0 => tmp_3_q0);

    slab_assign_U : component sign_picnic1_slabbzo
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_mpc_LowMC_2_fu_760_slab_address0,
        ce0 => grp_mpc_LowMC_2_fu_760_slab_ce0,
        we0 => grp_mpc_LowMC_2_fu_760_slab_we0,
        d0 => grp_mpc_LowMC_2_fu_760_slab_d0,
        q0 => slab_assign_q0,
        address1 => grp_mpc_LowMC_2_fu_760_slab_address1,
        ce1 => grp_mpc_LowMC_2_fu_760_slab_ce1,
        we1 => grp_mpc_LowMC_2_fu_760_slab_we1,
        d1 => grp_mpc_LowMC_2_fu_760_slab_d1,
        q1 => slab_assign_q1);

    output_U : component matrix_mul_prod
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_address0,
        ce0 => output_ce0,
        we0 => output_we0,
        d0 => output_d0,
        q0 => output_q0);

    grp_computeSeeds_2_fu_635 : component computeSeeds_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_computeSeeds_2_fu_635_ap_start,
        ap_done => grp_computeSeeds_2_fu_635_ap_done,
        ap_idle => grp_computeSeeds_2_fu_635_ap_idle,
        ap_ready => grp_computeSeeds_2_fu_635_ap_ready,
        allSeeds_seed_address0 => grp_computeSeeds_2_fu_635_allSeeds_seed_address0,
        allSeeds_seed_ce0 => grp_computeSeeds_2_fu_635_allSeeds_seed_ce0,
        allSeeds_seed_we0 => grp_computeSeeds_2_fu_635_allSeeds_seed_we0,
        allSeeds_seed_d0 => grp_computeSeeds_2_fu_635_allSeeds_seed_d0,
        salt_0_address0 => grp_computeSeeds_2_fu_635_salt_0_address0,
        salt_0_ce0 => grp_computeSeeds_2_fu_635_salt_0_ce0,
        salt_0_we0 => grp_computeSeeds_2_fu_635_salt_0_we0,
        salt_0_d0 => grp_computeSeeds_2_fu_635_salt_0_d0,
        privateKey_address0 => grp_computeSeeds_2_fu_635_privateKey_address0,
        privateKey_ce0 => grp_computeSeeds_2_fu_635_privateKey_ce0,
        privateKey_q0 => privateKey_q0,
        publicKey_address0 => grp_computeSeeds_2_fu_635_publicKey_address0,
        publicKey_ce0 => grp_computeSeeds_2_fu_635_publicKey_ce0,
        publicKey_q0 => pubKey_q0,
        plaintext_address0 => grp_computeSeeds_2_fu_635_plaintext_address0,
        plaintext_ce0 => grp_computeSeeds_2_fu_635_plaintext_ce0,
        plaintext_q0 => plaintext_q0,
        message_address0 => grp_computeSeeds_2_fu_635_message_address0,
        message_ce0 => grp_computeSeeds_2_fu_635_message_ce0,
        message_q0 => message_q0,
        messageByteLength => messageByteLength);

    grp_createRandomTape_fu_657 : component createRandomTape
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_createRandomTape_fu_657_ap_start,
        ap_done => grp_createRandomTape_fu_657_ap_done,
        ap_idle => grp_createRandomTape_fu_657_ap_idle,
        ap_ready => grp_createRandomTape_fu_657_ap_ready,
        seed_address0 => grp_createRandomTape_fu_657_seed_address0,
        seed_ce0 => grp_createRandomTape_fu_657_seed_ce0,
        seed_q0 => seeds_seed_q0,
        seed_offset => k_0_reg_485,
        seed_offset1 => j_0_reg_497,
        salt_0_address0 => grp_createRandomTape_fu_657_salt_0_address0,
        salt_0_ce0 => grp_createRandomTape_fu_657_salt_0_ce0,
        salt_0_q0 => sig_0_salt_q0,
        roundNumber => k_0_reg_485,
        playerNumber => j_0_reg_497,
        tape_0_address0 => grp_createRandomTape_fu_657_tape_0_address0,
        tape_0_ce0 => grp_createRandomTape_fu_657_tape_0_ce0,
        tape_0_we0 => grp_createRandomTape_fu_657_tape_0_we0,
        tape_0_d0 => grp_createRandomTape_fu_657_tape_0_d0,
        tape_0_q0 => tmp_0_q0,
        tape_1_address0 => grp_createRandomTape_fu_657_tape_1_address0,
        tape_1_ce0 => grp_createRandomTape_fu_657_tape_1_ce0,
        tape_1_we0 => grp_createRandomTape_fu_657_tape_1_we0,
        tape_1_d0 => grp_createRandomTape_fu_657_tape_1_d0,
        tape_1_q0 => tmp_1_q0,
        tape_2_address0 => grp_createRandomTape_fu_657_tape_2_address0,
        tape_2_ce0 => grp_createRandomTape_fu_657_tape_2_ce0,
        tape_2_we0 => grp_createRandomTape_fu_657_tape_2_we0,
        tape_2_d0 => grp_createRandomTape_fu_657_tape_2_d0,
        tape_2_q0 => tmp_2_q0,
        tape_3_address0 => grp_createRandomTape_fu_657_tape_3_address0,
        tape_3_ce0 => grp_createRandomTape_fu_657_tape_3_ce0,
        tape_3_we0 => grp_createRandomTape_fu_657_tape_3_we0,
        tape_3_d0 => grp_createRandomTape_fu_657_tape_3_d0,
        tape_3_q0 => tmp_3_q0);

    grp_H3_2_fu_680 : component H3_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_H3_2_fu_680_ap_start,
        ap_done => grp_H3_2_fu_680_ap_done,
        ap_idle => grp_H3_2_fu_680_ap_idle,
        ap_ready => grp_H3_2_fu_680_ap_ready,
        circuitOutput_address0 => grp_H3_2_fu_680_circuitOutput_address0,
        circuitOutput_ce0 => grp_H3_2_fu_680_circuitOutput_ce0,
        circuitOutput_q0 => output_q0,
        plaintext_address0 => grp_H3_2_fu_680_plaintext_address0,
        plaintext_ce0 => grp_H3_2_fu_680_plaintext_ce0,
        plaintext_q0 => plaintext_q0,
        as_hashes_address0 => grp_H3_2_fu_680_as_hashes_address0,
        as_hashes_ce0 => grp_H3_2_fu_680_as_hashes_ce0,
        as_hashes_q0 => as_hashes_q0,
        challengeBits_0_address0 => grp_H3_2_fu_680_challengeBits_0_address0,
        challengeBits_0_ce0 => grp_H3_2_fu_680_challengeBits_0_ce0,
        challengeBits_0_we0 => grp_H3_2_fu_680_challengeBits_0_we0,
        challengeBits_0_d0 => grp_H3_2_fu_680_challengeBits_0_d0,
        challengeBits_0_q0 => sig_0_challengeBits_q0,
        salt_0_address0 => grp_H3_2_fu_680_salt_0_address0,
        salt_0_ce0 => grp_H3_2_fu_680_salt_0_ce0,
        salt_0_q0 => sig_0_salt_q0,
        message_address0 => grp_H3_2_fu_680_message_address0,
        message_ce0 => grp_H3_2_fu_680_message_ce0,
        message_q0 => message_q0,
        messageByteLength => messageByteLength,
        viewOutputs_address0 => grp_H3_2_fu_680_viewOutputs_address0,
        viewOutputs_ce0 => grp_H3_2_fu_680_viewOutputs_ce0,
        viewOutputs_q0 => viewOutputs_q0);

    grp_createRandomTape_1_fu_701 : component createRandomTape_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_createRandomTape_1_fu_701_ap_start,
        ap_done => grp_createRandomTape_1_fu_701_ap_done,
        ap_idle => grp_createRandomTape_1_fu_701_ap_idle,
        ap_ready => grp_createRandomTape_1_fu_701_ap_ready,
        seed_address0 => grp_createRandomTape_1_fu_701_seed_address0,
        seed_ce0 => grp_createRandomTape_1_fu_701_seed_ce0,
        seed_q0 => seeds_seed_q0,
        seed_offset => k_0_reg_485,
        salt_0_address0 => grp_createRandomTape_1_fu_701_salt_0_address0,
        salt_0_ce0 => grp_createRandomTape_1_fu_701_salt_0_ce0,
        salt_0_q0 => sig_0_salt_q0,
        roundNumber => k_0_reg_485,
        tape_address0 => grp_createRandomTape_1_fu_701_tape_address0,
        tape_ce0 => grp_createRandomTape_1_fu_701_tape_ce0,
        tape_we0 => grp_createRandomTape_1_fu_701_tape_we0,
        tape_d0 => grp_createRandomTape_1_fu_701_tape_d0,
        tape_q0 => tape_tape_q0);

    grp_Commit_2_fu_717 : component Commit_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Commit_2_fu_717_ap_start,
        ap_done => grp_Commit_2_fu_717_ap_done,
        ap_idle => grp_Commit_2_fu_717_ap_idle,
        ap_ready => grp_Commit_2_fu_717_ap_ready,
        seed_address0 => grp_Commit_2_fu_717_seed_address0,
        seed_ce0 => grp_Commit_2_fu_717_seed_ce0,
        seed_q0 => seeds_seed_q0,
        seed_offset => k_0_reg_485,
        seed_offset1 => grp_Commit_2_fu_717_seed_offset1,
        view_inputShare_address0 => grp_Commit_2_fu_717_view_inputShare_address0,
        view_inputShare_ce0 => grp_Commit_2_fu_717_view_inputShare_ce0,
        view_inputShare_q0 => views_inputShare_q0,
        view_inputShare_offset => k_0_reg_485,
        view_inputShare_offset3 => grp_Commit_2_fu_717_view_inputShare_offset3,
        view_communicatedBits_address0 => grp_Commit_2_fu_717_view_communicatedBits_address0,
        view_communicatedBits_ce0 => grp_Commit_2_fu_717_view_communicatedBits_ce0,
        view_communicatedBits_q0 => views_communicatedBi_q0,
        view_communicatedBits_offset => k_0_reg_485,
        view_communicatedBits_offset4 => grp_Commit_2_fu_717_view_communicatedBits_offset4,
        view_outputShare_address0 => grp_Commit_2_fu_717_view_outputShare_address0,
        view_outputShare_ce0 => grp_Commit_2_fu_717_view_outputShare_ce0,
        view_outputShare_q0 => views_outputShare_q0,
        view_outputShare_offset => k_0_reg_485,
        view_outputShare_offset5 => grp_Commit_2_fu_717_view_outputShare_offset5,
        hash_address0 => grp_Commit_2_fu_717_hash_address0,
        hash_ce0 => grp_Commit_2_fu_717_hash_ce0,
        hash_we0 => grp_Commit_2_fu_717_hash_we0,
        hash_d0 => grp_Commit_2_fu_717_hash_d0,
        hash_q0 => as_hashes_q0,
        hash_offset => k_0_reg_485,
        hash_offset6 => grp_Commit_2_fu_717_hash_offset6);

    grp_mpc_LowMC_2_fu_760 : component mpc_LowMC_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mpc_LowMC_2_fu_760_ap_start,
        ap_done => grp_mpc_LowMC_2_fu_760_ap_done,
        ap_idle => grp_mpc_LowMC_2_fu_760_ap_idle,
        ap_ready => grp_mpc_LowMC_2_fu_760_ap_ready,
        tapes_tape_address0 => grp_mpc_LowMC_2_fu_760_tapes_tape_address0,
        tapes_tape_ce0 => grp_mpc_LowMC_2_fu_760_tapes_tape_ce0,
        tapes_tape_q0 => tape_tape_q0,
        tapes_tape_address1 => grp_mpc_LowMC_2_fu_760_tapes_tape_address1,
        tapes_tape_ce1 => grp_mpc_LowMC_2_fu_760_tapes_tape_ce1,
        tapes_tape_q1 => tape_tape_q1,
        views_inputShare_address0 => grp_mpc_LowMC_2_fu_760_views_inputShare_address0,
        views_inputShare_ce0 => grp_mpc_LowMC_2_fu_760_views_inputShare_ce0,
        views_inputShare_q0 => views_inputShare_q0,
        views_inputShare_offset => k_0_reg_485,
        views_communicatedBi_address0 => grp_mpc_LowMC_2_fu_760_views_communicatedBi_address0,
        views_communicatedBi_ce0 => grp_mpc_LowMC_2_fu_760_views_communicatedBi_ce0,
        views_communicatedBi_we0 => grp_mpc_LowMC_2_fu_760_views_communicatedBi_we0,
        views_communicatedBi_d0 => grp_mpc_LowMC_2_fu_760_views_communicatedBi_d0,
        views_communicatedBi_q0 => views_communicatedBi_q0,
        views_outputShare_address0 => grp_mpc_LowMC_2_fu_760_views_outputShare_address0,
        views_outputShare_ce0 => grp_mpc_LowMC_2_fu_760_views_outputShare_ce0,
        views_outputShare_we0 => grp_mpc_LowMC_2_fu_760_views_outputShare_we0,
        views_outputShare_d0 => grp_mpc_LowMC_2_fu_760_views_outputShare_d0,
        plaintext_address0 => grp_mpc_LowMC_2_fu_760_plaintext_address0,
        plaintext_ce0 => grp_mpc_LowMC_2_fu_760_plaintext_ce0,
        plaintext_q0 => plaintext_q0,
        slab_address0 => grp_mpc_LowMC_2_fu_760_slab_address0,
        slab_ce0 => grp_mpc_LowMC_2_fu_760_slab_ce0,
        slab_we0 => grp_mpc_LowMC_2_fu_760_slab_we0,
        slab_d0 => grp_mpc_LowMC_2_fu_760_slab_d0,
        slab_q0 => slab_assign_q0,
        slab_address1 => grp_mpc_LowMC_2_fu_760_slab_address1,
        slab_ce1 => grp_mpc_LowMC_2_fu_760_slab_ce1,
        slab_we1 => grp_mpc_LowMC_2_fu_760_slab_we1,
        slab_d1 => grp_mpc_LowMC_2_fu_760_slab_d1,
        slab_q1 => slab_assign_q1);

    grp_prove_25_fu_779 : component prove_25
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_prove_25_fu_779_ap_start,
        ap_done => grp_prove_25_fu_779_ap_done,
        ap_idle => grp_prove_25_fu_779_ap_idle,
        ap_ready => grp_prove_25_fu_779_ap_ready,
        proof_0_seed1_address0 => grp_prove_25_fu_779_proof_0_seed1_address0,
        proof_0_seed1_ce0 => grp_prove_25_fu_779_proof_0_seed1_ce0,
        proof_0_seed1_we0 => grp_prove_25_fu_779_proof_0_seed1_we0,
        proof_0_seed1_d0 => grp_prove_25_fu_779_proof_0_seed1_d0,
        proof_seed1_offset1 => round_assign_reg_623,
        proof_0_seed2_address0 => grp_prove_25_fu_779_proof_0_seed2_address0,
        proof_0_seed2_ce0 => grp_prove_25_fu_779_proof_0_seed2_ce0,
        proof_0_seed2_we0 => grp_prove_25_fu_779_proof_0_seed2_we0,
        proof_0_seed2_d0 => grp_prove_25_fu_779_proof_0_seed2_d0,
        proof_0_inputShare_address0 => grp_prove_25_fu_779_proof_0_inputShare_address0,
        proof_0_inputShare_ce0 => grp_prove_25_fu_779_proof_0_inputShare_ce0,
        proof_0_inputShare_we0 => grp_prove_25_fu_779_proof_0_inputShare_we0,
        proof_0_inputShare_d0 => grp_prove_25_fu_779_proof_0_inputShare_d0,
        proof_0_communicatedBits_address0 => grp_prove_25_fu_779_proof_0_communicatedBits_address0,
        proof_0_communicatedBits_ce0 => grp_prove_25_fu_779_proof_0_communicatedBits_ce0,
        proof_0_communicatedBits_we0 => grp_prove_25_fu_779_proof_0_communicatedBits_we0,
        proof_0_communicatedBits_d0 => grp_prove_25_fu_779_proof_0_communicatedBits_d0,
        proof_0_view3Commitment_address0 => grp_prove_25_fu_779_proof_0_view3Commitment_address0,
        proof_0_view3Commitment_ce0 => grp_prove_25_fu_779_proof_0_view3Commitment_ce0,
        proof_0_view3Commitment_we0 => grp_prove_25_fu_779_proof_0_view3Commitment_we0,
        proof_0_view3Commitment_d0 => grp_prove_25_fu_779_proof_0_view3Commitment_d0,
        challenge => or_ln_reg_1800,
        seeds_seed_address0 => grp_prove_25_fu_779_seeds_seed_address0,
        seeds_seed_ce0 => grp_prove_25_fu_779_seeds_seed_ce0,
        seeds_seed_q0 => seeds_seed_q0,
        views_inputShare_address0 => grp_prove_25_fu_779_views_inputShare_address0,
        views_inputShare_ce0 => grp_prove_25_fu_779_views_inputShare_ce0,
        views_inputShare_q0 => views_inputShare_q0,
        views_communicatedBits_address0 => grp_prove_25_fu_779_views_communicatedBits_address0,
        views_communicatedBits_ce0 => grp_prove_25_fu_779_views_communicatedBits_ce0,
        views_communicatedBits_q0 => views_communicatedBi_q0,
        commitments_hashes_address0 => grp_prove_25_fu_779_commitments_hashes_address0,
        commitments_hashes_ce0 => grp_prove_25_fu_779_commitments_hashes_ce0,
        commitments_hashes_q0 => as_hashes_q0);

    crypto_sign_urem_bAo_U186 : component crypto_sign_urem_bAo
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln1775_fu_999_p2,
        din1 => ap_const_lv7_24,
        ce => ap_const_logic_1,
        dout => grp_fu_1025_p2);

    crypto_sign_mux_4bBo_U187 : component crypto_sign_mux_4bBo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_0_q0,
        din1 => tmp_1_q0,
        din2 => tmp_2_q0,
        din3 => tmp_3_q0,
        din4 => tmp_4_fu_1056_p5,
        dout => tmp_4_fu_1056_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_createRandomTape_fu_657_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_createRandomTape_fu_657_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state33)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Commit_2_fu_717_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Commit_2_fu_717_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    grp_Commit_2_fu_717_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Commit_2_fu_717_ap_ready = ap_const_logic_1)) then 
                    grp_Commit_2_fu_717_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_H3_2_fu_680_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_H3_2_fu_680_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln1816_fu_1396_p2 = ap_const_lv1_1))) then 
                    grp_H3_2_fu_680_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_H3_2_fu_680_ap_ready = ap_const_logic_1)) then 
                    grp_H3_2_fu_680_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_computeSeeds_2_fu_635_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_computeSeeds_2_fu_635_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_computeSeeds_2_fu_635_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_computeSeeds_2_fu_635_ap_ready = ap_const_logic_1)) then 
                    grp_computeSeeds_2_fu_635_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_createRandomTape_1_fu_701_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_createRandomTape_1_fu_701_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_878_p3 = ap_const_lv1_1))) then 
                    grp_createRandomTape_1_fu_701_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_createRandomTape_1_fu_701_ap_ready = ap_const_logic_1)) then 
                    grp_createRandomTape_1_fu_701_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_createRandomTape_fu_657_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_createRandomTape_fu_657_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_7_fu_878_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_createRandomTape_fu_657_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_createRandomTape_fu_657_ap_ready = ap_const_logic_1)) then 
                    grp_createRandomTape_fu_657_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mpc_LowMC_2_fu_760_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mpc_LowMC_2_fu_760_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln1785_fu_1075_p2 = ap_const_lv1_1))) then 
                    grp_mpc_LowMC_2_fu_760_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mpc_LowMC_2_fu_760_ap_ready = ap_const_logic_1)) then 
                    grp_mpc_LowMC_2_fu_760_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_prove_25_fu_779_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_prove_25_fu_779_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    grp_prove_25_fu_779_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_prove_25_fu_779_ap_ready = ap_const_logic_1)) then 
                    grp_prove_25_fu_779_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                i_0_reg_567 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_reg_1706 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_0_reg_567 <= select_ln1808_1_reg_1715;
            end if; 
        end if;
    end process;

    indvar_flatten19_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                indvar_flatten19_reg_556 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten19_reg_556 <= add_ln1808_fu_1176_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_578 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_578 <= select_ln1809_3_fu_1324_p3;
            end if; 
        end if;
    end process;

    j1_0_reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                j1_0_reg_589 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_reg_1706 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j1_0_reg_589 <= select_ln1809_1_reg_1728;
            end if; 
        end if;
    end process;

    j_0_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                j_0_reg_497 <= j_3_reg_1574;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_1))) then 
                j_0_reg_497 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_1_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_createRandomTape_1_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                j_1_reg_545 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_1_reg_545 <= j_reg_1681;
            end if; 
        end if;
    end process;

    j_2_reg_611_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                j_2_reg_611 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                j_2_reg_611 <= j_5_reg_1757;
            end if; 
        end if;
    end process;

    k_0_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Commit_2_fu_717_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                k_0_reg_485 <= k_reg_1541;
            elsif (((grp_computeSeeds_2_fu_635_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_0_reg_485 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    loop_0_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_createRandomTape_fu_657_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                loop_0_reg_521 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_11_reg_1584 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loop_0_reg_521 <= loop_reg_1629;
            end if; 
        end if;
    end process;

    loop_1_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_1_reg_533 <= ap_const_lv7_0;
            elsif (((icmp_ln1774_reg_1634 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                loop_1_reg_533 <= loop_4_reg_1638;
            end if; 
        end if;
    end process;

    loop_2_reg_600_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then 
                loop_2_reg_600 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                loop_2_reg_600 <= loop_3_fu_1312_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                phi_mul_reg_509 <= add_ln1763_reg_1566;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_509 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    round_assign_reg_623_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_prove_25_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                round_assign_reg_623 <= i_1_reg_1790;
            elsif (((grp_H3_2_fu_680_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                round_assign_reg_623 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln1763_reg_1566 <= add_ln1763_fu_872_p2;
                j_3_reg_1574 <= j_3_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_878_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln1772_reg_1579 <= add_ln1772_fu_896_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1774_reg_1634_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln1775_1_reg_1673 <= add_ln1775_1_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_1))) then
                    add_ln1786_1_reg_1561(12 downto 2) <= add_ln1786_1_fu_866_p2(12 downto 2);
                    add_ln1786_reg_1556(12 downto 2) <= add_ln1786_fu_860_p2(12 downto 2);
                sext_ln1772_reg_1546 <= sext_ln1772_fu_838_p1;
                    sub_ln1786_reg_1551(12 downto 2) <= sub_ln1786_fu_854_p2(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1785_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                add_ln1786_4_reg_1696 <= add_ln1786_4_fu_1116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                i_1_reg_1790 <= i_1_fu_1449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln1774_reg_1634 <= icmp_ln1774_fu_987_p2;
                icmp_ln1774_reg_1634_pp1_iter1_reg <= icmp_ln1774_reg_1634;
                loop_1_reg_533_pp1_iter1_reg <= loop_1_reg_533;
                tmp_15_reg_1648_pp1_iter1_reg <= tmp_15_reg_1648;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln1774_reg_1634_pp1_iter10_reg <= icmp_ln1774_reg_1634_pp1_iter9_reg;
                icmp_ln1774_reg_1634_pp1_iter2_reg <= icmp_ln1774_reg_1634_pp1_iter1_reg;
                icmp_ln1774_reg_1634_pp1_iter3_reg <= icmp_ln1774_reg_1634_pp1_iter2_reg;
                icmp_ln1774_reg_1634_pp1_iter4_reg <= icmp_ln1774_reg_1634_pp1_iter3_reg;
                icmp_ln1774_reg_1634_pp1_iter5_reg <= icmp_ln1774_reg_1634_pp1_iter4_reg;
                icmp_ln1774_reg_1634_pp1_iter6_reg <= icmp_ln1774_reg_1634_pp1_iter5_reg;
                icmp_ln1774_reg_1634_pp1_iter7_reg <= icmp_ln1774_reg_1634_pp1_iter6_reg;
                icmp_ln1774_reg_1634_pp1_iter8_reg <= icmp_ln1774_reg_1634_pp1_iter7_reg;
                icmp_ln1774_reg_1634_pp1_iter9_reg <= icmp_ln1774_reg_1634_pp1_iter8_reg;
                loop_1_reg_533_pp1_iter2_reg <= loop_1_reg_533_pp1_iter1_reg;
                loop_1_reg_533_pp1_iter3_reg <= loop_1_reg_533_pp1_iter2_reg;
                loop_1_reg_533_pp1_iter4_reg <= loop_1_reg_533_pp1_iter3_reg;
                loop_1_reg_533_pp1_iter5_reg <= loop_1_reg_533_pp1_iter4_reg;
                loop_1_reg_533_pp1_iter6_reg <= loop_1_reg_533_pp1_iter5_reg;
                loop_1_reg_533_pp1_iter7_reg <= loop_1_reg_533_pp1_iter6_reg;
                loop_1_reg_533_pp1_iter8_reg <= loop_1_reg_533_pp1_iter7_reg;
                loop_1_reg_533_pp1_iter9_reg <= loop_1_reg_533_pp1_iter8_reg;
                tmp_15_reg_1648_pp1_iter10_reg <= tmp_15_reg_1648_pp1_iter9_reg;
                tmp_15_reg_1648_pp1_iter2_reg <= tmp_15_reg_1648_pp1_iter1_reg;
                tmp_15_reg_1648_pp1_iter3_reg <= tmp_15_reg_1648_pp1_iter2_reg;
                tmp_15_reg_1648_pp1_iter4_reg <= tmp_15_reg_1648_pp1_iter3_reg;
                tmp_15_reg_1648_pp1_iter5_reg <= tmp_15_reg_1648_pp1_iter4_reg;
                tmp_15_reg_1648_pp1_iter6_reg <= tmp_15_reg_1648_pp1_iter5_reg;
                tmp_15_reg_1648_pp1_iter7_reg <= tmp_15_reg_1648_pp1_iter6_reg;
                tmp_15_reg_1648_pp1_iter8_reg <= tmp_15_reg_1648_pp1_iter7_reg;
                tmp_15_reg_1648_pp1_iter9_reg <= tmp_15_reg_1648_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln1808_reg_1706 <= icmp_ln1808_fu_1170_p2;
                icmp_ln1808_reg_1706_pp2_iter1_reg <= icmp_ln1808_reg_1706;
                select_ln1809_2_reg_1734_pp2_iter1_reg <= select_ln1809_2_reg_1734;
                select_ln1809_reg_1722_pp2_iter1_reg <= select_ln1809_reg_1722;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                j_5_reg_1757 <= j_5_fu_1402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                j_reg_1681 <= j_fu_1081_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_1541 <= k_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                loop_4_reg_1638 <= loop_4_fu_993_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (tmp_11_reg_1584 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                loop_reg_1629 <= loop_fu_959_p2;
                tmp_0_load_1_reg_1614 <= tmp_0_q1;
                tmp_0_load_reg_1609 <= tmp_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                or_ln_reg_1800 <= or_ln_fu_1522_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln1808_1_reg_1715 <= select_ln1808_1_fu_1202_p3;
                select_ln1809_1_reg_1728 <= select_ln1809_1_fu_1282_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln1809_2_reg_1734 <= select_ln1809_2_fu_1304_p3;
                select_ln1809_reg_1722 <= select_ln1809_fu_1270_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_11_reg_1584 <= ap_phi_mux_loop_0_phi_fu_525_p4(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1774_fu_987_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_15_reg_1648 <= mul_ln1775_fu_1009_p2(15 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_11_fu_901_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln1771_reg_1588 <= trunc_ln1771_fu_909_p1;
                trunc_ln1_reg_1604 <= ap_phi_mux_loop_0_phi_fu_525_p4(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                viewOutputs_load_reg_1782 <= viewOutputs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1816_fu_1396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    zext_ln1817_reg_1762(2 downto 0) <= zext_ln1817_fu_1408_p1(2 downto 0);
            end if;
        end if;
    end process;
    sub_ln1786_reg_1551(1 downto 0) <= "00";
    add_ln1786_reg_1556(1 downto 0) <= "00";
    add_ln1786_1_reg_1561(1 downto 0) <= "00";
    zext_ln1817_reg_1762(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln1761_fu_800_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_7_fu_878_p3, tmp_11_fu_901_p3, ap_enable_reg_pp0_iter0, icmp_ln1774_fu_987_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state24, icmp_ln1785_fu_1075_p2, icmp_ln1808_fu_1170_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state37, icmp_ln1816_fu_1396_p2, ap_CS_fsm_state41, icmp_ln1826_fu_1443_p2, ap_CS_fsm_state5, grp_createRandomTape_fu_657_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, grp_computeSeeds_2_fu_635_ap_done, grp_H3_2_fu_680_ap_done, grp_createRandomTape_1_fu_701_ap_done, grp_Commit_2_fu_717_ap_done, grp_mpc_LowMC_2_fu_760_ap_done, grp_prove_25_fu_779_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state32, ap_CS_fsm_state23, ap_CS_fsm_state40, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_computeSeeds_2_fu_635_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln1761_fu_800_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_878_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_createRandomTape_fu_657_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_11_fu_901_p3 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_11_fu_901_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln1774_fu_987_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln1774_fu_987_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state23 => 
                if (((grp_createRandomTape_1_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln1785_fu_1075_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (((grp_mpc_LowMC_2_fu_760_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_Commit_2_fu_717_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((grp_Commit_2_fu_717_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_Commit_2_fu_717_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln1808_fu_1170_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln1816_fu_1396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state40 => 
                if (((grp_H3_2_fu_680_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln1826_fu_1443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_prove_25_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1763_fu_872_p2 <= std_logic_vector(unsigned(phi_mul_reg_509) + unsigned(ap_const_lv9_A6));
    add_ln1772_fu_896_p2 <= std_logic_vector(unsigned(zext_ln1772_7_fu_892_p1) + unsigned(sext_ln1772_reg_1546));
    add_ln1775_1_fu_1043_p2 <= std_logic_vector(unsigned(zext_ln1775_3_fu_1039_p1) + unsigned(phi_mul_reg_509));
    add_ln1775_fu_999_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_1_phi_fu_537_p4) + unsigned(ap_const_lv7_10));
    add_ln1786_1_fu_866_p2 <= std_logic_vector(unsigned(sub_ln1786_fu_854_p2) + unsigned(ap_const_lv13_8));
    add_ln1786_2_fu_1096_p2 <= std_logic_vector(unsigned(sub_ln1786_reg_1551) + unsigned(zext_ln1786_2_fu_1092_p1));
    add_ln1786_3_fu_1106_p2 <= std_logic_vector(unsigned(add_ln1786_reg_1556) + unsigned(zext_ln1786_2_fu_1092_p1));
    add_ln1786_4_fu_1116_p2 <= std_logic_vector(unsigned(add_ln1786_1_reg_1561) + unsigned(zext_ln1786_2_fu_1092_p1));
    add_ln1786_fu_860_p2 <= std_logic_vector(unsigned(sub_ln1786_fu_854_p2) + unsigned(ap_const_lv13_4));
    add_ln1808_fu_1176_p2 <= std_logic_vector(unsigned(indvar_flatten19_reg_556) + unsigned(ap_const_lv12_1));
    add_ln1809_1_fu_1318_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_578) + unsigned(ap_const_lv5_1));
    add_ln1811_1_fu_1355_p2 <= std_logic_vector(unsigned(sub_ln1811_1_fu_1346_p2) + unsigned(zext_ln1811_4_fu_1352_p1));
    add_ln1811_2_fu_1290_p2 <= std_logic_vector(unsigned(select_ln1808_2_fu_1232_p3) + unsigned(zext_ln1809_1_fu_1278_p1));
    add_ln1811_3_fu_1372_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_1361_p3) + unsigned(zext_ln1811_5_fu_1369_p1));
    add_ln1811_fu_1164_p2 <= std_logic_vector(unsigned(sub_ln1811_fu_1154_p2) + unsigned(zext_ln1809_fu_1160_p1));
    and_ln1808_fu_1252_p2 <= (xor_ln1808_fu_1240_p2 and icmp_ln1810_fu_1246_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(9);
    ap_CS_fsm_state23 <= ap_CS_fsm(10);
    ap_CS_fsm_state24 <= ap_CS_fsm(11);
    ap_CS_fsm_state25 <= ap_CS_fsm(12);
    ap_CS_fsm_state26 <= ap_CS_fsm(13);
    ap_CS_fsm_state27 <= ap_CS_fsm(14);
    ap_CS_fsm_state28 <= ap_CS_fsm(15);
    ap_CS_fsm_state29 <= ap_CS_fsm(16);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(17);
    ap_CS_fsm_state31 <= ap_CS_fsm(18);
    ap_CS_fsm_state32 <= ap_CS_fsm(19);
    ap_CS_fsm_state36 <= ap_CS_fsm(21);
    ap_CS_fsm_state37 <= ap_CS_fsm(22);
    ap_CS_fsm_state38 <= ap_CS_fsm(23);
    ap_CS_fsm_state39 <= ap_CS_fsm(24);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(25);
    ap_CS_fsm_state41 <= ap_CS_fsm(26);
    ap_CS_fsm_state42 <= ap_CS_fsm(27);
    ap_CS_fsm_state43 <= ap_CS_fsm(28);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(tmp_11_fu_901_p3)
    begin
        if ((tmp_11_fu_901_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln1774_fu_987_p2)
    begin
        if ((icmp_ln1774_fu_987_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state33_assign_proc : process(icmp_ln1808_fu_1170_p2)
    begin
        if ((icmp_ln1808_fu_1170_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state41, icmp_ln1826_fu_1443_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln1826_fu_1443_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_571_p4_assign_proc : process(i_0_reg_567, icmp_ln1808_reg_1706, ap_CS_fsm_pp2_stage0, select_ln1808_1_reg_1715, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln1808_reg_1706 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_0_phi_fu_571_p4 <= select_ln1808_1_reg_1715;
        else 
            ap_phi_mux_i_0_phi_fu_571_p4 <= i_0_reg_567;
        end if; 
    end process;


    ap_phi_mux_j1_0_phi_fu_593_p4_assign_proc : process(j1_0_reg_589, icmp_ln1808_reg_1706, ap_CS_fsm_pp2_stage0, select_ln1809_1_reg_1728, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln1808_reg_1706 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j1_0_phi_fu_593_p4 <= select_ln1809_1_reg_1728;
        else 
            ap_phi_mux_j1_0_phi_fu_593_p4 <= j1_0_reg_589;
        end if; 
    end process;


    ap_phi_mux_loop_0_phi_fu_525_p4_assign_proc : process(loop_0_reg_521, tmp_11_reg_1584, ap_CS_fsm_pp0_stage0, loop_reg_1629, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_11_reg_1584 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_loop_0_phi_fu_525_p4 <= loop_reg_1629;
        else 
            ap_phi_mux_loop_0_phi_fu_525_p4 <= loop_0_reg_521;
        end if; 
    end process;


    ap_phi_mux_loop_1_phi_fu_537_p4_assign_proc : process(loop_1_reg_533, ap_CS_fsm_pp1_stage0, icmp_ln1774_reg_1634, loop_4_reg_1638, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln1774_reg_1634 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_loop_1_phi_fu_537_p4 <= loop_4_reg_1638;
        else 
            ap_phi_mux_loop_1_phi_fu_537_p4 <= loop_1_reg_533;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41, icmp_ln1826_fu_1443_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln1826_fu_1443_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_0;

    as_hashes_address0_assign_proc : process(grp_H3_2_fu_680_as_hashes_address0, grp_Commit_2_fu_717_hash_address0, grp_prove_25_fu_779_commitments_hashes_address0, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            as_hashes_address0 <= grp_prove_25_fu_779_commitments_hashes_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            as_hashes_address0 <= grp_Commit_2_fu_717_hash_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            as_hashes_address0 <= grp_H3_2_fu_680_as_hashes_address0;
        else 
            as_hashes_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    as_hashes_ce0_assign_proc : process(grp_H3_2_fu_680_as_hashes_ce0, grp_Commit_2_fu_717_hash_ce0, grp_prove_25_fu_779_commitments_hashes_ce0, ap_CS_fsm_state32, ap_CS_fsm_state40, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            as_hashes_ce0 <= grp_prove_25_fu_779_commitments_hashes_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            as_hashes_ce0 <= grp_Commit_2_fu_717_hash_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            as_hashes_ce0 <= grp_H3_2_fu_680_as_hashes_ce0;
        else 
            as_hashes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    as_hashes_we0_assign_proc : process(grp_Commit_2_fu_717_hash_we0, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            as_hashes_we0 <= grp_Commit_2_fu_717_hash_we0;
        else 
            as_hashes_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bitNumber_assign_fu_1474_p3 <= (trunc_ln386_fu_1470_p1 & ap_const_lv1_0);
    grp_Commit_2_fu_717_ap_start <= grp_Commit_2_fu_717_ap_start_reg;

    grp_Commit_2_fu_717_hash_offset6_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_Commit_2_fu_717_hash_offset6 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_Commit_2_fu_717_hash_offset6 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_Commit_2_fu_717_hash_offset6 <= ap_const_lv3_0;
        else 
            grp_Commit_2_fu_717_hash_offset6 <= "XXX";
        end if; 
    end process;


    grp_Commit_2_fu_717_seed_offset1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_Commit_2_fu_717_seed_offset1 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_Commit_2_fu_717_seed_offset1 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_Commit_2_fu_717_seed_offset1 <= ap_const_lv3_0;
        else 
            grp_Commit_2_fu_717_seed_offset1 <= "XXX";
        end if; 
    end process;


    grp_Commit_2_fu_717_view_communicatedBits_offset4_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_Commit_2_fu_717_view_communicatedBits_offset4 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_Commit_2_fu_717_view_communicatedBits_offset4 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_Commit_2_fu_717_view_communicatedBits_offset4 <= ap_const_lv3_0;
        else 
            grp_Commit_2_fu_717_view_communicatedBits_offset4 <= "XXX";
        end if; 
    end process;


    grp_Commit_2_fu_717_view_inputShare_offset3_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_Commit_2_fu_717_view_inputShare_offset3 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_Commit_2_fu_717_view_inputShare_offset3 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_Commit_2_fu_717_view_inputShare_offset3 <= ap_const_lv3_0;
        else 
            grp_Commit_2_fu_717_view_inputShare_offset3 <= "XXX";
        end if; 
    end process;


    grp_Commit_2_fu_717_view_outputShare_offset5_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_Commit_2_fu_717_view_outputShare_offset5 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_Commit_2_fu_717_view_outputShare_offset5 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_Commit_2_fu_717_view_outputShare_offset5 <= ap_const_lv3_0;
        else 
            grp_Commit_2_fu_717_view_outputShare_offset5 <= "XXX";
        end if; 
    end process;

    grp_H3_2_fu_680_ap_start <= grp_H3_2_fu_680_ap_start_reg;
    grp_computeSeeds_2_fu_635_ap_start <= grp_computeSeeds_2_fu_635_ap_start_reg;
    grp_createRandomTape_1_fu_701_ap_start <= grp_createRandomTape_1_fu_701_ap_start_reg;
    grp_createRandomTape_fu_657_ap_start <= grp_createRandomTape_fu_657_ap_start_reg;
    grp_mpc_LowMC_2_fu_760_ap_start <= grp_mpc_LowMC_2_fu_760_ap_start_reg;
    grp_prove_25_fu_779_ap_start <= grp_prove_25_fu_779_ap_start_reg;
    i_1_fu_1449_p2 <= std_logic_vector(unsigned(round_assign_reg_623) + unsigned(ap_const_lv8_1));
    i_fu_1182_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_571_p4) + unsigned(ap_const_lv8_1));
    icmp_ln1761_fu_800_p2 <= "1" when (unsigned(k_0_reg_485) < unsigned(ap_const_lv8_DB)) else "0";
    icmp_ln1774_fu_987_p2 <= "1" when (ap_phi_mux_loop_1_phi_fu_537_p4 = ap_const_lv7_4B) else "0";
    icmp_ln1785_fu_1075_p2 <= "1" when (j_1_reg_545 = ap_const_lv3_4) else "0";
    icmp_ln1808_fu_1170_p2 <= "1" when (indvar_flatten19_reg_556 = ap_const_lv12_A44) else "0";
    icmp_ln1809_fu_1188_p2 <= "1" when (indvar_flatten_reg_578 = ap_const_lv5_C) else "0";
    icmp_ln1810_fu_1246_p2 <= "1" when (loop_2_reg_600 = ap_const_lv3_4) else "0";
    icmp_ln1816_fu_1396_p2 <= "1" when (j_2_reg_611 = ap_const_lv3_4) else "0";
    icmp_ln1826_fu_1443_p2 <= "1" when (round_assign_reg_623 = ap_const_lv8_DB) else "0";
    j_3_fu_886_p2 <= std_logic_vector(unsigned(j_0_reg_497) + unsigned(ap_const_lv2_1));
    j_5_fu_1402_p2 <= std_logic_vector(unsigned(j_2_reg_611) + unsigned(ap_const_lv3_1));
    j_6_fu_1258_p2 <= std_logic_vector(unsigned(select_ln1808_fu_1194_p3) + unsigned(ap_const_lv2_1));
    j_fu_1081_p2 <= std_logic_vector(unsigned(j_1_reg_545) + unsigned(ap_const_lv3_1));
    k_fu_806_p2 <= std_logic_vector(unsigned(k_0_reg_485) + unsigned(ap_const_lv8_1));
    loop_3_fu_1312_p2 <= std_logic_vector(unsigned(select_ln1809_fu_1270_p3) + unsigned(ap_const_lv3_1));
    loop_4_fu_993_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_1_phi_fu_537_p4) + unsigned(ap_const_lv7_1));
    loop_fu_959_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_0_reg_521));
    lshr_ln54_1_fu_1512_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_2_fu_1508_p1(8-1 downto 0)))));
    lshr_ln54_fu_1492_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_1_fu_1488_p1(8-1 downto 0)))));

    message_address0_assign_proc : process(grp_computeSeeds_2_fu_635_message_address0, grp_H3_2_fu_680_message_address0, ap_CS_fsm_state2, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            message_address0 <= grp_H3_2_fu_680_message_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_address0 <= grp_computeSeeds_2_fu_635_message_address0;
        else 
            message_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    message_ce0_assign_proc : process(grp_computeSeeds_2_fu_635_message_ce0, grp_H3_2_fu_680_message_ce0, ap_CS_fsm_state2, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            message_ce0 <= grp_H3_2_fu_680_message_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_ce0 <= grp_computeSeeds_2_fu_635_message_ce0;
        else 
            message_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1775_fu_1009_p0 <= mul_ln1775_fu_1009_p00(7 - 1 downto 0);
    mul_ln1775_fu_1009_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1775_fu_999_p2),16));
    mul_ln1775_fu_1009_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1775_fu_1009_p0) * unsigned(ap_const_lv16_E4), 16));
    or_ln1772_1_fu_939_p2 <= (trunc_ln1771_reg_1588 or ap_const_lv4_2);
    or_ln1772_2_fu_949_p2 <= (trunc_ln1771_reg_1588 or ap_const_lv4_3);
    or_ln1772_fu_918_p2 <= (trunc_ln1771_fu_909_p1 or ap_const_lv4_1);
    or_ln1809_fu_1264_p2 <= (icmp_ln1809_fu_1188_p2 or and_ln1808_fu_1252_p2);
    or_ln_fu_1522_p3 <= (trunc_ln386_1_fu_1498_p1 & trunc_ln54_fu_1518_p1);

    output_address0_assign_proc : process(zext_ln1817_reg_1762, grp_H3_2_fu_680_circuitOutput_address0, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_address0 <= zext_ln1817_reg_1762(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_address0 <= grp_H3_2_fu_680_circuitOutput_address0;
        else 
            output_address0 <= "XXXXXX";
        end if; 
    end process;


    output_ce0_assign_proc : process(grp_H3_2_fu_680_circuitOutput_ce0, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_ce0 <= grp_H3_2_fu_680_circuitOutput_ce0;
        else 
            output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_d0 <= (xor_ln1817_fu_1431_p2 xor viewOutputs_q0);

    output_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            output_we0 <= ap_const_logic_1;
        else 
            output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_address0_assign_proc : process(grp_computeSeeds_2_fu_635_plaintext_address0, grp_H3_2_fu_680_plaintext_address0, grp_mpc_LowMC_2_fu_760_plaintext_address0, ap_CS_fsm_state2, ap_CS_fsm_state40, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            plaintext_address0 <= grp_mpc_LowMC_2_fu_760_plaintext_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            plaintext_address0 <= grp_H3_2_fu_680_plaintext_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_address0 <= grp_computeSeeds_2_fu_635_plaintext_address0;
        else 
            plaintext_address0 <= "XXX";
        end if; 
    end process;


    plaintext_ce0_assign_proc : process(grp_computeSeeds_2_fu_635_plaintext_ce0, grp_H3_2_fu_680_plaintext_ce0, grp_mpc_LowMC_2_fu_760_plaintext_ce0, ap_CS_fsm_state2, ap_CS_fsm_state40, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            plaintext_ce0 <= grp_mpc_LowMC_2_fu_760_plaintext_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            plaintext_ce0 <= grp_H3_2_fu_680_plaintext_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            plaintext_ce0 <= grp_computeSeeds_2_fu_635_plaintext_ce0;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    privateKey_address0_assign_proc : process(ap_CS_fsm_state24, grp_computeSeeds_2_fu_635_privateKey_address0, ap_CS_fsm_state2, zext_ln1786_fu_1087_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            privateKey_address0 <= zext_ln1786_fu_1087_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            privateKey_address0 <= grp_computeSeeds_2_fu_635_privateKey_address0;
        else 
            privateKey_address0 <= "XXX";
        end if; 
    end process;


    privateKey_ce0_assign_proc : process(ap_CS_fsm_state24, grp_computeSeeds_2_fu_635_privateKey_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            privateKey_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            privateKey_ce0 <= grp_computeSeeds_2_fu_635_privateKey_ce0;
        else 
            privateKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pubKey_address0 <= grp_computeSeeds_2_fu_635_publicKey_address0;
    pubKey_ce0 <= grp_computeSeeds_2_fu_635_publicKey_ce0;

    seeds_seed_address0_assign_proc : process(ap_CS_fsm_state5, grp_computeSeeds_2_fu_635_allSeeds_seed_address0, grp_createRandomTape_fu_657_seed_address0, grp_createRandomTape_1_fu_701_seed_address0, grp_Commit_2_fu_717_seed_address0, grp_prove_25_fu_779_seeds_seed_address0, ap_CS_fsm_state2, ap_CS_fsm_state32, ap_CS_fsm_state23, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            seeds_seed_address0 <= grp_prove_25_fu_779_seeds_seed_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            seeds_seed_address0 <= grp_Commit_2_fu_717_seed_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            seeds_seed_address0 <= grp_createRandomTape_1_fu_701_seed_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seeds_seed_address0 <= grp_createRandomTape_fu_657_seed_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seeds_seed_address0 <= grp_computeSeeds_2_fu_635_allSeeds_seed_address0;
        else 
            seeds_seed_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    seeds_seed_ce0_assign_proc : process(ap_CS_fsm_state5, grp_computeSeeds_2_fu_635_allSeeds_seed_ce0, grp_createRandomTape_fu_657_seed_ce0, grp_createRandomTape_1_fu_701_seed_ce0, grp_Commit_2_fu_717_seed_ce0, grp_prove_25_fu_779_seeds_seed_ce0, ap_CS_fsm_state2, ap_CS_fsm_state32, ap_CS_fsm_state23, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            seeds_seed_ce0 <= grp_prove_25_fu_779_seeds_seed_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            seeds_seed_ce0 <= grp_Commit_2_fu_717_seed_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            seeds_seed_ce0 <= grp_createRandomTape_1_fu_701_seed_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            seeds_seed_ce0 <= grp_createRandomTape_fu_657_seed_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seeds_seed_ce0 <= grp_computeSeeds_2_fu_635_allSeeds_seed_ce0;
        else 
            seeds_seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seeds_seed_we0_assign_proc : process(grp_computeSeeds_2_fu_635_allSeeds_seed_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seeds_seed_we0 <= grp_computeSeeds_2_fu_635_allSeeds_seed_we0;
        else 
            seeds_seed_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1808_1_fu_1202_p3 <= 
        i_fu_1182_p2 when (icmp_ln1809_fu_1188_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_571_p4;
    select_ln1808_2_fu_1232_p3 <= 
        sub_ln1811_2_fu_1226_p2 when (icmp_ln1809_fu_1188_p2(0) = '1') else 
        sub_ln1811_fu_1154_p2;
    select_ln1808_3_fu_1296_p3 <= 
        sub_ln1811_2_fu_1226_p2 when (icmp_ln1809_fu_1188_p2(0) = '1') else 
        add_ln1811_fu_1164_p2;
    select_ln1808_fu_1194_p3 <= 
        ap_const_lv2_0 when (icmp_ln1809_fu_1188_p2(0) = '1') else 
        ap_phi_mux_j1_0_phi_fu_593_p4;
    select_ln1809_1_fu_1282_p3 <= 
        j_6_fu_1258_p2 when (and_ln1808_fu_1252_p2(0) = '1') else 
        select_ln1808_fu_1194_p3;
    select_ln1809_2_fu_1304_p3 <= 
        add_ln1811_2_fu_1290_p2 when (and_ln1808_fu_1252_p2(0) = '1') else 
        select_ln1808_3_fu_1296_p3;
    select_ln1809_3_fu_1324_p3 <= 
        ap_const_lv5_1 when (icmp_ln1809_fu_1188_p2(0) = '1') else 
        add_ln1809_1_fu_1318_p2;
    select_ln1809_fu_1270_p3 <= 
        ap_const_lv3_0 when (or_ln1809_fu_1264_p2(0) = '1') else 
        loop_2_reg_600;
        sext_ln1772_1_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_976_p3),64));

        sext_ln1772_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1772_fu_832_p2),12));

        sext_ln1775_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_1648_pp1_iter10_reg),7));

        sext_ln1786_1_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1786_3_fu_1106_p2),64));

        sext_ln1786_2_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1786_4_reg_1696),64));

        sext_ln1786_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1786_2_fu_1096_p2),64));

        sext_ln1811_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_1383_p4),64));

    shl_ln1811_mid1_fu_1214_p3 <= (i_fu_1182_p2 & ap_const_lv2_0);
    shl_ln_fu_1142_p3 <= (ap_phi_mux_i_0_phi_fu_571_p4 & ap_const_lv2_0);

    sig_0_challengeBits_address0_assign_proc : process(ap_CS_fsm_state41, grp_H3_2_fu_680_challengeBits_0_address0, ap_CS_fsm_state40, zext_ln54_fu_1465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sig_0_challengeBits_address0 <= zext_ln54_fu_1465_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_0_challengeBits_address0 <= grp_H3_2_fu_680_challengeBits_0_address0;
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ap_CS_fsm_state41, grp_H3_2_fu_680_challengeBits_0_ce0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sig_0_challengeBits_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_0_challengeBits_ce0 <= grp_H3_2_fu_680_challengeBits_0_ce0;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_challengeBits_d0 <= grp_H3_2_fu_680_challengeBits_0_d0;

    sig_0_challengeBits_we0_assign_proc : process(grp_H3_2_fu_680_challengeBits_0_we0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_0_challengeBits_we0 <= grp_H3_2_fu_680_challengeBits_0_we0;
        else 
            sig_0_challengeBits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_address0 <= grp_prove_25_fu_779_proof_0_communicatedBits_address0;
    sig_0_proofs_commun_ce0 <= grp_prove_25_fu_779_proof_0_communicatedBits_ce0;
    sig_0_proofs_commun_d0 <= grp_prove_25_fu_779_proof_0_communicatedBits_d0;
    sig_0_proofs_commun_we0 <= grp_prove_25_fu_779_proof_0_communicatedBits_we0;
    sig_0_proofs_inputS_address0 <= grp_prove_25_fu_779_proof_0_inputShare_address0;
    sig_0_proofs_inputS_ce0 <= grp_prove_25_fu_779_proof_0_inputShare_ce0;
    sig_0_proofs_inputS_d0 <= grp_prove_25_fu_779_proof_0_inputShare_d0;
    sig_0_proofs_inputS_we0 <= grp_prove_25_fu_779_proof_0_inputShare_we0;
    sig_0_proofs_seed1_address0 <= grp_prove_25_fu_779_proof_0_seed1_address0;
    sig_0_proofs_seed1_ce0 <= grp_prove_25_fu_779_proof_0_seed1_ce0;
    sig_0_proofs_seed1_d0 <= grp_prove_25_fu_779_proof_0_seed1_d0;
    sig_0_proofs_seed1_we0 <= grp_prove_25_fu_779_proof_0_seed1_we0;
    sig_0_proofs_seed2_address0 <= grp_prove_25_fu_779_proof_0_seed2_address0;
    sig_0_proofs_seed2_ce0 <= grp_prove_25_fu_779_proof_0_seed2_ce0;
    sig_0_proofs_seed2_d0 <= grp_prove_25_fu_779_proof_0_seed2_d0;
    sig_0_proofs_seed2_we0 <= grp_prove_25_fu_779_proof_0_seed2_we0;
    sig_0_proofs_view3C_address0 <= grp_prove_25_fu_779_proof_0_view3Commitment_address0;
    sig_0_proofs_view3C_ce0 <= grp_prove_25_fu_779_proof_0_view3Commitment_ce0;
    sig_0_proofs_view3C_d0 <= grp_prove_25_fu_779_proof_0_view3Commitment_d0;
    sig_0_proofs_view3C_we0 <= grp_prove_25_fu_779_proof_0_view3Commitment_we0;

    sig_0_salt_address0_assign_proc : process(ap_CS_fsm_state5, grp_computeSeeds_2_fu_635_salt_0_address0, grp_createRandomTape_fu_657_salt_0_address0, grp_H3_2_fu_680_salt_0_address0, grp_createRandomTape_1_fu_701_salt_0_address0, ap_CS_fsm_state2, ap_CS_fsm_state23, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sig_0_salt_address0 <= grp_createRandomTape_1_fu_701_salt_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_0_salt_address0 <= grp_H3_2_fu_680_salt_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sig_0_salt_address0 <= grp_createRandomTape_fu_657_salt_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_salt_address0 <= grp_computeSeeds_2_fu_635_salt_0_address0;
        else 
            sig_0_salt_address0 <= "XXXXX";
        end if; 
    end process;


    sig_0_salt_ce0_assign_proc : process(ap_CS_fsm_state5, grp_computeSeeds_2_fu_635_salt_0_ce0, grp_createRandomTape_fu_657_salt_0_ce0, grp_H3_2_fu_680_salt_0_ce0, grp_createRandomTape_1_fu_701_salt_0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state23, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            sig_0_salt_ce0 <= grp_createRandomTape_1_fu_701_salt_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            sig_0_salt_ce0 <= grp_H3_2_fu_680_salt_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sig_0_salt_ce0 <= grp_createRandomTape_fu_657_salt_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_salt_ce0 <= grp_computeSeeds_2_fu_635_salt_0_ce0;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_d0 <= grp_computeSeeds_2_fu_635_salt_0_d0;

    sig_0_salt_we0_assign_proc : process(grp_computeSeeds_2_fu_635_salt_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_salt_we0 <= grp_computeSeeds_2_fu_635_salt_0_we0;
        else 
            sig_0_salt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1772_fu_832_p2 <= std_logic_vector(unsigned(zext_ln1772_6_fu_828_p1) - unsigned(zext_ln1772_4_fu_812_p1));
    sub_ln1786_fu_854_p2 <= std_logic_vector(unsigned(zext_ln1786_1_fu_850_p1) - unsigned(zext_ln1772_5_fu_824_p1));
    sub_ln1811_1_fu_1346_p2 <= std_logic_vector(unsigned(zext_ln1811_2_fu_1342_p1) - unsigned(zext_ln1811_1_fu_1332_p1));
    sub_ln1811_2_fu_1226_p2 <= std_logic_vector(unsigned(zext_ln1811_3_fu_1222_p1) - unsigned(zext_ln1808_1_fu_1210_p1));
    sub_ln1811_fu_1154_p2 <= std_logic_vector(unsigned(zext_ln1811_fu_1150_p1) - unsigned(zext_ln1808_fu_1138_p1));

    tape_tape_address0_assign_proc : process(ap_enable_reg_pp1_iter11, grp_createRandomTape_1_fu_701_tape_address0, grp_mpc_LowMC_2_fu_760_tapes_tape_address0, ap_block_pp1_stage0, ap_CS_fsm_state23, ap_CS_fsm_state26, zext_ln1775_4_fu_1071_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))) then 
            tape_tape_address0 <= zext_ln1775_4_fu_1071_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            tape_tape_address0 <= grp_mpc_LowMC_2_fu_760_tapes_tape_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tape_tape_address0 <= grp_createRandomTape_1_fu_701_tape_address0;
        else 
            tape_tape_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    tape_tape_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter11, grp_createRandomTape_1_fu_701_tape_ce0, grp_mpc_LowMC_2_fu_760_tapes_tape_ce0, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if (((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            tape_tape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            tape_tape_ce0 <= grp_mpc_LowMC_2_fu_760_tapes_tape_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tape_tape_ce0 <= grp_createRandomTape_1_fu_701_tape_ce0;
        else 
            tape_tape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tape_tape_ce1_assign_proc : process(grp_mpc_LowMC_2_fu_760_tapes_tape_ce1, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            tape_tape_ce1 <= grp_mpc_LowMC_2_fu_760_tapes_tape_ce1;
        else 
            tape_tape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tape_tape_d0_assign_proc : process(ap_enable_reg_pp1_iter11, grp_createRandomTape_1_fu_701_tape_d0, ap_block_pp1_stage0, ap_CS_fsm_state23, tmp_4_fu_1056_p6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))) then 
            tape_tape_d0 <= tmp_4_fu_1056_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tape_tape_d0 <= grp_createRandomTape_1_fu_701_tape_d0;
        else 
            tape_tape_d0 <= "XXXXXXXX";
        end if; 
    end process;


    tape_tape_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln1774_reg_1634_pp1_iter10_reg, ap_enable_reg_pp1_iter11, grp_createRandomTape_1_fu_701_tape_we0, ap_CS_fsm_state23)
    begin
        if (((icmp_ln1774_reg_1634_pp1_iter10_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            tape_tape_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tape_tape_we0 <= grp_createRandomTape_1_fu_701_tape_we0;
        else 
            tape_tape_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_0_address0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln1772_fu_913_p1, zext_ln1772_2_fu_944_p1, ap_block_pp0_stage1, zext_ln1775_fu_1031_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            tmp_0_address0 <= zext_ln1775_fu_1031_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            tmp_0_address0 <= zext_ln1772_2_fu_944_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tmp_0_address0 <= zext_ln1772_fu_913_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_0_address0 <= grp_createRandomTape_fu_657_tape_0_address0;
        else 
            tmp_0_address0 <= "XXXXXX";
        end if; 
    end process;


    tmp_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln1772_1_fu_924_p1, ap_block_pp0_stage1, zext_ln1772_3_fu_954_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                tmp_0_address1 <= zext_ln1772_3_fu_954_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_0_address1 <= zext_ln1772_1_fu_924_p1(6 - 1 downto 0);
            else 
                tmp_0_address1 <= "XXXXXX";
            end if;
        else 
            tmp_0_address1 <= "XXXXXX";
        end if; 
    end process;


    tmp_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_0_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            tmp_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_0_ce0 <= grp_createRandomTape_fu_657_tape_0_ce0;
        else 
            tmp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tmp_0_ce1 <= ap_const_logic_1;
        else 
            tmp_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_0_we0_assign_proc : process(ap_CS_fsm_state5, grp_createRandomTape_fu_657_tape_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_0_we0 <= grp_createRandomTape_fu_657_tape_0_we0;
        else 
            tmp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1383_p4 <= ((select_ln1809_2_reg_1734_pp2_iter1_reg & ap_const_lv1_0) & select_ln1809_reg_1722_pp2_iter1_reg);
    tmp_11_fu_901_p3 <= ap_phi_mux_loop_0_phi_fu_525_p4(4 downto 4);
    tmp_12_cast_fu_1361_p3 <= (add_ln1811_1_fu_1355_p2 & ap_const_lv2_0);
    tmp_12_fu_976_p3 <= (add_ln1772_reg_1579 & trunc_ln1_reg_1604);
    tmp_13_fu_1413_p3 <= (ap_const_lv61_2 & j_2_reg_611);
    tmp_14_fu_1422_p3 <= (ap_const_lv61_4 & j_2_reg_611);

    tmp_1_address0_assign_proc : process(ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_1_address0, ap_block_pp1_stage0, zext_ln1775_fu_1031_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            tmp_1_address0 <= zext_ln1775_fu_1031_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_1_address0 <= grp_createRandomTape_fu_657_tape_1_address0;
        else 
            tmp_1_address0 <= "XXXXXX";
        end if; 
    end process;


    tmp_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_1_ce0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            tmp_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_1_ce0 <= grp_createRandomTape_fu_657_tape_1_ce0;
        else 
            tmp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_1_we0_assign_proc : process(ap_CS_fsm_state5, grp_createRandomTape_fu_657_tape_1_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_1_we0 <= grp_createRandomTape_fu_657_tape_1_we0;
        else 
            tmp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_2_address0_assign_proc : process(ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_2_address0, ap_block_pp1_stage0, zext_ln1775_fu_1031_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            tmp_2_address0 <= zext_ln1775_fu_1031_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_2_address0 <= grp_createRandomTape_fu_657_tape_2_address0;
        else 
            tmp_2_address0 <= "XXXXXX";
        end if; 
    end process;


    tmp_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_2_ce0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            tmp_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_2_ce0 <= grp_createRandomTape_fu_657_tape_2_ce0;
        else 
            tmp_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_2_we0_assign_proc : process(ap_CS_fsm_state5, grp_createRandomTape_fu_657_tape_2_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_2_we0 <= grp_createRandomTape_fu_657_tape_2_we0;
        else 
            tmp_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_3_address0_assign_proc : process(ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_3_address0, ap_block_pp1_stage0, zext_ln1775_fu_1031_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then 
            tmp_3_address0 <= zext_ln1775_fu_1031_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_3_address0 <= grp_createRandomTape_fu_657_tape_3_address0;
        else 
            tmp_3_address0 <= "XXXXXX";
        end if; 
    end process;


    tmp_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state5, ap_enable_reg_pp1_iter10, grp_createRandomTape_fu_657_tape_3_ce0)
    begin
        if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            tmp_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_3_ce0 <= grp_createRandomTape_fu_657_tape_3_ce0;
        else 
            tmp_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_3_we0_assign_proc : process(ap_CS_fsm_state5, grp_createRandomTape_fu_657_tape_3_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp_3_we0 <= grp_createRandomTape_fu_657_tape_3_we0;
        else 
            tmp_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_1056_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1775_fu_1049_p1),32));
    tmp_5_fu_816_p3 <= (k_0_reg_485 & ap_const_lv2_0);
    tmp_6_fu_842_p3 <= (k_0_reg_485 & ap_const_lv4_0);
    tmp_7_fu_878_p3 <= j_0_reg_497(1 downto 1);
    tmp_8_fu_1335_p3 <= (select_ln1808_1_reg_1715 & ap_const_lv2_0);
    trunc_ln1771_fu_909_p1 <= ap_phi_mux_loop_0_phi_fu_525_p4(4 - 1 downto 0);
    trunc_ln2_fu_1455_p4 <= round_assign_reg_623(7 downto 2);
    trunc_ln386_1_fu_1498_p1 <= lshr_ln54_fu_1492_p2(1 - 1 downto 0);
    trunc_ln386_fu_1470_p1 <= round_assign_reg_623(2 - 1 downto 0);
    trunc_ln54_fu_1518_p1 <= lshr_ln54_1_fu_1512_p2(1 - 1 downto 0);

    viewOutputs_address0_assign_proc : process(ap_CS_fsm_state37, zext_ln1817_fu_1408_p1, icmp_ln1816_fu_1396_p2, ap_CS_fsm_state38, ap_enable_reg_pp2_iter2, grp_H3_2_fu_680_viewOutputs_address0, ap_block_pp2_stage0, ap_CS_fsm_state40, sext_ln1811_fu_1391_p1, tmp_13_fu_1413_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            viewOutputs_address0 <= tmp_13_fu_1413_p3(14 - 1 downto 0);
        elsif (((icmp_ln1816_fu_1396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            viewOutputs_address0 <= zext_ln1817_fu_1408_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            viewOutputs_address0 <= sext_ln1811_fu_1391_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            viewOutputs_address0 <= grp_H3_2_fu_680_viewOutputs_address0;
        else 
            viewOutputs_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    viewOutputs_address1 <= tmp_14_fu_1422_p3(14 - 1 downto 0);

    viewOutputs_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state37, icmp_ln1816_fu_1396_p2, ap_CS_fsm_state38, ap_enable_reg_pp2_iter2, grp_H3_2_fu_680_viewOutputs_ce0, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((icmp_ln1816_fu_1396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            viewOutputs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            viewOutputs_ce0 <= grp_H3_2_fu_680_viewOutputs_ce0;
        else 
            viewOutputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    viewOutputs_ce1_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            viewOutputs_ce1 <= ap_const_logic_1;
        else 
            viewOutputs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    viewOutputs_d0 <= views_outputShare_q0;

    viewOutputs_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln1808_reg_1706_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln1808_reg_1706_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            viewOutputs_we0 <= ap_const_logic_1;
        else 
            viewOutputs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    views_communicatedBi_address0_assign_proc : process(grp_Commit_2_fu_717_view_communicatedBits_address0, grp_mpc_LowMC_2_fu_760_views_communicatedBi_address0, grp_prove_25_fu_779_views_communicatedBits_address0, ap_CS_fsm_state32, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            views_communicatedBi_address0 <= grp_prove_25_fu_779_views_communicatedBits_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_communicatedBi_address0 <= grp_mpc_LowMC_2_fu_760_views_communicatedBi_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            views_communicatedBi_address0 <= grp_Commit_2_fu_717_view_communicatedBits_address0;
        else 
            views_communicatedBi_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    views_communicatedBi_ce0_assign_proc : process(grp_Commit_2_fu_717_view_communicatedBits_ce0, grp_mpc_LowMC_2_fu_760_views_communicatedBi_ce0, grp_prove_25_fu_779_views_communicatedBits_ce0, ap_CS_fsm_state32, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            views_communicatedBi_ce0 <= grp_prove_25_fu_779_views_communicatedBits_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_communicatedBi_ce0 <= grp_mpc_LowMC_2_fu_760_views_communicatedBi_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            views_communicatedBi_ce0 <= grp_Commit_2_fu_717_view_communicatedBits_ce0;
        else 
            views_communicatedBi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    views_communicatedBi_we0_assign_proc : process(grp_mpc_LowMC_2_fu_760_views_communicatedBi_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_communicatedBi_we0 <= grp_mpc_LowMC_2_fu_760_views_communicatedBi_we0;
        else 
            views_communicatedBi_we0 <= ap_const_logic_0;
        end if; 
    end process;


    views_inputShare_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state24, icmp_ln1785_fu_1075_p2, ap_enable_reg_pp0_iter1, grp_Commit_2_fu_717_view_inputShare_address0, grp_mpc_LowMC_2_fu_760_views_inputShare_address0, grp_prove_25_fu_779_views_inputShare_address0, ap_CS_fsm_state32, ap_block_pp0_stage0, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26, sext_ln1772_1_fu_982_p1, sext_ln1786_fu_1101_p1)
    begin
        if (((icmp_ln1785_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            views_inputShare_address0 <= sext_ln1786_fu_1101_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            views_inputShare_address0 <= sext_ln1772_1_fu_982_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            views_inputShare_address0 <= grp_prove_25_fu_779_views_inputShare_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_inputShare_address0 <= grp_mpc_LowMC_2_fu_760_views_inputShare_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            views_inputShare_address0 <= grp_Commit_2_fu_717_view_inputShare_address0;
        else 
            views_inputShare_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    views_inputShare_address1_assign_proc : process(ap_CS_fsm_state24, icmp_ln1785_fu_1075_p2, ap_CS_fsm_state25, sext_ln1786_1_fu_1111_p1, sext_ln1786_2_fu_1121_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            views_inputShare_address1 <= sext_ln1786_2_fu_1121_p1(12 - 1 downto 0);
        elsif (((icmp_ln1785_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            views_inputShare_address1 <= sext_ln1786_1_fu_1111_p1(12 - 1 downto 0);
        else 
            views_inputShare_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    views_inputShare_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state24, icmp_ln1785_fu_1075_p2, ap_enable_reg_pp0_iter1, grp_Commit_2_fu_717_view_inputShare_ce0, grp_mpc_LowMC_2_fu_760_views_inputShare_ce0, grp_prove_25_fu_779_views_inputShare_ce0, ap_CS_fsm_state32, ap_CS_fsm_state43, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26)
    begin
        if ((((icmp_ln1785_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            views_inputShare_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            views_inputShare_ce0 <= grp_prove_25_fu_779_views_inputShare_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_inputShare_ce0 <= grp_mpc_LowMC_2_fu_760_views_inputShare_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            views_inputShare_ce0 <= grp_Commit_2_fu_717_view_inputShare_ce0;
        else 
            views_inputShare_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    views_inputShare_ce1_assign_proc : process(ap_CS_fsm_state24, icmp_ln1785_fu_1075_p2, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln1785_fu_1075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            views_inputShare_ce1 <= ap_const_logic_1;
        else 
            views_inputShare_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    views_inputShare_d0 <= (((tmp_0_q1 & tmp_0_q0) & tmp_0_load_1_reg_1614) & tmp_0_load_reg_1609);
    views_inputShare_d1 <= (xor_ln1786_fu_1125_p2 xor views_inputShare_q0);

    views_inputShare_we0_assign_proc : process(tmp_11_reg_1584, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_11_reg_1584 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            views_inputShare_we0 <= ap_const_logic_1;
        else 
            views_inputShare_we0 <= ap_const_logic_0;
        end if; 
    end process;


    views_inputShare_we1_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            views_inputShare_we1 <= ap_const_logic_1;
        else 
            views_inputShare_we1 <= ap_const_logic_0;
        end if; 
    end process;


    views_outputShare_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, grp_Commit_2_fu_717_view_outputShare_address0, grp_mpc_LowMC_2_fu_760_views_outputShare_address0, ap_CS_fsm_state32, ap_block_pp2_stage0, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26, zext_ln1811_6_fu_1378_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            views_outputShare_address0 <= zext_ln1811_6_fu_1378_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_outputShare_address0 <= grp_mpc_LowMC_2_fu_760_views_outputShare_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            views_outputShare_address0 <= grp_Commit_2_fu_717_view_outputShare_address0;
        else 
            views_outputShare_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    views_outputShare_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, grp_Commit_2_fu_717_view_outputShare_ce0, grp_mpc_LowMC_2_fu_760_views_outputShare_ce0, ap_CS_fsm_state32, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state26)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            views_outputShare_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_outputShare_ce0 <= grp_mpc_LowMC_2_fu_760_views_outputShare_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            views_outputShare_ce0 <= grp_Commit_2_fu_717_view_outputShare_ce0;
        else 
            views_outputShare_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    views_outputShare_we0_assign_proc : process(grp_mpc_LowMC_2_fu_760_views_outputShare_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            views_outputShare_we0 <= grp_mpc_LowMC_2_fu_760_views_outputShare_we0;
        else 
            views_outputShare_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1786_fu_1125_p2 <= (views_inputShare_q1 xor privateKey_q0);
    xor_ln1808_fu_1240_p2 <= (icmp_ln1809_fu_1188_p2 xor ap_const_lv1_1);
    xor_ln1817_fu_1431_p2 <= (viewOutputs_q1 xor viewOutputs_load_reg_1782);
    xor_ln54_1_fu_1502_p2 <= (bitNumber_assign_fu_1474_p3 xor ap_const_lv3_7);
    xor_ln54_fu_1482_p2 <= (bitNumber_assign_fu_1474_p3 xor ap_const_lv3_6);
    zext_ln1772_1_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1772_fu_918_p2),64));
    zext_ln1772_2_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1772_1_fu_939_p2),64));
    zext_ln1772_3_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1772_2_fu_949_p2),64));
    zext_ln1772_4_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_485),11));
    zext_ln1772_5_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_816_p3),13));
    zext_ln1772_6_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_816_p3),11));
    zext_ln1772_7_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_497),12));
    zext_ln1772_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_0_phi_fu_525_p4),64));
    zext_ln1775_3_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_533_pp1_iter9_reg),9));
    zext_ln1775_4_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1775_1_reg_1673),64));
    zext_ln1775_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1025_p2),64));
    zext_ln1786_1_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_842_p3),13));
    zext_ln1786_2_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_545),13));
    zext_ln1786_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_545),64));
    zext_ln1808_1_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_1182_p2),11));
    zext_ln1808_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_571_p4),11));
    zext_ln1809_1_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_6_fu_1258_p2),11));
    zext_ln1809_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j1_0_phi_fu_593_p4),11));
    zext_ln1811_1_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1808_1_reg_1715),11));
    zext_ln1811_2_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1335_p3),11));
    zext_ln1811_3_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1811_mid1_fu_1214_p3),11));
    zext_ln1811_4_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1809_1_reg_1728),11));
    zext_ln1811_5_fu_1369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1809_reg_1722),13));
    zext_ln1811_6_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1811_3_fu_1372_p2),64));
    zext_ln1811_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1142_p3),11));
    zext_ln1817_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_611),64));
    zext_ln54_1_fu_1488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_1482_p2),8));
    zext_ln54_2_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_1_fu_1502_p2),8));
    zext_ln54_fu_1465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_fu_1455_p4),64));
end behav;
