-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakWidth1600_Spon_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    instance_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_ce0 : OUT STD_LOGIC;
    instance_state_we0 : OUT STD_LOGIC;
    instance_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    instance_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    instance_byteIOIndex_read : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_squeezing_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    data_offset1 : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of KeccakWidth1600_Spon_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_A7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010100111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_51_cast_fu_278_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_51_cast_reg_467 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln299_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal instance_state_addr_reg_476 : STD_LOGIC_VECTOR (7 downto 0);
    signal instance_state_addr_1_reg_481 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln305_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln305_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln304_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partialBlock_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal partialBlock_reg_493 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fromWordsToBytes_fu_232_ap_ready : STD_LOGIC;
    signal grp_fromWordsToBytes_fu_232_ap_done : STD_LOGIC;
    signal ap_block_state16_on_subcall_done : BOOLEAN;
    signal partialBlock_27_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal partialBlock_27_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln325_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln325_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_392_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_reg_509 : STD_LOGIC_VECTOR (32 downto 0);
    signal loop_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_517 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln393_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln394_5_fu_438_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln394_5_reg_527 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln332_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln331_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce0 : STD_LOGIC;
    signal stateAsWords_we0 : STD_LOGIC;
    signal stateAsWords_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_ce1 : STD_LOGIC;
    signal stateAsWords_we1 : STD_LOGIC;
    signal stateAsWords_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_13_ce0 : STD_LOGIC;
    signal stateAsWords_13_we0 : STD_LOGIC;
    signal stateAsWords_13_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_13_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_13_ce1 : STD_LOGIC;
    signal stateAsWords_13_we1 : STD_LOGIC;
    signal stateAsWords_13_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakP1600OnWords_fu_223_ap_start : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_ap_done : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_ap_idle : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_ap_ready : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakP1600OnWords_fu_223_state_ce0 : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_state_we0 : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakP1600OnWords_fu_223_state_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakP1600OnWords_fu_223_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakP1600OnWords_fu_223_state_ce1 : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_state_we1 : STD_LOGIC;
    signal grp_KeccakP1600OnWords_fu_223_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakP1600OnWords_fu_223_state_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fromWordsToBytes_fu_232_ap_start : STD_LOGIC;
    signal grp_fromWordsToBytes_fu_232_ap_idle : STD_LOGIC;
    signal grp_fromWordsToBytes_fu_232_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fromWordsToBytes_fu_232_state_ce0 : STD_LOGIC;
    signal grp_fromWordsToBytes_fu_232_state_we0 : STD_LOGIC;
    signal grp_fromWordsToBytes_fu_232_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fromWordsToBytes_fu_232_stateAsWords_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fromWordsToBytes_fu_232_stateAsWords_ce0 : STD_LOGIC;
    signal grp_fromWordsToBytes_fu_232_stateAsWords_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fromBytesToWords_fu_239_ap_start : STD_LOGIC;
    signal grp_fromBytesToWords_fu_239_ap_done : STD_LOGIC;
    signal grp_fromBytesToWords_fu_239_ap_idle : STD_LOGIC;
    signal grp_fromBytesToWords_fu_239_ap_ready : STD_LOGIC;
    signal grp_fromBytesToWords_fu_239_stateAsWords_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fromBytesToWords_fu_239_stateAsWords_ce0 : STD_LOGIC;
    signal grp_fromBytesToWords_fu_239_stateAsWords_we0 : STD_LOGIC;
    signal grp_fromBytesToWords_fu_239_stateAsWords_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fromBytesToWords_fu_239_stateAsWords_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fromBytesToWords_fu_239_state_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fromBytesToWords_fu_239_state_ce0 : STD_LOGIC;
    signal instance_squeezing_w_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_instance_byteIOIndex_phi_fu_156_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal instance_byteIOIndex_reg_153 : STD_LOGIC_VECTOR (31 downto 0);
    signal instance_byteIOIndex_1_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_175 : STD_LOGIC_VECTOR (32 downto 0);
    signal curData_0_idx_reg_187 : STD_LOGIC_VECTOR (63 downto 0);
    signal offset_assign_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_0_i1_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_KeccakP1600OnWords_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fromWordsToBytes_fu_232_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fromBytesToWords_fu_239_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln149_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln394_7_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln149_fu_297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln149_16_fu_304_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_254_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln394_5_fu_262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln394_4_fu_250_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln394_fu_266_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln394_3_fu_246_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln394_4_fu_272_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_61_fu_311_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln322_fu_345_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln322_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln323_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln323_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partialBlock_26_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln325_3_fu_388_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln394_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln394_fu_420_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln304_fu_424_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln394_3_fu_428_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln394_6_fu_434_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component KeccakP1600OnWords IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fromWordsToBytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        stateAsWords_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stateAsWords_ce0 : OUT STD_LOGIC;
        stateAsWords_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fromBytesToWords IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stateAsWords_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        stateAsWords_ce0 : OUT STD_LOGIC;
        stateAsWords_we0 : OUT STD_LOGIC;
        stateAsWords_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        stateAsWords_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pi_tempA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    stateAsWords_U : component pi_tempA
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stateAsWords_address0,
        ce0 => stateAsWords_ce0,
        we0 => stateAsWords_we0,
        d0 => stateAsWords_d0,
        q0 => stateAsWords_q0,
        address1 => grp_KeccakP1600OnWords_fu_223_state_address1,
        ce1 => stateAsWords_ce1,
        we1 => stateAsWords_we1,
        d1 => grp_KeccakP1600OnWords_fu_223_state_d1,
        q1 => stateAsWords_q1);

    stateAsWords_13_U : component pi_tempA
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stateAsWords_13_address0,
        ce0 => stateAsWords_13_ce0,
        we0 => stateAsWords_13_we0,
        d0 => stateAsWords_13_d0,
        q0 => stateAsWords_13_q0,
        address1 => grp_KeccakP1600OnWords_fu_223_state_address1,
        ce1 => stateAsWords_13_ce1,
        we1 => stateAsWords_13_we1,
        d1 => grp_KeccakP1600OnWords_fu_223_state_d1,
        q1 => stateAsWords_13_q1);

    grp_KeccakP1600OnWords_fu_223 : component KeccakP1600OnWords
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakP1600OnWords_fu_223_ap_start,
        ap_done => grp_KeccakP1600OnWords_fu_223_ap_done,
        ap_idle => grp_KeccakP1600OnWords_fu_223_ap_idle,
        ap_ready => grp_KeccakP1600OnWords_fu_223_ap_ready,
        state_address0 => grp_KeccakP1600OnWords_fu_223_state_address0,
        state_ce0 => grp_KeccakP1600OnWords_fu_223_state_ce0,
        state_we0 => grp_KeccakP1600OnWords_fu_223_state_we0,
        state_d0 => grp_KeccakP1600OnWords_fu_223_state_d0,
        state_q0 => grp_KeccakP1600OnWords_fu_223_state_q0,
        state_address1 => grp_KeccakP1600OnWords_fu_223_state_address1,
        state_ce1 => grp_KeccakP1600OnWords_fu_223_state_ce1,
        state_we1 => grp_KeccakP1600OnWords_fu_223_state_we1,
        state_d1 => grp_KeccakP1600OnWords_fu_223_state_d1,
        state_q1 => grp_KeccakP1600OnWords_fu_223_state_q1);

    grp_fromWordsToBytes_fu_232 : component fromWordsToBytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fromWordsToBytes_fu_232_ap_start,
        ap_done => grp_fromWordsToBytes_fu_232_ap_done,
        ap_idle => grp_fromWordsToBytes_fu_232_ap_idle,
        ap_ready => grp_fromWordsToBytes_fu_232_ap_ready,
        state_address0 => grp_fromWordsToBytes_fu_232_state_address0,
        state_ce0 => grp_fromWordsToBytes_fu_232_state_ce0,
        state_we0 => grp_fromWordsToBytes_fu_232_state_we0,
        state_d0 => grp_fromWordsToBytes_fu_232_state_d0,
        stateAsWords_address0 => grp_fromWordsToBytes_fu_232_stateAsWords_address0,
        stateAsWords_ce0 => grp_fromWordsToBytes_fu_232_stateAsWords_ce0,
        stateAsWords_q0 => grp_fromWordsToBytes_fu_232_stateAsWords_q0);

    grp_fromBytesToWords_fu_239 : component fromBytesToWords
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fromBytesToWords_fu_239_ap_start,
        ap_done => grp_fromBytesToWords_fu_239_ap_done,
        ap_idle => grp_fromBytesToWords_fu_239_ap_idle,
        ap_ready => grp_fromBytesToWords_fu_239_ap_ready,
        stateAsWords_address0 => grp_fromBytesToWords_fu_239_stateAsWords_address0,
        stateAsWords_ce0 => grp_fromBytesToWords_fu_239_stateAsWords_ce0,
        stateAsWords_we0 => grp_fromBytesToWords_fu_239_stateAsWords_we0,
        stateAsWords_d0 => grp_fromBytesToWords_fu_239_stateAsWords_d0,
        stateAsWords_q0 => grp_fromBytesToWords_fu_239_stateAsWords_q0,
        state_address0 => grp_fromBytesToWords_fu_239_state_address0,
        state_ce0 => grp_fromBytesToWords_fu_239_state_ce0,
        state_q0 => instance_state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_0_preg <= instance_byteIOIndex_1_reg_164;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_1_preg <= instance_squeezing_w_reg_142;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakP1600OnWords_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakP1600OnWords_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_KeccakP1600OnWords_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakP1600OnWords_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakP1600OnWords_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fromBytesToWords_fu_239_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fromBytesToWords_fu_239_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln304_fu_321_p2 = ap_const_lv1_1) and (icmp_ln305_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                    grp_fromBytesToWords_fu_239_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fromBytesToWords_fu_239_ap_ready = ap_const_logic_1)) then 
                    grp_fromBytesToWords_fu_239_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fromWordsToBytes_fu_232_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fromWordsToBytes_fu_232_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_fromWordsToBytes_fu_232_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fromWordsToBytes_fu_232_ap_ready = ap_const_logic_1)) then 
                    grp_fromWordsToBytes_fu_232_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    curData_0_idx_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                curData_0_idx_reg_187 <= add_ln331_fu_448_p2;
            elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                curData_0_idx_reg_187 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_0_reg_175 <= i_reg_509;
            elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_reg_175 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_1_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln393_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                instance_byteIOIndex_1_reg_164 <= add_ln332_fu_443_p2;
            elsif (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                instance_byteIOIndex_1_reg_164 <= ap_phi_mux_instance_byteIOIndex_phi_fu_156_p4;
            end if; 
        end if;
    end process;

    instance_byteIOIndex_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln299_fu_286_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                instance_byteIOIndex_reg_153 <= instance_byteIOIndex_read;
            elsif (((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                instance_byteIOIndex_reg_153 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    instance_squeezing_w_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln299_fu_286_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                instance_squeezing_w_reg_142 <= instance_squeezing_read;
            elsif (((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                instance_squeezing_w_reg_142 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    loop_0_i1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                loop_0_i1_reg_212 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                loop_0_i1_reg_212 <= loop_reg_517;
            end if; 
        end if;
    end process;

    offset_assign_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln305_fu_327_p2 = ap_const_lv1_0) and (icmp_ln304_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                offset_assign_reg_199 <= instance_byteIOIndex_1_reg_164;
            elsif (((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_on_subcall_done))) then 
                offset_assign_reg_199 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln393_fu_398_p2 = ap_const_lv1_0))) then
                add_ln394_5_reg_527 <= add_ln394_5_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_reg_509 <= i_fu_392_p2;
                partialBlock_27_reg_498 <= partialBlock_27_fu_376_p3;
                    zext_ln325_reg_504(31 downto 0) <= zext_ln325_fu_384_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln299_reg_472 <= icmp_ln299_fu_286_p2;
                    tmp_51_cast_reg_467(14 downto 4) <= tmp_51_cast_fu_278_p3(14 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln304_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                icmp_ln305_reg_489 <= icmp_ln305_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln299_fu_286_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                instance_state_addr_reg_476 <= zext_ln149_fu_292_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                loop_reg_517 <= loop_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_on_subcall_done))) then
                partialBlock_reg_493 <= partialBlock_fu_349_p2;
            end if;
        end if;
    end process;
    tmp_51_cast_reg_467(3 downto 0) <= "0000";
    zext_ln325_reg_504(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln299_fu_286_p2, icmp_ln305_fu_327_p2, ap_CS_fsm_state11, icmp_ln304_fu_321_p2, ap_CS_fsm_state16, ap_block_state16_on_subcall_done, ap_CS_fsm_state18, icmp_ln393_fu_398_p2, grp_KeccakP1600OnWords_fu_223_ap_done, grp_fromBytesToWords_fu_239_ap_done, ap_CS_fsm_state10, ap_block_state10_on_subcall_done, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln299_fu_286_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln299_fu_286_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_fromBytesToWords_fu_239_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakP1600OnWords_fu_223_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln305_fu_327_p2 = ap_const_lv1_0) and (icmp_ln304_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((grp_fromBytesToWords_fu_239_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_KeccakP1600OnWords_fu_223_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln393_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln323_fu_358_p2 <= std_logic_vector(unsigned(offset_assign_reg_199) + unsigned(zext_ln322_fu_355_p1));
    add_ln331_fu_448_p2 <= std_logic_vector(unsigned(zext_ln325_reg_504) + unsigned(curData_0_idx_reg_187));
    add_ln332_fu_443_p2 <= std_logic_vector(unsigned(offset_assign_reg_199) + unsigned(partialBlock_27_reg_498));
    add_ln394_3_fu_428_p2 <= std_logic_vector(unsigned(trunc_ln394_fu_420_p1) + unsigned(trunc_ln304_fu_424_p1));
    add_ln394_4_fu_272_p2 <= std_logic_vector(unsigned(sub_ln394_fu_266_p2) + unsigned(zext_ln394_3_fu_246_p1));
    add_ln394_5_fu_438_p2 <= std_logic_vector(unsigned(tmp_51_cast_reg_467) + unsigned(zext_ln394_6_fu_434_p1));
    add_ln394_fu_409_p2 <= std_logic_vector(unsigned(offset_assign_reg_199) + unsigned(loop_0_i1_reg_212));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state10_on_subcall_done_assign_proc : process(icmp_ln299_reg_472, grp_fromWordsToBytes_fu_232_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((icmp_ln299_reg_472 = ap_const_lv1_1) and (grp_fromWordsToBytes_fu_232_ap_done = ap_const_logic_0));
    end process;


    ap_block_state16_on_subcall_done_assign_proc : process(icmp_ln305_reg_489, grp_fromWordsToBytes_fu_232_ap_done)
    begin
                ap_block_state16_on_subcall_done <= ((icmp_ln305_reg_489 = ap_const_lv1_1) and (grp_fromWordsToBytes_fu_232_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln304_fu_321_p2)
    begin
        if ((((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_instance_byteIOIndex_phi_fu_156_p4_assign_proc : process(icmp_ln299_reg_472, ap_CS_fsm_state10, instance_byteIOIndex_reg_153)
    begin
        if (((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_phi_mux_instance_byteIOIndex_phi_fu_156_p4 <= ap_const_lv32_0;
        else 
            ap_phi_mux_instance_byteIOIndex_phi_fu_156_p4 <= instance_byteIOIndex_reg_153;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, icmp_ln304_fu_321_p2)
    begin
        if (((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state11, icmp_ln304_fu_321_p2, instance_byteIOIndex_1_reg_164, ap_return_0_preg)
    begin
        if (((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_0 <= instance_byteIOIndex_1_reg_164;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state11, icmp_ln304_fu_321_p2, instance_squeezing_w_reg_142, ap_return_1_preg)
    begin
        if (((icmp_ln304_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_1 <= instance_squeezing_w_reg_142;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    data_address0 <= zext_ln394_7_fu_453_p1(14 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_d0 <= instance_state_q0;

    data_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakP1600OnWords_fu_223_ap_start <= grp_KeccakP1600OnWords_fu_223_ap_start_reg;

    grp_KeccakP1600OnWords_fu_223_state_q0_assign_proc : process(stateAsWords_q0, stateAsWords_13_q0, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_KeccakP1600OnWords_fu_223_state_q0 <= stateAsWords_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_KeccakP1600OnWords_fu_223_state_q0 <= stateAsWords_q0;
        else 
            grp_KeccakP1600OnWords_fu_223_state_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_KeccakP1600OnWords_fu_223_state_q1_assign_proc : process(stateAsWords_q1, stateAsWords_13_q1, ap_CS_fsm_state8, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_KeccakP1600OnWords_fu_223_state_q1 <= stateAsWords_13_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_KeccakP1600OnWords_fu_223_state_q1 <= stateAsWords_q1;
        else 
            grp_KeccakP1600OnWords_fu_223_state_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fromBytesToWords_fu_239_ap_start <= grp_fromBytesToWords_fu_239_ap_start_reg;

    grp_fromBytesToWords_fu_239_stateAsWords_q0_assign_proc : process(stateAsWords_q0, stateAsWords_13_q0, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fromBytesToWords_fu_239_stateAsWords_q0 <= stateAsWords_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fromBytesToWords_fu_239_stateAsWords_q0 <= stateAsWords_q0;
        else 
            grp_fromBytesToWords_fu_239_stateAsWords_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fromWordsToBytes_fu_232_ap_start <= grp_fromWordsToBytes_fu_232_ap_start_reg;

    grp_fromWordsToBytes_fu_232_stateAsWords_q0_assign_proc : process(icmp_ln299_reg_472, icmp_ln305_reg_489, ap_CS_fsm_state16, stateAsWords_q0, stateAsWords_13_q0, ap_CS_fsm_state10)
    begin
        if (((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fromWordsToBytes_fu_232_stateAsWords_q0 <= stateAsWords_13_q0;
        elsif (((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fromWordsToBytes_fu_232_stateAsWords_q0 <= stateAsWords_q0;
        else 
            grp_fromWordsToBytes_fu_232_stateAsWords_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_392_p2 <= std_logic_vector(unsigned(zext_ln325_3_fu_388_p1) + unsigned(i_0_reg_175));
    icmp_ln299_fu_286_p2 <= "1" when (instance_squeezing_read = ap_const_lv32_0) else "0";
    icmp_ln304_fu_321_p2 <= "1" when (tmp_61_fu_311_p4 = ap_const_lv29_0) else "0";
    icmp_ln305_fu_327_p2 <= "1" when (instance_byteIOIndex_1_reg_164 = ap_const_lv32_A8) else "0";
    icmp_ln323_fu_364_p2 <= "1" when (unsigned(add_ln323_fu_358_p2) > unsigned(ap_const_lv32_A8)) else "0";
    icmp_ln393_fu_398_p2 <= "1" when (loop_0_i1_reg_212 = partialBlock_27_reg_498) else "0";
    instance_state_addr_1_reg_481 <= ap_const_lv64_A7(8 - 1 downto 0);

    instance_state_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln299_reg_472, instance_state_addr_reg_476, instance_state_addr_1_reg_481, ap_CS_fsm_state3, icmp_ln305_reg_489, ap_CS_fsm_state16, ap_CS_fsm_state18, grp_fromWordsToBytes_fu_232_state_address0, grp_fromBytesToWords_fu_239_state_address0, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, zext_ln149_fu_292_p1, zext_ln394_fu_415_p1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            instance_state_address0 <= zext_ln394_fu_415_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            instance_state_address0 <= instance_state_addr_1_reg_481;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            instance_state_address0 <= ap_const_lv64_A7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            instance_state_address0 <= instance_state_addr_reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            instance_state_address0 <= zext_ln149_fu_292_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            instance_state_address0 <= grp_fromBytesToWords_fu_239_state_address0;
        elsif ((((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            instance_state_address0 <= grp_fromWordsToBytes_fu_232_state_address0;
        else 
            instance_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln299_reg_472, ap_CS_fsm_state3, icmp_ln305_reg_489, ap_CS_fsm_state16, ap_CS_fsm_state18, grp_fromWordsToBytes_fu_232_state_ce0, grp_fromBytesToWords_fu_239_state_ce0, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            instance_state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            instance_state_ce0 <= grp_fromBytesToWords_fu_239_state_ce0;
        elsif ((((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            instance_state_ce0 <= grp_fromWordsToBytes_fu_232_state_ce0;
        else 
            instance_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    instance_state_d0_assign_proc : process(icmp_ln299_reg_472, icmp_ln305_reg_489, ap_CS_fsm_state16, grp_fromWordsToBytes_fu_232_state_d0, ap_CS_fsm_state10, ap_CS_fsm_state2, xor_ln149_fu_297_p2, ap_CS_fsm_state4, xor_ln149_16_fu_304_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            instance_state_d0 <= xor_ln149_16_fu_304_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            instance_state_d0 <= xor_ln149_fu_297_p2;
        elsif ((((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            instance_state_d0 <= grp_fromWordsToBytes_fu_232_state_d0;
        else 
            instance_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_state_we0_assign_proc : process(icmp_ln299_reg_472, icmp_ln305_reg_489, ap_CS_fsm_state16, grp_fromWordsToBytes_fu_232_state_we0, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            instance_state_we0 <= ap_const_logic_1;
        elsif ((((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            instance_state_we0 <= grp_fromWordsToBytes_fu_232_state_we0;
        else 
            instance_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_fu_403_p2 <= std_logic_vector(unsigned(loop_0_i1_reg_212) + unsigned(ap_const_lv32_1));
    partialBlock_26_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv32_A8) - unsigned(offset_assign_reg_199));
    partialBlock_27_fu_376_p3 <= 
        partialBlock_26_fu_370_p2 when (icmp_ln323_fu_364_p2(0) = '1') else 
        zext_ln322_fu_355_p1;
    partialBlock_fu_349_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(trunc_ln322_fu_345_p1));

    stateAsWords_13_address0_assign_proc : process(icmp_ln305_reg_489, ap_CS_fsm_state16, grp_KeccakP1600OnWords_fu_223_state_address0, grp_fromWordsToBytes_fu_232_stateAsWords_address0, grp_fromBytesToWords_fu_239_stateAsWords_address0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            stateAsWords_13_address0 <= grp_fromBytesToWords_fu_239_stateAsWords_address0;
        elsif (((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            stateAsWords_13_address0 <= grp_fromWordsToBytes_fu_232_stateAsWords_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_13_address0 <= grp_KeccakP1600OnWords_fu_223_state_address0;
        else 
            stateAsWords_13_address0 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_13_ce0_assign_proc : process(icmp_ln305_reg_489, ap_CS_fsm_state16, grp_KeccakP1600OnWords_fu_223_state_ce0, grp_fromWordsToBytes_fu_232_stateAsWords_ce0, grp_fromBytesToWords_fu_239_stateAsWords_ce0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            stateAsWords_13_ce0 <= grp_fromBytesToWords_fu_239_stateAsWords_ce0;
        elsif (((icmp_ln305_reg_489 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            stateAsWords_13_ce0 <= grp_fromWordsToBytes_fu_232_stateAsWords_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_13_ce0 <= grp_KeccakP1600OnWords_fu_223_state_ce0;
        else 
            stateAsWords_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_13_ce1_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_13_ce1 <= grp_KeccakP1600OnWords_fu_223_state_ce1;
        else 
            stateAsWords_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_13_d0_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_d0, grp_fromBytesToWords_fu_239_stateAsWords_d0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            stateAsWords_13_d0 <= grp_fromBytesToWords_fu_239_stateAsWords_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_13_d0 <= grp_KeccakP1600OnWords_fu_223_state_d0;
        else 
            stateAsWords_13_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_13_we0_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_we0, grp_fromBytesToWords_fu_239_stateAsWords_we0, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            stateAsWords_13_we0 <= grp_fromBytesToWords_fu_239_stateAsWords_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_13_we0 <= grp_KeccakP1600OnWords_fu_223_state_we0;
        else 
            stateAsWords_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_13_we1_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_we1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            stateAsWords_13_we1 <= grp_KeccakP1600OnWords_fu_223_state_we1;
        else 
            stateAsWords_13_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_address0_assign_proc : process(icmp_ln299_reg_472, grp_KeccakP1600OnWords_fu_223_state_address0, grp_fromWordsToBytes_fu_232_stateAsWords_address0, grp_fromBytesToWords_fu_239_stateAsWords_address0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_address0 <= grp_fromBytesToWords_fu_239_stateAsWords_address0;
        elsif (((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            stateAsWords_address0 <= grp_fromWordsToBytes_fu_232_stateAsWords_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_address0 <= grp_KeccakP1600OnWords_fu_223_state_address0;
        else 
            stateAsWords_address0 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_ce0_assign_proc : process(icmp_ln299_reg_472, grp_KeccakP1600OnWords_fu_223_state_ce0, grp_fromWordsToBytes_fu_232_stateAsWords_ce0, grp_fromBytesToWords_fu_239_stateAsWords_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_ce0 <= grp_fromBytesToWords_fu_239_stateAsWords_ce0;
        elsif (((icmp_ln299_reg_472 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            stateAsWords_ce0 <= grp_fromWordsToBytes_fu_232_stateAsWords_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_ce0 <= grp_KeccakP1600OnWords_fu_223_state_ce0;
        else 
            stateAsWords_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_ce1_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_ce1 <= grp_KeccakP1600OnWords_fu_223_state_ce1;
        else 
            stateAsWords_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_d0_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_d0, grp_fromBytesToWords_fu_239_stateAsWords_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_d0 <= grp_fromBytesToWords_fu_239_stateAsWords_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_d0 <= grp_KeccakP1600OnWords_fu_223_state_d0;
        else 
            stateAsWords_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_we0_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_we0, grp_fromBytesToWords_fu_239_stateAsWords_we0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stateAsWords_we0 <= grp_fromBytesToWords_fu_239_stateAsWords_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_we0 <= grp_KeccakP1600OnWords_fu_223_state_we0;
        else 
            stateAsWords_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_we1_assign_proc : process(grp_KeccakP1600OnWords_fu_223_state_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            stateAsWords_we1 <= grp_KeccakP1600OnWords_fu_223_state_we1;
        else 
            stateAsWords_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln394_fu_266_p2 <= std_logic_vector(unsigned(zext_ln394_5_fu_262_p1) - unsigned(zext_ln394_4_fu_250_p1));
    tmp_51_cast_fu_278_p3 <= (add_ln394_4_fu_272_p2 & ap_const_lv4_0);
    tmp_61_fu_311_p4 <= i_0_reg_175(32 downto 4);
    tmp_fu_254_p3 <= (data_offset & ap_const_lv2_0);
    trunc_ln304_fu_424_p1 <= curData_0_idx_reg_187(6 - 1 downto 0);
    trunc_ln322_fu_345_p1 <= i_0_reg_175(5 - 1 downto 0);
    trunc_ln394_fu_420_p1 <= loop_0_i1_reg_212(6 - 1 downto 0);
    xor_ln149_16_fu_304_p2 <= (instance_state_q0 xor ap_const_lv8_80);
    xor_ln149_fu_297_p2 <= (instance_state_q0 xor ap_const_lv8_1);
    zext_ln149_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(instance_byteIOIndex_read),64));
    zext_ln322_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_reg_493),32));
    zext_ln325_3_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_27_fu_376_p3),33));
    zext_ln325_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_27_fu_376_p3),64));
    zext_ln394_3_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_offset1),11));
    zext_ln394_4_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_offset),11));
    zext_ln394_5_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_254_p3),11));
    zext_ln394_6_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_3_fu_428_p2),15));
    zext_ln394_7_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_5_reg_527),64));
    zext_ln394_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln394_fu_409_p2),64));
end behav;
