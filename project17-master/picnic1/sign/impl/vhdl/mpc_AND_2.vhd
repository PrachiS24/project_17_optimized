-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mpc_AND_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    in1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    in1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    in2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    in2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    in2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    out_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    out_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    out_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    rand_tape_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rand_tape_ce0 : OUT STD_LOGIC;
    rand_tape_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    rand_tape_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    rand_tape_ce1 : OUT STD_LOGIC;
    rand_tape_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    rand_pos_read : IN STD_LOGIC_VECTOR (31 downto 0);
    views_communicatedBi_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    views_communicatedBi_ce0 : OUT STD_LOGIC;
    views_communicatedBi_we0 : OUT STD_LOGIC;
    views_communicatedBi_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    views_communicatedBi_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    views_communicatedBits_offset : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of mpc_AND_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_A6 : STD_LOGIC_VECTOR (9 downto 0) := "0010100110";
    constant ap_const_lv10_14C : STD_LOGIC_VECTOR (9 downto 0) := "0101001100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv17_4B : STD_LOGIC_VECTOR (16 downto 0) := "00000000001001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln54_cast1_reg_693 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln54_cast_reg_698 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln54_fu_268_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln54_reg_709 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln54_11_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_11_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_fu_317_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln66_fu_343_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln66_reg_788 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln54_12_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_12_reg_793 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_13_fu_354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_13_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_14_fu_367_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln54_14_reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln66_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln66_reg_811 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_388_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_819 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal views_communicatedBi_3_reg_824 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1342_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1343_4_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1343_4_reg_829 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_0_phi_fu_221_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_reg_217 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln54_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln54_1_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln66_2_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out6_01_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag_0_fu_86 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag6_0_fu_90 : STD_LOGIC_VECTOR (0 downto 0);
    signal out5_02_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_03_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal write_flag3_0_fu_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_233_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln54_fu_287_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_1_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln54_fu_307_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_325_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln66_36_fu_333_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln66_fu_321_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln66_fu_337_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_1_fu_350_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln54_6_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_2_fu_363_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln66_fu_371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln66_37_fu_394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln66_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_641_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1343_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1343_3_fu_426_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln1343_fu_432_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_440_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_411_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_464_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_455_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1343_2_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_485_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1343_1_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_494_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1343_1_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1343_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1343_2_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln1343_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1349_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1350_fu_580_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1350_1_fu_587_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1350_2_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln66_fu_629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln66_6_fu_625_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_641_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component crypto_sign_mux_3VhK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_mac_mWhU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    crypto_sign_mux_3VhK_U94 : component crypto_sign_mux_3VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => in1_0_read,
        din1 => in1_1_read,
        din2 => in1_2_read,
        din3 => i_0_reg_217,
        dout => tmp_fu_411_p5);

    crypto_sign_mux_3VhK_U95 : component crypto_sign_mux_3VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => in2_0_read,
        din1 => in2_1_read,
        din2 => in2_2_read,
        din3 => select_ln1343_fu_432_p3,
        dout => tmp_s_fu_440_p5);

    crypto_sign_mux_3VhK_U96 : component crypto_sign_mux_3VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => in1_0_read,
        din1 => in1_1_read,
        din2 => in1_2_read,
        din3 => select_ln1343_fu_432_p3,
        dout => tmp_1_fu_455_p5);

    crypto_sign_mux_3VhK_U97 : component crypto_sign_mux_3VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => in2_0_read,
        din1 => in2_1_read,
        din2 => in2_2_read,
        din3 => i_0_reg_217,
        dout => tmp_2_fu_464_p5);

    crypto_sign_mux_3VhK_U98 : component crypto_sign_mux_3VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => zext_ln54_12_reg_793,
        din1 => zext_ln54_13_reg_799,
        din2 => zext_ln54_14_reg_805,
        din3 => i_0_reg_217,
        dout => tmp_3_fu_485_p5);

    crypto_sign_mux_3VhK_U99 : component crypto_sign_mux_3VhK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => zext_ln54_12_reg_793,
        din1 => zext_ln54_13_reg_799,
        din2 => zext_ln54_14_reg_805,
        din3 => select_ln1343_fu_432_p3,
        dout => tmp_4_fu_494_p5);

    crypto_sign_mac_mWhU_U100 : component crypto_sign_mac_mWhU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => add_ln66_fu_398_p2,
        din1 => grp_fu_641_p1,
        din2 => zext_ln54_cast1_reg_693,
        dout => grp_fu_641_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_0_reg_217 <= i_reg_819;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_217 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_1) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then 
                write_flag3_0_fu_102 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag3_0_fu_102 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then 
                write_flag6_0_fu_90 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag6_0_fu_90 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    write_flag_0_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_0) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then 
                write_flag_0_fu_86 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag_0_fu_86 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_819 <= i_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_1) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then
                out5_02_fu_94 <= xor_ln1343_4_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_1)) and not((ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then
                out6_01_fu_82 <= xor_ln1343_4_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_0_phi_fu_221_p4 = ap_const_lv2_0) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then
                out_03_fu_98 <= xor_ln1343_4_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_0_reg_732 <= r_0_fu_317_p1;
                    zext_ln54_11_reg_724(2 downto 0) <= zext_ln54_11_fu_312_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln66_reg_788 <= sext_ln66_fu_343_p1;
                xor_ln66_reg_811 <= xor_ln66_fu_376_p2;
                    zext_ln54_12_reg_793(0) <= zext_ln54_12_fu_347_p1(0);
                    zext_ln54_13_reg_799(0) <= zext_ln54_13_fu_354_p1(0);
                    zext_ln54_14_reg_805(0) <= zext_ln54_14_fu_367_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln54_reg_709 <= trunc_ln54_fu_268_p1;
                zext_ln54_cast1_reg_693 <= rand_pos_read(19 downto 3);
                zext_ln54_cast_reg_698 <= rand_pos_read(12 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_0))) then
                views_communicatedBi_3_reg_824 <= sext_ln66_2_fu_407_p1(16 - 1 downto 0);
                xor_ln1343_4_reg_829 <= xor_ln1343_4_fu_521_p2;
            end if;
        end if;
    end process;
    zext_ln54_11_reg_724(7 downto 3) <= "00000";
    zext_ln54_12_reg_793(7 downto 1) <= "0000000";
    zext_ln54_13_reg_799(7 downto 1) <= "0000000";
    zext_ln54_14_reg_805(7 downto 1) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln1342_fu_382_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1349_fu_575_p2 <= std_logic_vector(unsigned(rand_pos_read) + unsigned(ap_const_lv32_1));
    add_ln54_1_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv10_14C) + unsigned(zext_ln54_cast_reg_698));
    add_ln54_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv10_A6) + unsigned(zext_ln54_cast_reg_698));
    add_ln66_fu_398_p2 <= std_logic_vector(unsigned(zext_ln66_37_fu_394_p1) + unsigned(sext_ln66_reg_788));
    and_ln1343_1_fu_473_p2 <= (tmp_2_fu_464_p5 and tmp_1_fu_455_p5);
    and_ln1343_2_fu_479_p2 <= (tmp_fu_411_p5 and tmp_2_fu_464_p5);
    and_ln1343_fu_449_p2 <= (tmp_s_fu_440_p5 and tmp_fu_411_p5);
    and_ln66_fu_629_p2 <= (xor_ln66_reg_811 and views_communicatedBi_q0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln1342_fu_382_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_221_p4 <= i_0_reg_217;

    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln1342_fu_382_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1342_fu_382_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= add_ln1349_fu_575_p2;
    ap_return_1 <= select_ln1350_fu_580_p3;
    ap_return_2 <= select_ln1350_1_fu_587_p3;
    ap_return_3 <= select_ln1350_2_fu_594_p3;

    grp_fu_228_p1_assign_proc : process(ap_CS_fsm_state2, zext_ln54_11_fu_312_p1, zext_ln54_11_reg_724, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_228_p1 <= zext_ln54_11_reg_724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_228_p1 <= zext_ln54_11_fu_312_p1;
        else 
            grp_fu_228_p1 <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_228_p2 <= std_logic_vector(shift_right(unsigned(rand_tape_q0),to_integer(unsigned('0' & grp_fu_228_p1(8-1 downto 0)))));
    grp_fu_641_p1 <= ap_const_lv17_4B(8 - 1 downto 0);
    i_fu_388_p2 <= std_logic_vector(unsigned(i_0_reg_217) + unsigned(ap_const_lv2_1));
    icmp_ln1342_fu_382_p2 <= "1" when (i_0_reg_217 = ap_const_lv2_3) else "0";
    icmp_ln1343_fu_420_p2 <= "0" when (i_fu_388_p2 = ap_const_lv2_3) else "1";
    lshr_ln54_6_fu_358_p2 <= std_logic_vector(shift_right(unsigned(rand_tape_q1),to_integer(unsigned('0' & zext_ln54_11_reg_724(8-1 downto 0)))));
    lshr_ln_fu_233_p4 <= rand_pos_read(31 downto 3);
    r_0_fu_317_p1 <= grp_fu_228_p2(1 - 1 downto 0);
    r_1_fu_350_p1 <= grp_fu_228_p2(1 - 1 downto 0);
    r_2_fu_363_p1 <= lshr_ln54_6_fu_358_p2(1 - 1 downto 0);

    rand_tape_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln54_fu_243_p1, sext_ln54_fu_292_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rand_tape_address0 <= sext_ln54_fu_292_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            rand_tape_address0 <= zext_ln54_fu_243_p1(9 - 1 downto 0);
        else 
            rand_tape_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    rand_tape_address1 <= sext_ln54_1_fu_302_p1(9 - 1 downto 0);

    rand_tape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            rand_tape_ce0 <= ap_const_logic_1;
        else 
            rand_tape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rand_tape_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rand_tape_ce1 <= ap_const_logic_1;
        else 
            rand_tape_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1343_fu_432_p3 <= 
        i_fu_388_p2 when (icmp_ln1343_fu_420_p2(0) = '1') else 
        xor_ln1343_3_fu_426_p2;
    select_ln1350_1_fu_587_p3 <= 
        out5_02_fu_94 when (write_flag3_0_fu_102(0) = '1') else 
        out_1_read;
    select_ln1350_2_fu_594_p3 <= 
        out6_01_fu_82 when (write_flag6_0_fu_90(0) = '1') else 
        out_2_read;
    select_ln1350_fu_580_p3 <= 
        out_03_fu_98 when (write_flag_0_fu_86(0) = '1') else 
        out_0_read;
        sext_ln54_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_1_fu_297_p2),64));

        sext_ln54_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_287_p2),64));

        sext_ln66_2_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_641_p3),64));

        sext_ln66_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln66_fu_337_p2),12));

    shl_ln66_6_fu_625_p2 <= std_logic_vector(shift_left(unsigned(xor_ln1343_4_reg_829),to_integer(unsigned('0' & zext_ln54_11_reg_724(8-1 downto 0)))));
    shl_ln66_fu_371_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln54_11_reg_724(8-1 downto 0)))));
    sub_ln66_fu_337_p2 <= std_logic_vector(unsigned(zext_ln66_36_fu_333_p1) - unsigned(zext_ln66_fu_321_p1));
    tmp_18_fu_325_p3 <= (views_communicatedBits_offset & ap_const_lv2_0);
    trunc_ln54_fu_268_p1 <= rand_pos_read(3 - 1 downto 0);
    views_communicatedBi_address0 <= views_communicatedBi_3_reg_824;

    views_communicatedBi_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            views_communicatedBi_ce0 <= ap_const_logic_1;
        else 
            views_communicatedBi_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    views_communicatedBi_d0 <= (shl_ln66_6_fu_625_p2 or and_ln66_fu_629_p2);

    views_communicatedBi_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            views_communicatedBi_we0 <= ap_const_logic_1;
        else 
            views_communicatedBi_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1343_1_fu_509_p2 <= (tmp_4_fu_494_p5 xor and_ln1343_1_fu_473_p2);
    xor_ln1343_2_fu_515_p2 <= (xor_ln1343_1_fu_509_p2 xor and_ln1343_fu_449_p2);
    xor_ln1343_3_fu_426_p2 <= (i_0_reg_217 xor ap_const_lv2_2);
    xor_ln1343_4_fu_521_p2 <= (xor_ln1343_fu_503_p2 xor xor_ln1343_2_fu_515_p2);
    xor_ln1343_fu_503_p2 <= (tmp_3_fu_485_p5 xor and_ln1343_2_fu_479_p2);
    xor_ln54_fu_307_p2 <= (trunc_ln54_reg_709 xor ap_const_lv3_7);
    xor_ln66_fu_376_p2 <= (shl_ln66_fu_371_p2 xor ap_const_lv8_FF);
    zext_ln54_11_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_307_p2),8));
    zext_ln54_12_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_732),8));
    zext_ln54_13_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_fu_350_p1),8));
    zext_ln54_14_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_2_fu_363_p1),8));
    zext_ln54_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_233_p4),64));
    zext_ln66_36_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_325_p3),11));
    zext_ln66_37_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_217),12));
    zext_ln66_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(views_communicatedBits_offset),11));
end behav;
