// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mpc_AND_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_0_read,
        in1_1_read,
        in1_2_read,
        in2_0_read,
        in2_1_read,
        in2_2_read,
        out_0_read,
        out_1_read,
        out_2_read,
        rand_tape_address0,
        rand_tape_ce0,
        rand_tape_q0,
        rand_tape_address1,
        rand_tape_ce1,
        rand_tape_q1,
        rand_pos_read,
        views_communicatedBi_address0,
        views_communicatedBi_ce0,
        views_communicatedBi_we0,
        views_communicatedBi_d0,
        views_communicatedBi_q0,
        views_communicatedBits_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in1_0_read;
input  [7:0] in1_1_read;
input  [7:0] in1_2_read;
input  [7:0] in2_0_read;
input  [7:0] in2_1_read;
input  [7:0] in2_2_read;
input  [7:0] out_0_read;
input  [7:0] out_1_read;
input  [7:0] out_2_read;
output  [8:0] rand_tape_address0;
output   rand_tape_ce0;
input  [7:0] rand_tape_q0;
output  [8:0] rand_tape_address1;
output   rand_tape_ce1;
input  [7:0] rand_tape_q1;
input  [31:0] rand_pos_read;
output  [15:0] views_communicatedBi_address0;
output   views_communicatedBi_ce0;
output   views_communicatedBi_we0;
output  [7:0] views_communicatedBi_d0;
input  [7:0] views_communicatedBi_q0;
input  [7:0] views_communicatedBits_offset;
output  [31:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] rand_tape_address0;
reg rand_tape_ce0;
reg rand_tape_ce1;
reg views_communicatedBi_ce0;
reg views_communicatedBi_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [16:0] zext_ln54_cast1_reg_693;
reg   [9:0] zext_ln54_cast_reg_698;
wire   [2:0] trunc_ln54_fu_268_p1;
reg   [2:0] trunc_ln54_reg_709;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln54_11_fu_312_p1;
reg   [7:0] zext_ln54_11_reg_724;
wire   [0:0] r_0_fu_317_p1;
reg   [0:0] r_0_reg_732;
wire    ap_CS_fsm_state3;
wire  signed [11:0] sext_ln66_fu_343_p1;
reg  signed [11:0] sext_ln66_reg_788;
wire   [7:0] zext_ln54_12_fu_347_p1;
reg   [7:0] zext_ln54_12_reg_793;
wire   [7:0] zext_ln54_13_fu_354_p1;
reg   [7:0] zext_ln54_13_reg_799;
wire   [7:0] zext_ln54_14_fu_367_p1;
reg   [7:0] zext_ln54_14_reg_805;
wire   [7:0] xor_ln66_fu_376_p2;
reg   [7:0] xor_ln66_reg_811;
wire   [1:0] i_fu_388_p2;
reg   [1:0] i_reg_819;
wire    ap_CS_fsm_state4;
reg   [15:0] views_communicatedBi_3_reg_824;
wire   [0:0] icmp_ln1342_fu_382_p2;
wire   [7:0] xor_ln1343_4_fu_521_p2;
reg   [7:0] xor_ln1343_4_reg_829;
wire   [1:0] ap_phi_mux_i_0_phi_fu_221_p4;
reg   [1:0] i_0_reg_217;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln54_fu_243_p1;
wire  signed [63:0] sext_ln54_fu_292_p1;
wire  signed [63:0] sext_ln54_1_fu_302_p1;
wire  signed [63:0] sext_ln66_2_fu_407_p1;
reg   [7:0] out6_01_fu_82;
reg   [0:0] write_flag_0_fu_86;
reg   [0:0] write_flag6_0_fu_90;
reg   [7:0] out5_02_fu_94;
reg   [7:0] out_03_fu_98;
reg   [0:0] write_flag3_0_fu_102;
wire    ap_CS_fsm_state5;
reg   [7:0] grp_fu_228_p1;
wire   [28:0] lshr_ln_fu_233_p4;
wire   [9:0] add_ln54_fu_287_p2;
wire   [9:0] add_ln54_1_fu_297_p2;
wire   [2:0] xor_ln54_fu_307_p2;
wire   [7:0] grp_fu_228_p2;
wire   [9:0] tmp_18_fu_325_p3;
wire   [10:0] zext_ln66_36_fu_333_p1;
wire   [10:0] zext_ln66_fu_321_p1;
wire   [10:0] sub_ln66_fu_337_p2;
wire   [0:0] r_1_fu_350_p1;
wire   [7:0] lshr_ln54_6_fu_358_p2;
wire   [0:0] r_2_fu_363_p1;
wire   [7:0] shl_ln66_fu_371_p2;
wire   [11:0] zext_ln66_37_fu_394_p1;
wire  signed [11:0] add_ln66_fu_398_p2;
wire  signed [16:0] grp_fu_641_p3;
wire   [0:0] icmp_ln1343_fu_420_p2;
wire   [1:0] xor_ln1343_3_fu_426_p2;
wire   [1:0] select_ln1343_fu_432_p3;
wire   [7:0] tmp_s_fu_440_p5;
wire   [7:0] tmp_fu_411_p5;
wire   [7:0] tmp_2_fu_464_p5;
wire   [7:0] tmp_1_fu_455_p5;
wire   [7:0] and_ln1343_2_fu_479_p2;
wire   [7:0] tmp_3_fu_485_p5;
wire   [7:0] and_ln1343_1_fu_473_p2;
wire   [7:0] tmp_4_fu_494_p5;
wire   [7:0] xor_ln1343_1_fu_509_p2;
wire   [7:0] and_ln1343_fu_449_p2;
wire   [7:0] xor_ln1343_2_fu_515_p2;
wire   [7:0] xor_ln1343_fu_503_p2;
wire   [31:0] add_ln1349_fu_575_p2;
wire   [7:0] select_ln1350_fu_580_p3;
wire   [7:0] select_ln1350_1_fu_587_p3;
wire   [7:0] select_ln1350_2_fu_594_p3;
wire   [7:0] and_ln66_fu_629_p2;
wire   [7:0] shl_ln66_6_fu_625_p2;
wire   [7:0] grp_fu_641_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

crypto_sign_mux_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
crypto_sign_mux_3VhK_U94(
    .din0(in1_0_read),
    .din1(in1_1_read),
    .din2(in1_2_read),
    .din3(i_0_reg_217),
    .dout(tmp_fu_411_p5)
);

crypto_sign_mux_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
crypto_sign_mux_3VhK_U95(
    .din0(in2_0_read),
    .din1(in2_1_read),
    .din2(in2_2_read),
    .din3(select_ln1343_fu_432_p3),
    .dout(tmp_s_fu_440_p5)
);

crypto_sign_mux_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
crypto_sign_mux_3VhK_U96(
    .din0(in1_0_read),
    .din1(in1_1_read),
    .din2(in1_2_read),
    .din3(select_ln1343_fu_432_p3),
    .dout(tmp_1_fu_455_p5)
);

crypto_sign_mux_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
crypto_sign_mux_3VhK_U97(
    .din0(in2_0_read),
    .din1(in2_1_read),
    .din2(in2_2_read),
    .din3(i_0_reg_217),
    .dout(tmp_2_fu_464_p5)
);

crypto_sign_mux_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
crypto_sign_mux_3VhK_U98(
    .din0(zext_ln54_12_reg_793),
    .din1(zext_ln54_13_reg_799),
    .din2(zext_ln54_14_reg_805),
    .din3(i_0_reg_217),
    .dout(tmp_3_fu_485_p5)
);

crypto_sign_mux_3VhK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
crypto_sign_mux_3VhK_U99(
    .din0(zext_ln54_12_reg_793),
    .din1(zext_ln54_13_reg_799),
    .din2(zext_ln54_14_reg_805),
    .din3(select_ln1343_fu_432_p3),
    .dout(tmp_4_fu_494_p5)
);

crypto_sign_mac_mWhU #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
crypto_sign_mac_mWhU_U100(
    .din0(add_ln66_fu_398_p2),
    .din1(grp_fu_641_p1),
    .din2(zext_ln54_cast1_reg_693),
    .dout(grp_fu_641_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_reg_217 <= i_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_217 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_0_phi_fu_221_p4 == 2'd1) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        write_flag3_0_fu_102 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag3_0_fu_102 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_i_0_phi_fu_221_p4 == 2'd1) & ~(ap_phi_mux_i_0_phi_fu_221_p4 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        write_flag6_0_fu_90 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag6_0_fu_90 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_0_phi_fu_221_p4 == 2'd0) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        write_flag_0_fu_86 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag_0_fu_86 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_819 <= i_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_0_phi_fu_221_p4 == 2'd1) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        out5_02_fu_94 <= xor_ln1343_4_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_i_0_phi_fu_221_p4 == 2'd1) & ~(ap_phi_mux_i_0_phi_fu_221_p4 == 2'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        out6_01_fu_82 <= xor_ln1343_4_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_0_phi_fu_221_p4 == 2'd0) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        out_03_fu_98 <= xor_ln1343_4_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_0_reg_732 <= r_0_fu_317_p1;
        zext_ln54_11_reg_724[2 : 0] <= zext_ln54_11_fu_312_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln66_reg_788 <= sext_ln66_fu_343_p1;
        xor_ln66_reg_811 <= xor_ln66_fu_376_p2;
        zext_ln54_12_reg_793[0] <= zext_ln54_12_fu_347_p1[0];
        zext_ln54_13_reg_799[0] <= zext_ln54_13_fu_354_p1[0];
        zext_ln54_14_reg_805[0] <= zext_ln54_14_fu_367_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln54_reg_709 <= trunc_ln54_fu_268_p1;
        zext_ln54_cast1_reg_693 <= {{rand_pos_read[19:3]}};
        zext_ln54_cast_reg_698 <= {{rand_pos_read[12:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1342_fu_382_p2 == 1'd0))) begin
        views_communicatedBi_3_reg_824 <= sext_ln66_2_fu_407_p1;
        xor_ln1343_4_reg_829 <= xor_ln1343_4_fu_521_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln1342_fu_382_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1342_fu_382_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_228_p1 = zext_ln54_11_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_228_p1 = zext_ln54_11_fu_312_p1;
    end else begin
        grp_fu_228_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rand_tape_address0 = sext_ln54_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rand_tape_address0 = zext_ln54_fu_243_p1;
    end else begin
        rand_tape_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        rand_tape_ce0 = 1'b1;
    end else begin
        rand_tape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rand_tape_ce1 = 1'b1;
    end else begin
        rand_tape_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        views_communicatedBi_ce0 = 1'b1;
    end else begin
        views_communicatedBi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        views_communicatedBi_we0 = 1'b1;
    end else begin
        views_communicatedBi_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1342_fu_382_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1349_fu_575_p2 = (rand_pos_read + 32'd1);

assign add_ln54_1_fu_297_p2 = (10'd332 + zext_ln54_cast_reg_698);

assign add_ln54_fu_287_p2 = (10'd166 + zext_ln54_cast_reg_698);

assign add_ln66_fu_398_p2 = ($signed(zext_ln66_37_fu_394_p1) + $signed(sext_ln66_reg_788));

assign and_ln1343_1_fu_473_p2 = (tmp_2_fu_464_p5 & tmp_1_fu_455_p5);

assign and_ln1343_2_fu_479_p2 = (tmp_fu_411_p5 & tmp_2_fu_464_p5);

assign and_ln1343_fu_449_p2 = (tmp_s_fu_440_p5 & tmp_fu_411_p5);

assign and_ln66_fu_629_p2 = (xor_ln66_reg_811 & views_communicatedBi_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_phi_mux_i_0_phi_fu_221_p4 = i_0_reg_217;

assign ap_return_0 = add_ln1349_fu_575_p2;

assign ap_return_1 = select_ln1350_fu_580_p3;

assign ap_return_2 = select_ln1350_1_fu_587_p3;

assign ap_return_3 = select_ln1350_2_fu_594_p3;

assign grp_fu_228_p2 = rand_tape_q0 >> grp_fu_228_p1;

assign grp_fu_641_p1 = 17'd75;

assign i_fu_388_p2 = (i_0_reg_217 + 2'd1);

assign icmp_ln1342_fu_382_p2 = ((i_0_reg_217 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln1343_fu_420_p2 = ((i_fu_388_p2 != 2'd3) ? 1'b1 : 1'b0);

assign lshr_ln54_6_fu_358_p2 = rand_tape_q1 >> zext_ln54_11_reg_724;

assign lshr_ln_fu_233_p4 = {{rand_pos_read[31:3]}};

assign r_0_fu_317_p1 = grp_fu_228_p2[0:0];

assign r_1_fu_350_p1 = grp_fu_228_p2[0:0];

assign r_2_fu_363_p1 = lshr_ln54_6_fu_358_p2[0:0];

assign rand_tape_address1 = sext_ln54_1_fu_302_p1;

assign select_ln1343_fu_432_p3 = ((icmp_ln1343_fu_420_p2[0:0] === 1'b1) ? i_fu_388_p2 : xor_ln1343_3_fu_426_p2);

assign select_ln1350_1_fu_587_p3 = ((write_flag3_0_fu_102[0:0] === 1'b1) ? out5_02_fu_94 : out_1_read);

assign select_ln1350_2_fu_594_p3 = ((write_flag6_0_fu_90[0:0] === 1'b1) ? out6_01_fu_82 : out_2_read);

assign select_ln1350_fu_580_p3 = ((write_flag_0_fu_86[0:0] === 1'b1) ? out_03_fu_98 : out_0_read);

assign sext_ln54_1_fu_302_p1 = $signed(add_ln54_1_fu_297_p2);

assign sext_ln54_fu_292_p1 = $signed(add_ln54_fu_287_p2);

assign sext_ln66_2_fu_407_p1 = grp_fu_641_p3;

assign sext_ln66_fu_343_p1 = $signed(sub_ln66_fu_337_p2);

assign shl_ln66_6_fu_625_p2 = xor_ln1343_4_reg_829 << zext_ln54_11_reg_724;

assign shl_ln66_fu_371_p2 = 8'd1 << zext_ln54_11_reg_724;

assign sub_ln66_fu_337_p2 = (zext_ln66_36_fu_333_p1 - zext_ln66_fu_321_p1);

assign tmp_18_fu_325_p3 = {{views_communicatedBits_offset}, {2'd0}};

assign trunc_ln54_fu_268_p1 = rand_pos_read[2:0];

assign views_communicatedBi_address0 = views_communicatedBi_3_reg_824;

assign views_communicatedBi_d0 = (shl_ln66_6_fu_625_p2 | and_ln66_fu_629_p2);

assign xor_ln1343_1_fu_509_p2 = (tmp_4_fu_494_p5 ^ and_ln1343_1_fu_473_p2);

assign xor_ln1343_2_fu_515_p2 = (xor_ln1343_1_fu_509_p2 ^ and_ln1343_fu_449_p2);

assign xor_ln1343_3_fu_426_p2 = (i_0_reg_217 ^ 2'd2);

assign xor_ln1343_4_fu_521_p2 = (xor_ln1343_fu_503_p2 ^ xor_ln1343_2_fu_515_p2);

assign xor_ln1343_fu_503_p2 = (tmp_3_fu_485_p5 ^ and_ln1343_2_fu_479_p2);

assign xor_ln54_fu_307_p2 = (trunc_ln54_reg_709 ^ 3'd7);

assign xor_ln66_fu_376_p2 = (shl_ln66_fu_371_p2 ^ 8'd255);

assign zext_ln54_11_fu_312_p1 = xor_ln54_fu_307_p2;

assign zext_ln54_12_fu_347_p1 = r_0_reg_732;

assign zext_ln54_13_fu_354_p1 = r_1_fu_350_p1;

assign zext_ln54_14_fu_367_p1 = r_2_fu_363_p1;

assign zext_ln54_fu_243_p1 = lshr_ln_fu_233_p4;

assign zext_ln66_36_fu_333_p1 = tmp_18_fu_325_p3;

assign zext_ln66_37_fu_394_p1 = i_0_reg_217;

assign zext_ln66_fu_321_p1 = views_communicatedBits_offset;

always @ (posedge ap_clk) begin
    zext_ln54_11_reg_724[7:3] <= 5'b00000;
    zext_ln54_12_reg_793[7:1] <= 7'b0000000;
    zext_ln54_13_reg_799[7:1] <= 7'b0000000;
    zext_ln54_14_reg_805[7:1] <= 7'b0000000;
end

endmodule //mpc_AND_2
