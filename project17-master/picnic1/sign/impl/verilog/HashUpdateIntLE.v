// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module HashUpdateIntLE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_sponge_state_address0,
        ctx_sponge_state_ce0,
        ctx_sponge_state_we0,
        ctx_sponge_state_d0,
        ctx_sponge_state_q0,
        ctx_sponge_byteIOInd,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_pp1_stage0 = 21'd1024;
parameter    ap_ST_fsm_pp1_stage1 = 21'd2048;
parameter    ap_ST_fsm_pp1_stage2 = 21'd4096;
parameter    ap_ST_fsm_state15 = 21'd8192;
parameter    ap_ST_fsm_state16 = 21'd16384;
parameter    ap_ST_fsm_state17 = 21'd32768;
parameter    ap_ST_fsm_state18 = 21'd65536;
parameter    ap_ST_fsm_state19 = 21'd131072;
parameter    ap_ST_fsm_state20 = 21'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 21'd524288;
parameter    ap_ST_fsm_state24 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] ctx_sponge_state_address0;
output   ctx_sponge_state_ce0;
output   ctx_sponge_state_we0;
output  [7:0] ctx_sponge_state_d0;
input  [7:0] ctx_sponge_state_q0;
input  [31:0] ctx_sponge_byteIOInd;
input  [8:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ctx_sponge_state_address0;
reg ctx_sponge_state_ce0;
reg ctx_sponge_state_we0;
reg[7:0] ctx_sponge_state_d0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] KeccakRhoOffsets_address0;
reg    KeccakRhoOffsets_ce0;
wire   [5:0] KeccakRhoOffsets_q0;
wire   [4:0] KeccakRoundConstants_address0;
reg    KeccakRoundConstants_ce0;
wire   [63:0] KeccakRoundConstants_q0;
reg   [4:0] indvar_flatten_reg_296;
reg   [2:0] x_0_i_reg_307;
reg   [2:0] y_0_i_reg_319;
reg   [7:0] indvar_flatten7_reg_330;
reg   [4:0] i_0_i2_reg_341;
reg   [3:0] j_0_i5_reg_352;
wire   [31:0] select_ln226_fu_434_p3;
reg   [31:0] select_ln226_reg_941;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln194_fu_396_p2;
wire   [63:0] zext_ln231_fu_442_p1;
reg   [63:0] zext_ln231_reg_947;
wire   [32:0] i_fu_450_p2;
reg   [32:0] i_reg_952;
wire   [0:0] trunc_ln234_fu_456_p1;
reg   [0:0] trunc_ln234_reg_957;
wire   [31:0] loop_fu_465_p2;
reg   [31:0] loop_reg_965;
wire    ap_CS_fsm_state3;
reg   [7:0] ctx_sponge_state_add_reg_970;
wire   [0:0] icmp_ln233_fu_460_p2;
wire   [0:0] icmp_ln239_fu_487_p2;
reg   [0:0] icmp_ln239_reg_975;
wire   [0:0] icmp_ln269_fu_536_p2;
wire    ap_CS_fsm_state5;
wire   [4:0] i_33_fu_542_p2;
reg   [4:0] i_33_reg_983;
reg   [4:0] stateAsWords_addr_13_reg_988;
wire   [7:0] shl_ln_fu_553_p3;
reg   [7:0] shl_ln_reg_993;
wire   [3:0] j_fu_567_p2;
reg   [3:0] j_reg_1001;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln271_fu_561_p2;
wire   [0:0] icmp_ln293_fu_620_p2;
wire    ap_CS_fsm_state9;
wire   [4:0] i_35_fu_626_p2;
reg   [4:0] i_35_reg_1015;
wire   [0:0] icmp_ln352_fu_632_p2;
reg   [0:0] icmp_ln352_reg_1020;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [4:0] add_ln352_fu_638_p2;
reg   [4:0] add_ln352_reg_1024;
reg    ap_enable_reg_pp1_iter0;
wire   [2:0] x_11_fu_644_p2;
reg   [2:0] x_11_reg_1029;
wire   [0:0] icmp_ln35211_fu_650_p2;
reg   [0:0] icmp_ln35211_reg_1034;
wire   [2:0] select_ln353_21_fu_656_p3;
reg   [2:0] select_ln353_21_reg_1039;
wire   [2:0] select_ln353_22_fu_664_p3;
reg   [2:0] select_ln353_22_reg_1047;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state12_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
wire   [0:0] icmp_ln353_fu_745_p2;
reg   [0:0] icmp_ln353_reg_1057;
reg   [4:0] stateAsWords_addr_15_reg_1062;
wire   [63:0] select_ln353_fu_787_p3;
reg   [63:0] select_ln353_reg_1068;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state13_pp1_stage2_iter0;
wire    ap_block_pp1_stage2_11001;
wire   [2:0] y_fu_794_p2;
reg   [2:0] y_reg_1073;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln280_fu_811_p2;
reg   [0:0] icmp_ln280_reg_1083;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_state23_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln280_reg_1083_pp2_iter1_reg;
wire   [7:0] add_ln280_fu_817_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [3:0] select_ln280_fu_835_p3;
reg   [3:0] select_ln280_reg_1092;
reg   [3:0] select_ln280_reg_1092_pp2_iter1_reg;
wire   [4:0] select_ln280_6_fu_843_p3;
reg   [4:0] select_ln280_6_reg_1097;
reg   [4:0] select_ln280_6_reg_1097_pp2_iter1_reg;
wire   [2:0] trunc_ln282_fu_856_p1;
reg   [2:0] trunc_ln282_reg_1108;
wire   [3:0] j_13_fu_860_p2;
wire   [7:0] trunc_ln282_6_fu_883_p1;
reg   [7:0] trunc_ln282_6_reg_1118;
wire   [63:0] p_2_rec_i_i_i_fu_913_p2;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state10;
wire    grp_theta_fu_368_ap_ready;
wire    grp_theta_fu_368_ap_done;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state21;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg   [4:0] stateAsWords_address0;
reg    stateAsWords_ce0;
reg    stateAsWords_we0;
reg   [63:0] stateAsWords_d0;
wire   [63:0] stateAsWords_q0;
reg   [4:0] stateAsWords_address1;
reg    stateAsWords_ce1;
reg    stateAsWords_we1;
reg   [63:0] stateAsWords_d1;
wire   [63:0] stateAsWords_q1;
wire    grp_pi_fu_363_ap_start;
wire    grp_pi_fu_363_ap_done;
wire    grp_pi_fu_363_ap_idle;
wire    grp_pi_fu_363_ap_ready;
wire   [4:0] grp_pi_fu_363_A_address0;
wire    grp_pi_fu_363_A_ce0;
wire    grp_pi_fu_363_A_we0;
wire   [63:0] grp_pi_fu_363_A_d0;
wire   [4:0] grp_pi_fu_363_A_address1;
wire    grp_pi_fu_363_A_ce1;
wire    grp_pi_fu_363_A_we1;
wire   [63:0] grp_pi_fu_363_A_d1;
wire    grp_theta_fu_368_ap_start;
wire    grp_theta_fu_368_ap_idle;
wire   [4:0] grp_theta_fu_368_A_address0;
wire    grp_theta_fu_368_A_ce0;
wire   [4:0] grp_theta_fu_368_A_address1;
wire    grp_theta_fu_368_A_ce1;
wire    grp_theta_fu_368_A_we1;
wire   [63:0] grp_theta_fu_368_A_d1;
wire    grp_chi_fu_373_ap_start;
wire    grp_chi_fu_373_ap_done;
wire    grp_chi_fu_373_ap_idle;
wire    grp_chi_fu_373_ap_ready;
wire   [4:0] grp_chi_fu_373_A_address0;
wire    grp_chi_fu_373_A_ce0;
wire   [4:0] grp_chi_fu_373_A_address1;
wire    grp_chi_fu_373_A_ce1;
wire    grp_chi_fu_373_A_we1;
wire   [63:0] grp_chi_fu_373_A_d1;
reg   [32:0] i_0_i_i_i_reg_226;
reg   [63:0] p_01_rec_i_i_i_reg_237;
reg   [31:0] loop_1_i_i_i_reg_249;
wire    ap_CS_fsm_state4;
reg   [4:0] i_0_i_reg_261;
wire    ap_CS_fsm_state8;
reg   [3:0] j_0_i_reg_272;
wire    ap_CS_fsm_state7;
reg   [4:0] indexRound_assign_reg_284;
wire    ap_CS_fsm_state20;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_300_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_x_0_i_phi_fu_311_p4;
reg   [2:0] ap_phi_mux_y_0_i_phi_fu_323_p4;
reg   [4:0] ap_phi_mux_i_0_i2_phi_fu_345_p4;
wire    ap_block_pp2_stage0;
reg    grp_pi_fu_363_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_theta_fu_368_ap_start_reg;
reg    grp_chi_fu_373_ap_start_reg;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln149_fu_477_p1;
wire   [63:0] zext_ln270_fu_548_p1;
wire   [63:0] zext_ln272_fu_582_p1;
wire   [63:0] zext_ln353_23_fu_739_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln382_fu_799_p1;
wire   [63:0] zext_ln280_fu_851_p1;
wire   [63:0] zext_ln282_5_fu_903_p1;
reg   [31:0] ctx_sponge_byteIOInd_42_fu_112;
wire   [31:0] add_ln238_fu_482_p2;
wire   [7:0] xor_ln149_fu_529_p2;
wire   [63:0] or_ln272_fu_613_p2;
wire   [63:0] xor_ln382_fu_804_p2;
wire   [31:0] tmp_fu_386_p4;
wire   [1:0] trunc_ln225_fu_402_p1;
wire   [1:0] partialBlock_fu_406_p2;
wire   [31:0] zext_ln225_fu_412_p1;
wire   [31:0] add_ln226_fu_416_p2;
wire   [0:0] icmp_ln226_fu_422_p2;
wire   [31:0] partialBlock_32_fu_428_p2;
wire   [32:0] zext_ln231_7_fu_446_p1;
wire   [31:0] add_ln234_fu_471_p2;
wire   [0:0] trunc_ln234_7_fu_498_p1;
wire   [0:0] tmp_63_fu_507_p3;
wire   [0:0] xor_ln234_fu_502_p2;
wire   [7:0] zext_ln234_fu_514_p1;
wire   [7:0] trunc_ln234_8_fu_518_p1;
wire   [7:0] select_ln234_fu_521_p3;
wire   [7:0] zext_ln271_fu_573_p1;
wire   [7:0] add_ln272_fu_577_p2;
wire   [2:0] trunc_ln272_fu_591_p1;
wire   [5:0] shl_ln272_s_fu_595_p3;
wire   [63:0] zext_ln272_7_fu_587_p1;
wire   [63:0] zext_ln272_8_fu_603_p1;
wire   [63:0] shl_ln272_fu_607_p2;
wire   [0:0] icmp_ln353_11_fu_670_p2;
wire   [2:0] add_ln353_12_fu_676_p2;
wire   [2:0] select_ln353_23_fu_682_p3;
wire   [0:0] icmp_ln353_12_fu_694_p2;
wire   [2:0] add_ln353_13_fu_699_p2;
wire   [2:0] select_ln353_24_fu_704_p3;
wire   [3:0] zext_ln353_fu_690_p1;
wire   [3:0] zext_ln353_21_fu_711_p1;
wire   [3:0] add_ln353_fu_723_p2;
wire   [4:0] shl_ln6_fu_715_p3;
wire   [4:0] zext_ln353_22_fu_729_p1;
wire   [4:0] add_ln353_6_fu_733_p2;
wire    ap_block_pp1_stage2;
wire   [63:0] zext_ln353_25_fu_755_p1;
wire   [6:0] zext_ln353_24_fu_751_p1;
wire   [6:0] sub_ln353_fu_765_p2;
wire   [63:0] zext_ln353_26_fu_771_p1;
wire   [63:0] lshr_ln353_fu_775_p2;
wire   [63:0] shl_ln353_fu_759_p2;
wire   [63:0] xor_ln353_fu_781_p2;
wire   [0:0] icmp_ln281_fu_829_p2;
wire   [4:0] i_34_fu_823_p2;
wire   [5:0] shl_ln282_6_fu_866_p3;
wire   [63:0] zext_ln282_fu_873_p1;
wire   [63:0] lshr_ln282_fu_877_p2;
wire   [7:0] zext_ln281_fu_894_p1;
wire   [7:0] shl_ln282_mid2_fu_887_p3;
wire   [7:0] add_ln282_fu_897_p2;
reg   [20:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 grp_pi_fu_363_ap_start_reg = 1'b0;
#0 grp_theta_fu_368_ap_start_reg = 1'b0;
#0 grp_chi_fu_373_ap_start_reg = 1'b0;
end

KeccakP1600OnWordeOg #(
    .DataWidth( 6 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
KeccakRhoOffsets_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(KeccakRhoOffsets_address0),
    .ce0(KeccakRhoOffsets_ce0),
    .q0(KeccakRhoOffsets_q0)
);

KeccakP1600OnWordfYi #(
    .DataWidth( 64 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
KeccakRoundConstants_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(KeccakRoundConstants_address0),
    .ce0(KeccakRoundConstants_ce0),
    .q0(KeccakRoundConstants_q0)
);

pi_tempA #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
stateAsWords_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stateAsWords_address0),
    .ce0(stateAsWords_ce0),
    .we0(stateAsWords_we0),
    .d0(stateAsWords_d0),
    .q0(stateAsWords_q0),
    .address1(stateAsWords_address1),
    .ce1(stateAsWords_ce1),
    .we1(stateAsWords_we1),
    .d1(stateAsWords_d1),
    .q1(stateAsWords_q1)
);

pi grp_pi_fu_363(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pi_fu_363_ap_start),
    .ap_done(grp_pi_fu_363_ap_done),
    .ap_idle(grp_pi_fu_363_ap_idle),
    .ap_ready(grp_pi_fu_363_ap_ready),
    .A_address0(grp_pi_fu_363_A_address0),
    .A_ce0(grp_pi_fu_363_A_ce0),
    .A_we0(grp_pi_fu_363_A_we0),
    .A_d0(grp_pi_fu_363_A_d0),
    .A_q0(stateAsWords_q0),
    .A_address1(grp_pi_fu_363_A_address1),
    .A_ce1(grp_pi_fu_363_A_ce1),
    .A_we1(grp_pi_fu_363_A_we1),
    .A_d1(grp_pi_fu_363_A_d1),
    .A_q1(stateAsWords_q1)
);

theta grp_theta_fu_368(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_theta_fu_368_ap_start),
    .ap_done(grp_theta_fu_368_ap_done),
    .ap_idle(grp_theta_fu_368_ap_idle),
    .ap_ready(grp_theta_fu_368_ap_ready),
    .A_address0(grp_theta_fu_368_A_address0),
    .A_ce0(grp_theta_fu_368_A_ce0),
    .A_q0(stateAsWords_q0),
    .A_address1(grp_theta_fu_368_A_address1),
    .A_ce1(grp_theta_fu_368_A_ce1),
    .A_we1(grp_theta_fu_368_A_we1),
    .A_d1(grp_theta_fu_368_A_d1),
    .A_q1(stateAsWords_q1)
);

chi grp_chi_fu_373(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_chi_fu_373_ap_start),
    .ap_done(grp_chi_fu_373_ap_done),
    .ap_idle(grp_chi_fu_373_ap_idle),
    .ap_ready(grp_chi_fu_373_ap_ready),
    .A_address0(grp_chi_fu_373_A_address0),
    .A_ce0(grp_chi_fu_373_A_ce0),
    .A_q0(stateAsWords_q0),
    .A_address1(grp_chi_fu_373_A_address1),
    .A_ce1(grp_chi_fu_373_A_ce1),
    .A_we1(grp_chi_fu_373_A_we1),
    .A_d1(grp_chi_fu_373_A_d1),
    .A_q1(stateAsWords_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_theta_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((grp_theta_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln293_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state21)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((icmp_ln293_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_chi_fu_373_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_chi_fu_373_ap_start_reg <= 1'b1;
        end else if ((grp_chi_fu_373_ap_ready == 1'b1)) begin
            grp_chi_fu_373_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pi_fu_363_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_pi_fu_363_ap_start_reg <= 1'b1;
        end else if ((grp_pi_fu_363_ap_ready == 1'b1)) begin
            grp_pi_fu_363_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_theta_fu_368_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln293_fu_620_p2 == 1'd0))) begin
            grp_theta_fu_368_ap_start_reg <= 1'b1;
        end else if ((grp_theta_fu_368_ap_ready == 1'b1)) begin
            grp_theta_fu_368_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln239_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
        ctx_sponge_byteIOInd_42_fu_112 <= 32'd0;
    end else if (((icmp_ln233_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln239_fu_487_p2 == 1'd0))) begin
        ctx_sponge_byteIOInd_42_fu_112 <= add_ln238_fu_482_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ctx_sponge_byteIOInd_42_fu_112 <= ctx_sponge_byteIOInd;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_0_i2_reg_341 <= 5'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_reg_1083 == 1'd0))) begin
        i_0_i2_reg_341 <= select_ln280_6_reg_1097;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_0_i_i_i_reg_226 <= i_reg_952;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_i_reg_226 <= 33'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i_reg_261 <= i_33_reg_983;
    end else if (((icmp_ln239_fu_487_p2 == 1'd1) & (icmp_ln233_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i_reg_261 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        indexRound_assign_reg_284 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        indexRound_assign_reg_284 <= i_35_reg_1015;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        indvar_flatten7_reg_330 <= 8'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_fu_811_p2 == 1'd0))) begin
        indvar_flatten7_reg_330 <= add_ln280_fu_817_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln352_reg_1020 == 1'd0))) begin
        indvar_flatten_reg_296 <= add_ln352_reg_1024;
    end else if (((grp_theta_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        indvar_flatten_reg_296 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        j_0_i5_reg_352 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_fu_811_p2 == 1'd0))) begin
        j_0_i5_reg_352 <= j_13_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_i_reg_272 <= j_reg_1001;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln269_fu_536_p2 == 1'd0))) begin
        j_0_i_reg_272 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        loop_1_i_i_i_reg_249 <= loop_reg_965;
    end else if (((icmp_ln194_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_1_i_i_i_reg_249 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        p_01_rec_i_i_i_reg_237 <= p_2_rec_i_i_i_fu_913_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_01_rec_i_i_i_reg_237 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln352_reg_1020 == 1'd0))) begin
        x_0_i_reg_307 <= select_ln353_22_reg_1047;
    end else if (((grp_theta_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        x_0_i_reg_307 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln352_reg_1020 == 1'd0))) begin
        y_0_i_reg_319 <= y_reg_1073;
    end else if (((grp_theta_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        y_0_i_reg_319 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln352_reg_1024 <= add_ln352_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln233_fu_460_p2 == 1'd0))) begin
        ctx_sponge_state_add_reg_970 <= zext_ln149_fu_477_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_33_reg_983 <= i_33_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_35_reg_1015 <= i_35_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln194_fu_396_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_952 <= i_fu_450_p2;
        select_ln226_reg_941 <= select_ln226_fu_434_p3;
        trunc_ln234_reg_957 <= trunc_ln234_fu_456_p1;
        zext_ln231_reg_947[31 : 0] <= zext_ln231_fu_442_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln233_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln239_reg_975 <= icmp_ln239_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln280_reg_1083 <= icmp_ln280_fu_811_p2;
        icmp_ln280_reg_1083_pp2_iter1_reg <= icmp_ln280_reg_1083;
        select_ln280_6_reg_1097_pp2_iter1_reg <= select_ln280_6_reg_1097;
        select_ln280_reg_1092_pp2_iter1_reg <= select_ln280_reg_1092;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln352_fu_632_p2 == 1'd0))) begin
        icmp_ln35211_reg_1034 <= icmp_ln35211_fu_650_p2;
        select_ln353_21_reg_1039 <= select_ln353_21_fu_656_p3;
        x_11_reg_1029 <= x_11_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln352_reg_1020 <= icmp_ln352_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln352_reg_1020 == 1'd0))) begin
        icmp_ln353_reg_1057 <= icmp_ln353_fu_745_p2;
        stateAsWords_addr_15_reg_1062 <= zext_ln353_23_fu_739_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_1001 <= j_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_reg_965 <= loop_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_fu_811_p2 == 1'd0))) begin
        select_ln280_6_reg_1097 <= select_ln280_6_fu_843_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_fu_811_p2 == 1'd0))) begin
        select_ln280_reg_1092 <= select_ln280_fu_835_p3;
        trunc_ln282_reg_1108 <= trunc_ln282_fu_856_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln352_reg_1020 == 1'd0))) begin
        select_ln353_22_reg_1047 <= select_ln353_22_fu_664_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln352_reg_1020 == 1'd0))) begin
        select_ln353_reg_1068 <= select_ln353_fu_787_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln269_fu_536_p2 == 1'd0))) begin
        shl_ln_reg_993[7 : 3] <= shl_ln_fu_553_p3[7 : 3];
        stateAsWords_addr_13_reg_988 <= zext_ln270_fu_548_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_reg_1083 == 1'd0))) begin
        trunc_ln282_6_reg_1118 <= trunc_ln282_6_fu_883_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage2_11001) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln352_reg_1020 == 1'd0))) begin
        y_reg_1073 <= y_fu_794_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        KeccakRhoOffsets_ce0 = 1'b1;
    end else begin
        KeccakRhoOffsets_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        KeccakRoundConstants_ce0 = 1'b1;
    end else begin
        KeccakRoundConstants_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln352_fu_632_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln280_fu_811_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln194_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln280_reg_1083 == 1'd0))) begin
        ap_phi_mux_i_0_i2_phi_fu_345_p4 = select_ln280_6_reg_1097;
    end else begin
        ap_phi_mux_i_0_i2_phi_fu_345_p4 = i_0_i2_reg_341;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln352_reg_1020 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_300_p4 = add_ln352_reg_1024;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_300_p4 = indvar_flatten_reg_296;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln352_reg_1020 == 1'd0))) begin
        ap_phi_mux_x_0_i_phi_fu_311_p4 = select_ln353_22_reg_1047;
    end else begin
        ap_phi_mux_x_0_i_phi_fu_311_p4 = x_0_i_reg_307;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln352_reg_1020 == 1'd0))) begin
        ap_phi_mux_y_0_i_phi_fu_323_p4 = y_reg_1073;
    end else begin
        ap_phi_mux_y_0_i_phi_fu_323_p4 = y_0_i_reg_319;
    end
end

always @ (*) begin
    if (((icmp_ln194_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ctx_sponge_state_address0 = zext_ln282_5_fu_903_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_sponge_state_address0 = zext_ln272_fu_582_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_sponge_state_address0 = ctx_sponge_state_add_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_sponge_state_address0 = zext_ln149_fu_477_p1;
    end else begin
        ctx_sponge_state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        ctx_sponge_state_ce0 = 1'b1;
    end else begin
        ctx_sponge_state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ctx_sponge_state_d0 = trunc_ln282_6_reg_1118;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_sponge_state_d0 = xor_ln149_fu_529_p2;
    end else begin
        ctx_sponge_state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln280_reg_1083_pp2_iter1_reg == 1'd0)))) begin
        ctx_sponge_state_we0 = 1'b1;
    end else begin
        ctx_sponge_state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stateAsWords_address0 = stateAsWords_addr_15_reg_1062;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stateAsWords_address0 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        stateAsWords_address0 = stateAsWords_addr_13_reg_988;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        stateAsWords_address0 = zext_ln270_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        stateAsWords_address0 = grp_chi_fu_373_A_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        stateAsWords_address0 = grp_theta_fu_368_A_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_address0 = grp_pi_fu_363_A_address0;
    end else begin
        stateAsWords_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        stateAsWords_address1 = zext_ln280_fu_851_p1;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        stateAsWords_address1 = 64'd0;
    end else if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        stateAsWords_address1 = zext_ln353_23_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        stateAsWords_address1 = grp_chi_fu_373_A_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        stateAsWords_address1 = grp_theta_fu_368_A_address1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_address1 = grp_pi_fu_363_A_address1;
    end else begin
        stateAsWords_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        stateAsWords_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        stateAsWords_ce0 = grp_chi_fu_373_A_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        stateAsWords_ce0 = grp_theta_fu_368_A_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_ce0 = grp_pi_fu_363_A_ce0;
    end else begin
        stateAsWords_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        stateAsWords_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        stateAsWords_ce1 = grp_chi_fu_373_A_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        stateAsWords_ce1 = grp_theta_fu_368_A_ce1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_ce1 = grp_pi_fu_363_A_ce1;
    end else begin
        stateAsWords_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stateAsWords_d0 = select_ln353_reg_1068;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        stateAsWords_d0 = or_ln272_fu_613_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        stateAsWords_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_d0 = grp_pi_fu_363_A_d0;
    end else begin
        stateAsWords_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        stateAsWords_d1 = xor_ln382_fu_804_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        stateAsWords_d1 = grp_chi_fu_373_A_d1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        stateAsWords_d1 = grp_theta_fu_368_A_d1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_d1 = grp_pi_fu_363_A_d1;
    end else begin
        stateAsWords_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln352_reg_1020 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln269_fu_536_p2 == 1'd0)))) begin
        stateAsWords_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_we0 = grp_pi_fu_363_A_we0;
    end else begin
        stateAsWords_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        stateAsWords_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        stateAsWords_we1 = grp_chi_fu_373_A_we1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        stateAsWords_we1 = grp_theta_fu_368_A_we1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        stateAsWords_we1 = grp_pi_fu_363_A_we1;
    end else begin
        stateAsWords_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln194_fu_396_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln239_fu_487_p2 == 1'd1) & (icmp_ln233_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((icmp_ln233_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln239_fu_487_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln269_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln271_fu_561_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln293_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((grp_theta_fu_368_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln352_fu_632_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln352_fu_632_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_pi_fu_363_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((grp_chi_fu_373_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln280_fu_811_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((icmp_ln280_fu_811_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign KeccakRhoOffsets_address0 = zext_ln353_23_fu_739_p1;

assign KeccakRoundConstants_address0 = zext_ln382_fu_799_p1;

assign add_ln226_fu_416_p2 = (ctx_sponge_byteIOInd_42_fu_112 + zext_ln225_fu_412_p1);

assign add_ln234_fu_471_p2 = (loop_1_i_i_i_reg_249 + ctx_sponge_byteIOInd_42_fu_112);

assign add_ln238_fu_482_p2 = (ctx_sponge_byteIOInd_42_fu_112 + select_ln226_reg_941);

assign add_ln272_fu_577_p2 = (shl_ln_reg_993 + zext_ln271_fu_573_p1);

assign add_ln280_fu_817_p2 = (indvar_flatten7_reg_330 + 8'd1);

assign add_ln282_fu_897_p2 = (zext_ln281_fu_894_p1 + shl_ln282_mid2_fu_887_p3);

assign add_ln352_fu_638_p2 = (ap_phi_mux_indvar_flatten_phi_fu_300_p4 + 5'd1);

assign add_ln353_12_fu_676_p2 = (select_ln353_22_fu_664_p3 + 3'd3);

assign add_ln353_13_fu_699_p2 = (select_ln353_21_reg_1039 + 3'd3);

assign add_ln353_6_fu_733_p2 = (shl_ln6_fu_715_p3 + zext_ln353_22_fu_729_p1);

assign add_ln353_fu_723_p2 = (zext_ln353_fu_690_p1 + zext_ln353_21_fu_711_p1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_return = ctx_sponge_byteIOInd_42_fu_112;

assign grp_chi_fu_373_ap_start = grp_chi_fu_373_ap_start_reg;

assign grp_pi_fu_363_ap_start = grp_pi_fu_363_ap_start_reg;

assign grp_theta_fu_368_ap_start = grp_theta_fu_368_ap_start_reg;

assign i_33_fu_542_p2 = (i_0_i_reg_261 + 5'd1);

assign i_34_fu_823_p2 = (5'd1 + ap_phi_mux_i_0_i2_phi_fu_345_p4);

assign i_35_fu_626_p2 = (indexRound_assign_reg_284 + 5'd1);

assign i_fu_450_p2 = (zext_ln231_7_fu_446_p1 + i_0_i_i_i_reg_226);

assign icmp_ln194_fu_396_p2 = ((tmp_fu_386_p4 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_422_p2 = ((add_ln226_fu_416_p2 > 32'd168) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_460_p2 = ((loop_1_i_i_i_reg_249 == select_ln226_reg_941) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_487_p2 = ((add_ln238_fu_482_p2 == 32'd168) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_536_p2 = ((i_0_i_reg_261 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln271_fu_561_p2 = ((j_0_i_reg_272 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_811_p2 = ((indvar_flatten7_reg_330 == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln281_fu_829_p2 = ((j_0_i5_reg_352 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_620_p2 = ((indexRound_assign_reg_284 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln35211_fu_650_p2 = ((ap_phi_mux_y_0_i_phi_fu_323_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln352_fu_632_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_300_p4 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln353_11_fu_670_p2 = ((select_ln353_22_fu_664_p3 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln353_12_fu_694_p2 = ((select_ln353_21_reg_1039 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln353_fu_745_p2 = ((add_ln353_6_fu_733_p2 == 5'd0) ? 1'b1 : 1'b0);

assign j_13_fu_860_p2 = (4'd1 + select_ln280_fu_835_p3);

assign j_fu_567_p2 = (j_0_i_reg_272 + 4'd1);

assign loop_fu_465_p2 = (loop_1_i_i_i_reg_249 + 32'd1);

assign lshr_ln282_fu_877_p2 = stateAsWords_q1 >> zext_ln282_fu_873_p1;

assign lshr_ln353_fu_775_p2 = stateAsWords_q1 >> zext_ln353_26_fu_771_p1;

assign or_ln272_fu_613_p2 = (stateAsWords_q0 | shl_ln272_fu_607_p2);

assign p_2_rec_i_i_i_fu_913_p2 = (zext_ln231_reg_947 + p_01_rec_i_i_i_reg_237);

assign partialBlock_32_fu_428_p2 = (32'd168 - ctx_sponge_byteIOInd_42_fu_112);

assign partialBlock_fu_406_p2 = ($signed(2'd2) - $signed(trunc_ln225_fu_402_p1));

assign select_ln226_fu_434_p3 = ((icmp_ln226_fu_422_p2[0:0] === 1'b1) ? partialBlock_32_fu_428_p2 : zext_ln225_fu_412_p1);

assign select_ln234_fu_521_p3 = ((xor_ln234_fu_502_p2[0:0] === 1'b1) ? zext_ln234_fu_514_p1 : trunc_ln234_8_fu_518_p1);

assign select_ln280_6_fu_843_p3 = ((icmp_ln281_fu_829_p2[0:0] === 1'b1) ? i_34_fu_823_p2 : ap_phi_mux_i_0_i2_phi_fu_345_p4);

assign select_ln280_fu_835_p3 = ((icmp_ln281_fu_829_p2[0:0] === 1'b1) ? 4'd0 : j_0_i5_reg_352);

assign select_ln353_21_fu_656_p3 = ((icmp_ln35211_fu_650_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_y_0_i_phi_fu_323_p4);

assign select_ln353_22_fu_664_p3 = ((icmp_ln35211_reg_1034[0:0] === 1'b1) ? x_11_reg_1029 : x_0_i_reg_307);

assign select_ln353_23_fu_682_p3 = ((icmp_ln353_11_fu_670_p2[0:0] === 1'b1) ? select_ln353_22_fu_664_p3 : add_ln353_12_fu_676_p2);

assign select_ln353_24_fu_704_p3 = ((icmp_ln353_12_fu_694_p2[0:0] === 1'b1) ? select_ln353_21_reg_1039 : add_ln353_13_fu_699_p2);

assign select_ln353_fu_787_p3 = ((icmp_ln353_reg_1057[0:0] === 1'b1) ? stateAsWords_q0 : xor_ln353_fu_781_p2);

assign shl_ln272_fu_607_p2 = zext_ln272_7_fu_587_p1 << zext_ln272_8_fu_603_p1;

assign shl_ln272_s_fu_595_p3 = {{trunc_ln272_fu_591_p1}, {3'd0}};

assign shl_ln282_6_fu_866_p3 = {{trunc_ln282_reg_1108}, {3'd0}};

assign shl_ln282_mid2_fu_887_p3 = {{select_ln280_6_reg_1097_pp2_iter1_reg}, {3'd0}};

assign shl_ln353_fu_759_p2 = stateAsWords_q1 << zext_ln353_25_fu_755_p1;

assign shl_ln6_fu_715_p3 = {{select_ln353_24_fu_704_p3}, {2'd0}};

assign shl_ln_fu_553_p3 = {{i_0_i_reg_261}, {3'd0}};

assign sub_ln353_fu_765_p2 = ($signed(7'd64) - $signed(zext_ln353_24_fu_751_p1));

assign tmp_63_fu_507_p3 = x[32'd8];

assign tmp_fu_386_p4 = {{i_0_i_i_i_reg_226[32:1]}};

assign trunc_ln225_fu_402_p1 = i_0_i_i_i_reg_226[1:0];

assign trunc_ln234_7_fu_498_p1 = loop_1_i_i_i_reg_249[0:0];

assign trunc_ln234_8_fu_518_p1 = x[7:0];

assign trunc_ln234_fu_456_p1 = p_01_rec_i_i_i_reg_237[0:0];

assign trunc_ln272_fu_591_p1 = j_0_i_reg_272[2:0];

assign trunc_ln282_6_fu_883_p1 = lshr_ln282_fu_877_p2[7:0];

assign trunc_ln282_fu_856_p1 = select_ln280_fu_835_p3[2:0];

assign x_11_fu_644_p2 = (ap_phi_mux_x_0_i_phi_fu_311_p4 + 3'd1);

assign xor_ln149_fu_529_p2 = (select_ln234_fu_521_p3 ^ ctx_sponge_state_q0);

assign xor_ln234_fu_502_p2 = (trunc_ln234_reg_957 ^ trunc_ln234_7_fu_498_p1);

assign xor_ln353_fu_781_p2 = (shl_ln353_fu_759_p2 ^ lshr_ln353_fu_775_p2);

assign xor_ln382_fu_804_p2 = (stateAsWords_q1 ^ KeccakRoundConstants_q0);

assign y_fu_794_p2 = (select_ln353_21_reg_1039 + 3'd1);

assign zext_ln149_fu_477_p1 = add_ln234_fu_471_p2;

assign zext_ln225_fu_412_p1 = partialBlock_fu_406_p2;

assign zext_ln231_7_fu_446_p1 = select_ln226_fu_434_p3;

assign zext_ln231_fu_442_p1 = select_ln226_fu_434_p3;

assign zext_ln234_fu_514_p1 = tmp_63_fu_507_p3;

assign zext_ln270_fu_548_p1 = i_0_i_reg_261;

assign zext_ln271_fu_573_p1 = j_0_i_reg_272;

assign zext_ln272_7_fu_587_p1 = ctx_sponge_state_q0;

assign zext_ln272_8_fu_603_p1 = shl_ln272_s_fu_595_p3;

assign zext_ln272_fu_582_p1 = add_ln272_fu_577_p2;

assign zext_ln280_fu_851_p1 = select_ln280_6_fu_843_p3;

assign zext_ln281_fu_894_p1 = select_ln280_reg_1092_pp2_iter1_reg;

assign zext_ln282_5_fu_903_p1 = add_ln282_fu_897_p2;

assign zext_ln282_fu_873_p1 = shl_ln282_6_fu_866_p3;

assign zext_ln353_21_fu_711_p1 = select_ln353_24_fu_704_p3;

assign zext_ln353_22_fu_729_p1 = add_ln353_fu_723_p2;

assign zext_ln353_23_fu_739_p1 = add_ln353_6_fu_733_p2;

assign zext_ln353_24_fu_751_p1 = KeccakRhoOffsets_q0;

assign zext_ln353_25_fu_755_p1 = KeccakRhoOffsets_q0;

assign zext_ln353_26_fu_771_p1 = sub_ln353_fu_765_p2;

assign zext_ln353_fu_690_p1 = select_ln353_23_fu_682_p3;

assign zext_ln382_fu_799_p1 = indexRound_assign_reg_284;

always @ (posedge ap_clk) begin
    zext_ln231_reg_947[63:32] <= 32'b00000000000000000000000000000000;
    shl_ln_reg_993[2:0] <= 3'b000;
end

endmodule //HashUpdateIntLE
