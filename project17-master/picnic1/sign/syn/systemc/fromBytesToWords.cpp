// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fromBytesToWords.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fromBytesToWords::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fromBytesToWords::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> fromBytesToWords::ap_ST_fsm_state1 = "1";
const sc_lv<5> fromBytesToWords::ap_ST_fsm_state2 = "10";
const sc_lv<5> fromBytesToWords::ap_ST_fsm_state3 = "100";
const sc_lv<5> fromBytesToWords::ap_ST_fsm_state4 = "1000";
const sc_lv<5> fromBytesToWords::ap_ST_fsm_state5 = "10000";
const sc_lv<32> fromBytesToWords::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fromBytesToWords::ap_const_lv32_1 = "1";
const sc_lv<1> fromBytesToWords::ap_const_lv1_0 = "0";
const sc_lv<32> fromBytesToWords::ap_const_lv32_2 = "10";
const sc_lv<5> fromBytesToWords::ap_const_lv5_0 = "00000";
const sc_lv<32> fromBytesToWords::ap_const_lv32_4 = "100";
const sc_lv<4> fromBytesToWords::ap_const_lv4_0 = "0000";
const sc_lv<32> fromBytesToWords::ap_const_lv32_3 = "11";
const sc_lv<64> fromBytesToWords::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> fromBytesToWords::ap_const_lv5_19 = "11001";
const sc_lv<5> fromBytesToWords::ap_const_lv5_1 = "1";
const sc_lv<3> fromBytesToWords::ap_const_lv3_0 = "000";
const sc_lv<4> fromBytesToWords::ap_const_lv4_8 = "1000";
const sc_lv<4> fromBytesToWords::ap_const_lv4_1 = "1";
const sc_lv<1> fromBytesToWords::ap_const_lv1_1 = "1";
const bool fromBytesToWords::ap_const_boolean_1 = true;

fromBytesToWords::fromBytesToWords(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln272_fu_139_p2);
    sensitive << ( shl_ln272_1_reg_196 );
    sensitive << ( zext_ln271_fu_135_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln269_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( icmp_ln269_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_i_fu_104_p2);
    sensitive << ( i_0_reg_75 );

    SC_METHOD(thread_icmp_ln269_fu_98_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_75 );

    SC_METHOD(thread_icmp_ln271_fu_123_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_86 );

    SC_METHOD(thread_j_fu_129_p2);
    sensitive << ( j_0_reg_86 );

    SC_METHOD(thread_or_ln272_fu_175_p2);
    sensitive << ( stateAsWords_q0 );
    sensitive << ( shl_ln272_fu_169_p2 );

    SC_METHOD(thread_shl_ln272_1_fu_115_p3);
    sensitive << ( i_0_reg_75 );

    SC_METHOD(thread_shl_ln272_fu_169_p2);
    sensitive << ( zext_ln272_1_fu_149_p1 );
    sensitive << ( zext_ln272_2_fu_165_p1 );

    SC_METHOD(thread_shl_ln_fu_157_p3);
    sensitive << ( trunc_ln272_fu_153_p1 );

    SC_METHOD(thread_stateAsWords_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( stateAsWords_addr_reg_191 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln270_fu_110_p1 );

    SC_METHOD(thread_stateAsWords_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stateAsWords_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( or_ln272_fu_175_p2 );

    SC_METHOD(thread_stateAsWords_we0);
    sensitive << ( icmp_ln269_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln272_fu_144_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_trunc_ln272_fu_153_p1);
    sensitive << ( j_0_reg_86 );

    SC_METHOD(thread_zext_ln270_fu_110_p1);
    sensitive << ( i_0_reg_75 );

    SC_METHOD(thread_zext_ln271_fu_135_p1);
    sensitive << ( j_0_reg_86 );

    SC_METHOD(thread_zext_ln272_1_fu_149_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_zext_ln272_2_fu_165_p1);
    sensitive << ( shl_ln_fu_157_p3 );

    SC_METHOD(thread_zext_ln272_fu_144_p1);
    sensitive << ( add_ln272_fu_139_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln269_fu_98_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln271_fu_123_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fromBytesToWords_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stateAsWords_address0, "(port)stateAsWords_address0");
    sc_trace(mVcdFile, stateAsWords_ce0, "(port)stateAsWords_ce0");
    sc_trace(mVcdFile, stateAsWords_we0, "(port)stateAsWords_we0");
    sc_trace(mVcdFile, stateAsWords_d0, "(port)stateAsWords_d0");
    sc_trace(mVcdFile, stateAsWords_q0, "(port)stateAsWords_q0");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln269_fu_98_p2, "icmp_ln269_fu_98_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_104_p2, "i_fu_104_p2");
    sc_trace(mVcdFile, i_reg_186, "i_reg_186");
    sc_trace(mVcdFile, stateAsWords_addr_reg_191, "stateAsWords_addr_reg_191");
    sc_trace(mVcdFile, shl_ln272_1_fu_115_p3, "shl_ln272_1_fu_115_p3");
    sc_trace(mVcdFile, shl_ln272_1_reg_196, "shl_ln272_1_reg_196");
    sc_trace(mVcdFile, j_fu_129_p2, "j_fu_129_p2");
    sc_trace(mVcdFile, j_reg_204, "j_reg_204");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln271_fu_123_p2, "icmp_ln271_fu_123_p2");
    sc_trace(mVcdFile, i_0_reg_75, "i_0_reg_75");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, j_0_reg_86, "j_0_reg_86");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, zext_ln270_fu_110_p1, "zext_ln270_fu_110_p1");
    sc_trace(mVcdFile, zext_ln272_fu_144_p1, "zext_ln272_fu_144_p1");
    sc_trace(mVcdFile, or_ln272_fu_175_p2, "or_ln272_fu_175_p2");
    sc_trace(mVcdFile, zext_ln271_fu_135_p1, "zext_ln271_fu_135_p1");
    sc_trace(mVcdFile, add_ln272_fu_139_p2, "add_ln272_fu_139_p2");
    sc_trace(mVcdFile, trunc_ln272_fu_153_p1, "trunc_ln272_fu_153_p1");
    sc_trace(mVcdFile, shl_ln_fu_157_p3, "shl_ln_fu_157_p3");
    sc_trace(mVcdFile, zext_ln272_1_fu_149_p1, "zext_ln272_1_fu_149_p1");
    sc_trace(mVcdFile, zext_ln272_2_fu_165_p1, "zext_ln272_2_fu_165_p1");
    sc_trace(mVcdFile, shl_ln272_fu_169_p2, "shl_ln272_fu_169_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fromBytesToWords::~fromBytesToWords() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void fromBytesToWords::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_75 = i_reg_186.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_75 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_0_reg_86 = j_reg_204.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln269_fu_98_p2.read(), ap_const_lv1_0))) {
        j_0_reg_86 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_186 = i_fu_104_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_204 = j_fu_129_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln269_fu_98_p2.read(), ap_const_lv1_0))) {
        shl_ln272_1_reg_196 = shl_ln272_1_fu_115_p3.read();
        stateAsWords_addr_reg_191 =  (sc_lv<5>) (zext_ln270_fu_110_p1.read());
    }
}

void fromBytesToWords::thread_add_ln272_fu_139_p2() {
    add_ln272_fu_139_p2 = (!shl_ln272_1_reg_196.read().is_01() || !zext_ln271_fu_135_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(shl_ln272_1_reg_196.read()) + sc_biguint<8>(zext_ln271_fu_135_p1.read()));
}

void fromBytesToWords::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fromBytesToWords::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fromBytesToWords::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fromBytesToWords::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fromBytesToWords::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fromBytesToWords::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln269_fu_98_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fromBytesToWords::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fromBytesToWords::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln269_fu_98_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fromBytesToWords::thread_i_fu_104_p2() {
    i_fu_104_p2 = (!i_0_reg_75.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_75.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void fromBytesToWords::thread_icmp_ln269_fu_98_p2() {
    icmp_ln269_fu_98_p2 = (!i_0_reg_75.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_75.read() == ap_const_lv5_19);
}

void fromBytesToWords::thread_icmp_ln271_fu_123_p2() {
    icmp_ln271_fu_123_p2 = (!j_0_reg_86.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_86.read() == ap_const_lv4_8);
}

void fromBytesToWords::thread_j_fu_129_p2() {
    j_fu_129_p2 = (!j_0_reg_86.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_86.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fromBytesToWords::thread_or_ln272_fu_175_p2() {
    or_ln272_fu_175_p2 = (stateAsWords_q0.read() | shl_ln272_fu_169_p2.read());
}

void fromBytesToWords::thread_shl_ln272_1_fu_115_p3() {
    shl_ln272_1_fu_115_p3 = esl_concat<5,3>(i_0_reg_75.read(), ap_const_lv3_0);
}

void fromBytesToWords::thread_shl_ln272_fu_169_p2() {
    shl_ln272_fu_169_p2 = (!zext_ln272_2_fu_165_p1.read().is_01())? sc_lv<64>(): zext_ln272_1_fu_149_p1.read() << (unsigned short)zext_ln272_2_fu_165_p1.read().to_uint();
}

void fromBytesToWords::thread_shl_ln_fu_157_p3() {
    shl_ln_fu_157_p3 = esl_concat<3,3>(trunc_ln272_fu_153_p1.read(), ap_const_lv3_0);
}

void fromBytesToWords::thread_stateAsWords_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        stateAsWords_address0 = stateAsWords_addr_reg_191.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        stateAsWords_address0 =  (sc_lv<5>) (zext_ln270_fu_110_p1.read());
    } else {
        stateAsWords_address0 = "XXXXX";
    }
}

void fromBytesToWords::thread_stateAsWords_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        stateAsWords_ce0 = ap_const_logic_1;
    } else {
        stateAsWords_ce0 = ap_const_logic_0;
    }
}

void fromBytesToWords::thread_stateAsWords_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        stateAsWords_d0 = or_ln272_fu_175_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        stateAsWords_d0 = ap_const_lv64_0;
    } else {
        stateAsWords_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fromBytesToWords::thread_stateAsWords_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln269_fu_98_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        stateAsWords_we0 = ap_const_logic_1;
    } else {
        stateAsWords_we0 = ap_const_logic_0;
    }
}

void fromBytesToWords::thread_state_address0() {
    state_address0 =  (sc_lv<8>) (zext_ln272_fu_144_p1.read());
}

void fromBytesToWords::thread_state_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void fromBytesToWords::thread_trunc_ln272_fu_153_p1() {
    trunc_ln272_fu_153_p1 = j_0_reg_86.read().range(3-1, 0);
}

void fromBytesToWords::thread_zext_ln270_fu_110_p1() {
    zext_ln270_fu_110_p1 = esl_zext<64,5>(i_0_reg_75.read());
}

void fromBytesToWords::thread_zext_ln271_fu_135_p1() {
    zext_ln271_fu_135_p1 = esl_zext<8,4>(j_0_reg_86.read());
}

void fromBytesToWords::thread_zext_ln272_1_fu_149_p1() {
    zext_ln272_1_fu_149_p1 = esl_zext<64,8>(state_q0.read());
}

void fromBytesToWords::thread_zext_ln272_2_fu_165_p1() {
    zext_ln272_2_fu_165_p1 = esl_zext<64,6>(shl_ln_fu_157_p3.read());
}

void fromBytesToWords::thread_zext_ln272_fu_144_p1() {
    zext_ln272_fu_144_p1 = esl_zext<64,8>(add_ln272_fu_139_p2.read());
}

void fromBytesToWords::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln269_fu_98_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln271_fu_123_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

