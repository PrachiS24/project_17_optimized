// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "crypto_sign.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic crypto_sign::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic crypto_sign::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> crypto_sign::ap_ST_fsm_state1 = "1";
const sc_lv<11> crypto_sign::ap_ST_fsm_state2 = "10";
const sc_lv<11> crypto_sign::ap_ST_fsm_state3 = "100";
const sc_lv<11> crypto_sign::ap_ST_fsm_state4 = "1000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state5 = "10000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state6 = "100000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> crypto_sign::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> crypto_sign::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> crypto_sign::ap_const_lv32_1 = "1";
const sc_lv<32> crypto_sign::ap_const_lv32_2 = "10";
const sc_lv<1> crypto_sign::ap_const_lv1_0 = "0";
const sc_lv<1> crypto_sign::ap_const_lv1_1 = "1";
const sc_lv<32> crypto_sign::ap_const_lv32_3 = "11";
const sc_lv<32> crypto_sign::ap_const_lv32_5 = "101";
const sc_lv<32> crypto_sign::ap_const_lv32_8 = "1000";
const sc_lv<32> crypto_sign::ap_const_lv32_4 = "100";
const sc_lv<5> crypto_sign::ap_const_lv5_0 = "00000";
const sc_lv<32> crypto_sign::ap_const_lv32_7 = "111";
const sc_lv<32> crypto_sign::ap_const_lv32_9 = "1001";
const sc_lv<32> crypto_sign::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<64> crypto_sign::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> crypto_sign::ap_const_lv64_1 = "1";
const sc_lv<32> crypto_sign::ap_const_lv32_6 = "110";
const sc_lv<64> crypto_sign::ap_const_lv64_2 = "10";
const sc_lv<64> crypto_sign::ap_const_lv64_3 = "11";
const sc_lv<8> crypto_sign::ap_const_lv8_0 = "00000000";
const sc_lv<4> crypto_sign::ap_const_lv4_F = "1111";
const sc_lv<4> crypto_sign::ap_const_lv4_E = "1110";
const sc_lv<4> crypto_sign::ap_const_lv4_D = "1101";
const sc_lv<4> crypto_sign::ap_const_lv4_C = "1100";
const sc_lv<4> crypto_sign::ap_const_lv4_B = "1011";
const sc_lv<4> crypto_sign::ap_const_lv4_A = "1010";
const sc_lv<4> crypto_sign::ap_const_lv4_0 = "0000";
const sc_lv<5> crypto_sign::ap_const_lv5_10 = "10000";
const sc_lv<5> crypto_sign::ap_const_lv5_1 = "1";
const sc_lv<64> crypto_sign::ap_const_lv64_4 = "100";
const sc_lv<6> crypto_sign::ap_const_lv6_11 = "10001";
const sc_lv<6> crypto_sign::ap_const_lv6_21 = "100001";
const sc_lv<64> crypto_sign::ap_const_lv64_84F4 = "1000010011110100";
const sc_lv<32> crypto_sign::ap_const_lv32_F = "1111";
const sc_lv<32> crypto_sign::ap_const_lv32_A = "1010";
const bool crypto_sign::ap_const_boolean_1 = true;

crypto_sign::crypto_sign(sc_module_name name) : sc_module(name), mVcdFile(0) {
    secret_data_U = new crypto_sign_secrebJp("secret_data_U");
    secret_data_U->clk(ap_clk);
    secret_data_U->reset(ap_rst);
    secret_data_U->address0(secret_data_address0);
    secret_data_U->ce0(secret_data_ce0);
    secret_data_U->we0(secret_data_we0);
    secret_data_U->d0(sk_q0);
    secret_data_U->q0(secret_data_q0);
    secret_data_U->address1(grp_picnic_sign_fu_324_sk_data_address1);
    secret_data_U->ce1(secret_data_ce1);
    secret_data_U->q1(secret_data_q1);
    secret_pk_plaintext_U = new crypto_sign_secrebJp("secret_pk_plaintext_U");
    secret_pk_plaintext_U->clk(ap_clk);
    secret_pk_plaintext_U->reset(ap_rst);
    secret_pk_plaintext_U->address0(secret_pk_plaintext_address0);
    secret_pk_plaintext_U->ce0(secret_pk_plaintext_ce0);
    secret_pk_plaintext_U->we0(secret_pk_plaintext_we0);
    secret_pk_plaintext_U->d0(sk_q1);
    secret_pk_plaintext_U->q0(secret_pk_plaintext_q0);
    secret_pk_plaintext_U->address1(grp_picnic_sign_fu_324_sk_pk_plaintext_address1);
    secret_pk_plaintext_U->ce1(secret_pk_plaintext_ce1);
    secret_pk_plaintext_U->q1(secret_pk_plaintext_q1);
    secret_pk_ciphertext_U = new crypto_sign_secrebJp("secret_pk_ciphertext_U");
    secret_pk_ciphertext_U->clk(ap_clk);
    secret_pk_ciphertext_U->reset(ap_rst);
    secret_pk_ciphertext_U->address0(secret_pk_ciphertext_address0);
    secret_pk_ciphertext_U->ce0(secret_pk_ciphertext_ce0);
    secret_pk_ciphertext_U->we0(secret_pk_ciphertext_we0);
    secret_pk_ciphertext_U->d0(sk_q0);
    secret_pk_ciphertext_U->q0(secret_pk_ciphertext_q0);
    secret_pk_ciphertext_U->address1(grp_picnic_sign_fu_324_sk_pk_ciphertext_address1);
    secret_pk_ciphertext_U->ce1(secret_pk_ciphertext_ce1);
    secret_pk_ciphertext_U->q1(secret_pk_ciphertext_q1);
    grp_picnic_sign_fu_324 = new picnic_sign("grp_picnic_sign_fu_324");
    grp_picnic_sign_fu_324->ap_clk(ap_clk);
    grp_picnic_sign_fu_324->ap_rst(ap_rst);
    grp_picnic_sign_fu_324->ap_start(grp_picnic_sign_fu_324_ap_start);
    grp_picnic_sign_fu_324->ap_done(grp_picnic_sign_fu_324_ap_done);
    grp_picnic_sign_fu_324->ap_idle(grp_picnic_sign_fu_324_ap_idle);
    grp_picnic_sign_fu_324->ap_ready(grp_picnic_sign_fu_324_ap_ready);
    grp_picnic_sign_fu_324->sk_data_address0(grp_picnic_sign_fu_324_sk_data_address0);
    grp_picnic_sign_fu_324->sk_data_ce0(grp_picnic_sign_fu_324_sk_data_ce0);
    grp_picnic_sign_fu_324->sk_data_q0(secret_data_q0);
    grp_picnic_sign_fu_324->sk_data_address1(grp_picnic_sign_fu_324_sk_data_address1);
    grp_picnic_sign_fu_324->sk_data_ce1(grp_picnic_sign_fu_324_sk_data_ce1);
    grp_picnic_sign_fu_324->sk_data_q1(secret_data_q1);
    grp_picnic_sign_fu_324->sk_pk_plaintext_address0(grp_picnic_sign_fu_324_sk_pk_plaintext_address0);
    grp_picnic_sign_fu_324->sk_pk_plaintext_ce0(grp_picnic_sign_fu_324_sk_pk_plaintext_ce0);
    grp_picnic_sign_fu_324->sk_pk_plaintext_q0(secret_pk_plaintext_q0);
    grp_picnic_sign_fu_324->sk_pk_plaintext_address1(grp_picnic_sign_fu_324_sk_pk_plaintext_address1);
    grp_picnic_sign_fu_324->sk_pk_plaintext_ce1(grp_picnic_sign_fu_324_sk_pk_plaintext_ce1);
    grp_picnic_sign_fu_324->sk_pk_plaintext_q1(secret_pk_plaintext_q1);
    grp_picnic_sign_fu_324->sk_pk_ciphertext_address0(grp_picnic_sign_fu_324_sk_pk_ciphertext_address0);
    grp_picnic_sign_fu_324->sk_pk_ciphertext_ce0(grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0);
    grp_picnic_sign_fu_324->sk_pk_ciphertext_q0(secret_pk_ciphertext_q0);
    grp_picnic_sign_fu_324->sk_pk_ciphertext_address1(grp_picnic_sign_fu_324_sk_pk_ciphertext_address1);
    grp_picnic_sign_fu_324->sk_pk_ciphertext_ce1(grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1);
    grp_picnic_sign_fu_324->sk_pk_ciphertext_q1(secret_pk_ciphertext_q1);
    grp_picnic_sign_fu_324->message_address0(grp_picnic_sign_fu_324_message_address0);
    grp_picnic_sign_fu_324->message_ce0(grp_picnic_sign_fu_324_message_ce0);
    grp_picnic_sign_fu_324->message_q0(m_q0);
    grp_picnic_sign_fu_324->message_len(mlen);
    grp_picnic_sign_fu_324->signature_address0(grp_picnic_sign_fu_324_signature_address0);
    grp_picnic_sign_fu_324->signature_ce0(grp_picnic_sign_fu_324_signature_ce0);
    grp_picnic_sign_fu_324->signature_we0(grp_picnic_sign_fu_324_signature_we0);
    grp_picnic_sign_fu_324->signature_d0(grp_picnic_sign_fu_324_signature_d0);
    grp_picnic_sign_fu_324->signature_offset(add_ln100_reg_613);
    grp_picnic_sign_fu_324->viewOutputs_address0(grp_picnic_sign_fu_324_viewOutputs_address0);
    grp_picnic_sign_fu_324->viewOutputs_ce0(grp_picnic_sign_fu_324_viewOutputs_ce0);
    grp_picnic_sign_fu_324->viewOutputs_we0(grp_picnic_sign_fu_324_viewOutputs_we0);
    grp_picnic_sign_fu_324->viewOutputs_d0(grp_picnic_sign_fu_324_viewOutputs_d0);
    grp_picnic_sign_fu_324->viewOutputs_q0(viewOutputs_q0);
    grp_picnic_sign_fu_324->viewOutputs_address1(grp_picnic_sign_fu_324_viewOutputs_address1);
    grp_picnic_sign_fu_324->viewOutputs_ce1(grp_picnic_sign_fu_324_viewOutputs_ce1);
    grp_picnic_sign_fu_324->viewOutputs_q1(viewOutputs_q1);
    grp_picnic_sign_fu_324->ap_return_0(grp_picnic_sign_fu_324_ap_return_0);
    grp_picnic_sign_fu_324->ap_return_1(grp_picnic_sign_fu_324_ap_return_1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln100_fu_464_p2);
    sensitive << ( mlen );

    SC_METHOD(thread_add_ln108_fu_510_p2);
    sensitive << ( add_ln100_reg_613 );
    sensitive << ( grp_picnic_sign_fu_324_ap_return_1 );

    SC_METHOD(thread_add_ln120_fu_545_p2);
    sensitive << ( loop_0_reg_295 );

    SC_METHOD(thread_add_ln659_fu_470_p2);
    sensitive << ( sext_ln657_i_cast_reg_589 );

    SC_METHOD(thread_add_ln660_fu_480_p2);
    sensitive << ( sext_ln657_i_cast_reg_589 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_ret_phi_fu_287_p4);
    sensitive << ( empty_96_reg_578 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln657_fu_439_p2 );
    sensitive << ( ret_reg_283 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_307 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_empty_85_fu_359_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_empty_86_fu_365_p2);
    sensitive << ( empty_85_fu_359_p2 );
    sensitive << ( empty_fu_353_p2 );

    SC_METHOD(thread_empty_87_fu_371_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_empty_88_fu_377_p2);
    sensitive << ( empty_87_fu_371_p2 );
    sensitive << ( empty_86_fu_365_p2 );

    SC_METHOD(thread_empty_89_fu_383_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_empty_90_fu_389_p2);
    sensitive << ( empty_89_fu_383_p2 );
    sensitive << ( empty_88_fu_377_p2 );

    SC_METHOD(thread_empty_91_fu_395_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_empty_92_fu_401_p2);
    sensitive << ( empty_91_fu_395_p2 );
    sensitive << ( empty_90_fu_389_p2 );

    SC_METHOD(thread_empty_93_fu_407_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_empty_94_fu_413_p2);
    sensitive << ( empty_93_fu_407_p2 );
    sensitive << ( empty_92_fu_401_p2 );

    SC_METHOD(thread_empty_95_fu_419_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_empty_96_fu_425_p2);
    sensitive << ( empty_95_fu_419_p2 );
    sensitive << ( empty_94_fu_413_p2 );

    SC_METHOD(thread_empty_fu_353_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln632_fu_349_p1 );

    SC_METHOD(thread_grp_picnic_sign_fu_324_ap_start);
    sensitive << ( grp_picnic_sign_fu_324_ap_start_reg );

    SC_METHOD(thread_icmp_ln101_fu_498_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_ap_done );
    sensitive << ( grp_picnic_sign_fu_324_ap_return_0 );

    SC_METHOD(thread_icmp_ln104_fu_504_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_ap_done );
    sensitive << ( icmp_ln101_fu_498_p2 );
    sensitive << ( grp_picnic_sign_fu_324_ap_return_1 );

    SC_METHOD(thread_icmp_ln119_fu_534_p2);
    sensitive << ( mlen );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sext_ln119_fu_529_p1 );

    SC_METHOD(thread_icmp_ln657_fu_439_p2);
    sensitive << ( empty_96_reg_578 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( loop_0_i_reg_272 );

    SC_METHOD(thread_loop_22_fu_445_p2);
    sensitive << ( loop_0_i_reg_272 );

    SC_METHOD(thread_loop_fu_539_p2);
    sensitive << ( loop_0_reg_295 );

    SC_METHOD(thread_m_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_picnic_sign_fu_324_message_address0 );
    sensitive << ( sext_ln119_fu_529_p1 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_picnic_sign_fu_324_message_ce0 );

    SC_METHOD(thread_secret_data_address0);
    sensitive << ( zext_ln657_reg_582 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_data_address0 );

    SC_METHOD(thread_secret_data_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_data_ce0 );

    SC_METHOD(thread_secret_data_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_data_ce1 );

    SC_METHOD(thread_secret_data_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_secret_pk_ciphertext_address0);
    sensitive << ( zext_ln657_reg_582 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_pk_ciphertext_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_secret_pk_ciphertext_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_secret_pk_ciphertext_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1 );

    SC_METHOD(thread_secret_pk_ciphertext_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_secret_pk_plaintext_address0);
    sensitive << ( zext_ln657_reg_582 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_pk_plaintext_address0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_secret_pk_plaintext_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_pk_plaintext_ce0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_secret_pk_plaintext_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_sk_pk_plaintext_ce1 );

    SC_METHOD(thread_secret_pk_plaintext_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_select_ln625_fu_456_p3);
    sensitive << ( ap_phi_mux_ret_phi_fu_287_p4 );

    SC_METHOD(thread_sext_ln119_fu_529_p1);
    sensitive << ( loop_0_reg_295 );

    SC_METHOD(thread_sext_ln120_fu_551_p1);
    sensitive << ( add_ln120_fu_545_p2 );

    SC_METHOD(thread_sext_ln657_i_cast_fu_435_p1);
    sensitive << ( loop_0_i_reg_272 );

    SC_METHOD(thread_sk_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln658_fu_451_p1 );
    sensitive << ( zext_ln659_fu_475_p1 );

    SC_METHOD(thread_sk_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln660_fu_485_p1 );

    SC_METHOD(thread_sk_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sk_ce1);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sm_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_signature_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sext_ln120_fu_551_p1 );

    SC_METHOD(thread_sm_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sm_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_signature_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sm_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sm_d0);
    sensitive << ( m_q0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( trunc_ln111_reg_645 );
    sensitive << ( grp_picnic_sign_fu_324_signature_d0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sm_d1);
    sensitive << ( trunc_ln_reg_650 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sm_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_signature_we0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sm_we1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_smlen_address0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_smlen_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_smlen_d0);
    sensitive << ( add_ln108_reg_640 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_smlen_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_trunc_ln111_fu_515_p1);
    sensitive << ( grp_picnic_sign_fu_324_ap_return_1 );

    SC_METHOD(thread_trunc_ln632_fu_349_p1);
    sensitive << ( sk_q0 );

    SC_METHOD(thread_viewOutputs_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_viewOutputs_address0 );

    SC_METHOD(thread_viewOutputs_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_viewOutputs_address1 );

    SC_METHOD(thread_viewOutputs_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_viewOutputs_ce0 );

    SC_METHOD(thread_viewOutputs_ce1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_viewOutputs_ce1 );

    SC_METHOD(thread_viewOutputs_d0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_viewOutputs_d0 );

    SC_METHOD(thread_viewOutputs_we0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_viewOutputs_we0 );

    SC_METHOD(thread_zext_ln657_fu_431_p1);
    sensitive << ( loop_0_i_reg_272 );

    SC_METHOD(thread_zext_ln658_fu_451_p1);
    sensitive << ( loop_22_fu_445_p2 );

    SC_METHOD(thread_zext_ln659_fu_475_p1);
    sensitive << ( add_ln659_fu_470_p2 );

    SC_METHOD(thread_zext_ln660_fu_485_p1);
    sensitive << ( add_ln660_fu_480_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( empty_96_reg_578 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln657_fu_439_p2 );
    sensitive << ( ap_phi_mux_ret_phi_fu_287_p4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_picnic_sign_fu_324_ap_done );
    sensitive << ( icmp_ln101_fu_498_p2 );
    sensitive << ( icmp_ln104_fu_504_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( icmp_ln119_fu_534_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000001";
    grp_picnic_sign_fu_324_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "crypto_sign_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sm_address0, "(port)sm_address0");
    sc_trace(mVcdFile, sm_ce0, "(port)sm_ce0");
    sc_trace(mVcdFile, sm_we0, "(port)sm_we0");
    sc_trace(mVcdFile, sm_d0, "(port)sm_d0");
    sc_trace(mVcdFile, sm_address1, "(port)sm_address1");
    sc_trace(mVcdFile, sm_ce1, "(port)sm_ce1");
    sc_trace(mVcdFile, sm_we1, "(port)sm_we1");
    sc_trace(mVcdFile, sm_d1, "(port)sm_d1");
    sc_trace(mVcdFile, smlen_address0, "(port)smlen_address0");
    sc_trace(mVcdFile, smlen_ce0, "(port)smlen_ce0");
    sc_trace(mVcdFile, smlen_we0, "(port)smlen_we0");
    sc_trace(mVcdFile, smlen_d0, "(port)smlen_d0");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_q0, "(port)m_q0");
    sc_trace(mVcdFile, mlen, "(port)mlen");
    sc_trace(mVcdFile, sk_address0, "(port)sk_address0");
    sc_trace(mVcdFile, sk_ce0, "(port)sk_ce0");
    sc_trace(mVcdFile, sk_q0, "(port)sk_q0");
    sc_trace(mVcdFile, sk_address1, "(port)sk_address1");
    sc_trace(mVcdFile, sk_ce1, "(port)sk_ce1");
    sc_trace(mVcdFile, sk_q1, "(port)sk_q1");
    sc_trace(mVcdFile, viewOutputs_address0, "(port)viewOutputs_address0");
    sc_trace(mVcdFile, viewOutputs_ce0, "(port)viewOutputs_ce0");
    sc_trace(mVcdFile, viewOutputs_we0, "(port)viewOutputs_we0");
    sc_trace(mVcdFile, viewOutputs_d0, "(port)viewOutputs_d0");
    sc_trace(mVcdFile, viewOutputs_q0, "(port)viewOutputs_q0");
    sc_trace(mVcdFile, viewOutputs_address1, "(port)viewOutputs_address1");
    sc_trace(mVcdFile, viewOutputs_ce1, "(port)viewOutputs_ce1");
    sc_trace(mVcdFile, viewOutputs_q1, "(port)viewOutputs_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, empty_96_fu_425_p2, "empty_96_fu_425_p2");
    sc_trace(mVcdFile, empty_96_reg_578, "empty_96_reg_578");
    sc_trace(mVcdFile, zext_ln657_fu_431_p1, "zext_ln657_fu_431_p1");
    sc_trace(mVcdFile, zext_ln657_reg_582, "zext_ln657_reg_582");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sext_ln657_i_cast_fu_435_p1, "sext_ln657_i_cast_fu_435_p1");
    sc_trace(mVcdFile, sext_ln657_i_cast_reg_589, "sext_ln657_i_cast_reg_589");
    sc_trace(mVcdFile, loop_22_fu_445_p2, "loop_22_fu_445_p2");
    sc_trace(mVcdFile, loop_22_reg_598, "loop_22_reg_598");
    sc_trace(mVcdFile, icmp_ln657_fu_439_p2, "icmp_ln657_fu_439_p2");
    sc_trace(mVcdFile, select_ln625_fu_456_p3, "select_ln625_fu_456_p3");
    sc_trace(mVcdFile, add_ln100_fu_464_p2, "add_ln100_fu_464_p2");
    sc_trace(mVcdFile, add_ln100_reg_613, "add_ln100_reg_613");
    sc_trace(mVcdFile, ap_phi_mux_ret_phi_fu_287_p4, "ap_phi_mux_ret_phi_fu_287_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_ready, "grp_picnic_sign_fu_324_ap_ready");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_done, "grp_picnic_sign_fu_324_ap_done");
    sc_trace(mVcdFile, add_ln108_fu_510_p2, "add_ln108_fu_510_p2");
    sc_trace(mVcdFile, add_ln108_reg_640, "add_ln108_reg_640");
    sc_trace(mVcdFile, icmp_ln101_fu_498_p2, "icmp_ln101_fu_498_p2");
    sc_trace(mVcdFile, icmp_ln104_fu_504_p2, "icmp_ln104_fu_504_p2");
    sc_trace(mVcdFile, trunc_ln111_fu_515_p1, "trunc_ln111_fu_515_p1");
    sc_trace(mVcdFile, trunc_ln111_reg_645, "trunc_ln111_reg_645");
    sc_trace(mVcdFile, trunc_ln_reg_650, "trunc_ln_reg_650");
    sc_trace(mVcdFile, loop_fu_539_p2, "loop_fu_539_p2");
    sc_trace(mVcdFile, loop_reg_658, "loop_reg_658");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, icmp_ln119_fu_534_p2, "icmp_ln119_fu_534_p2");
    sc_trace(mVcdFile, secret_data_address0, "secret_data_address0");
    sc_trace(mVcdFile, secret_data_ce0, "secret_data_ce0");
    sc_trace(mVcdFile, secret_data_we0, "secret_data_we0");
    sc_trace(mVcdFile, secret_data_q0, "secret_data_q0");
    sc_trace(mVcdFile, secret_data_ce1, "secret_data_ce1");
    sc_trace(mVcdFile, secret_data_q1, "secret_data_q1");
    sc_trace(mVcdFile, secret_pk_plaintext_address0, "secret_pk_plaintext_address0");
    sc_trace(mVcdFile, secret_pk_plaintext_ce0, "secret_pk_plaintext_ce0");
    sc_trace(mVcdFile, secret_pk_plaintext_we0, "secret_pk_plaintext_we0");
    sc_trace(mVcdFile, secret_pk_plaintext_q0, "secret_pk_plaintext_q0");
    sc_trace(mVcdFile, secret_pk_plaintext_ce1, "secret_pk_plaintext_ce1");
    sc_trace(mVcdFile, secret_pk_plaintext_q1, "secret_pk_plaintext_q1");
    sc_trace(mVcdFile, secret_pk_ciphertext_address0, "secret_pk_ciphertext_address0");
    sc_trace(mVcdFile, secret_pk_ciphertext_ce0, "secret_pk_ciphertext_ce0");
    sc_trace(mVcdFile, secret_pk_ciphertext_we0, "secret_pk_ciphertext_we0");
    sc_trace(mVcdFile, secret_pk_ciphertext_q0, "secret_pk_ciphertext_q0");
    sc_trace(mVcdFile, secret_pk_ciphertext_ce1, "secret_pk_ciphertext_ce1");
    sc_trace(mVcdFile, secret_pk_ciphertext_q1, "secret_pk_ciphertext_q1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_start, "grp_picnic_sign_fu_324_ap_start");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_idle, "grp_picnic_sign_fu_324_ap_idle");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_data_address0, "grp_picnic_sign_fu_324_sk_data_address0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_data_ce0, "grp_picnic_sign_fu_324_sk_data_ce0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_data_address1, "grp_picnic_sign_fu_324_sk_data_address1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_data_ce1, "grp_picnic_sign_fu_324_sk_data_ce1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_plaintext_address0, "grp_picnic_sign_fu_324_sk_pk_plaintext_address0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_plaintext_ce0, "grp_picnic_sign_fu_324_sk_pk_plaintext_ce0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_plaintext_address1, "grp_picnic_sign_fu_324_sk_pk_plaintext_address1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_plaintext_ce1, "grp_picnic_sign_fu_324_sk_pk_plaintext_ce1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_ciphertext_address0, "grp_picnic_sign_fu_324_sk_pk_ciphertext_address0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0, "grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_ciphertext_address1, "grp_picnic_sign_fu_324_sk_pk_ciphertext_address1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1, "grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_message_address0, "grp_picnic_sign_fu_324_message_address0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_message_ce0, "grp_picnic_sign_fu_324_message_ce0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_signature_address0, "grp_picnic_sign_fu_324_signature_address0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_signature_ce0, "grp_picnic_sign_fu_324_signature_ce0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_signature_we0, "grp_picnic_sign_fu_324_signature_we0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_signature_d0, "grp_picnic_sign_fu_324_signature_d0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_viewOutputs_address0, "grp_picnic_sign_fu_324_viewOutputs_address0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_viewOutputs_ce0, "grp_picnic_sign_fu_324_viewOutputs_ce0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_viewOutputs_we0, "grp_picnic_sign_fu_324_viewOutputs_we0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_viewOutputs_d0, "grp_picnic_sign_fu_324_viewOutputs_d0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_viewOutputs_address1, "grp_picnic_sign_fu_324_viewOutputs_address1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_viewOutputs_ce1, "grp_picnic_sign_fu_324_viewOutputs_ce1");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_return_0, "grp_picnic_sign_fu_324_ap_return_0");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_return_1, "grp_picnic_sign_fu_324_ap_return_1");
    sc_trace(mVcdFile, loop_0_i_reg_272, "loop_0_i_reg_272");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ret_reg_283, "ret_reg_283");
    sc_trace(mVcdFile, loop_0_reg_295, "loop_0_reg_295");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, p_0_reg_307, "p_0_reg_307");
    sc_trace(mVcdFile, grp_picnic_sign_fu_324_ap_start_reg, "grp_picnic_sign_fu_324_ap_start_reg");
    sc_trace(mVcdFile, zext_ln658_fu_451_p1, "zext_ln658_fu_451_p1");
    sc_trace(mVcdFile, zext_ln659_fu_475_p1, "zext_ln659_fu_475_p1");
    sc_trace(mVcdFile, zext_ln660_fu_485_p1, "zext_ln660_fu_485_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sext_ln119_fu_529_p1, "sext_ln119_fu_529_p1");
    sc_trace(mVcdFile, sext_ln120_fu_551_p1, "sext_ln120_fu_551_p1");
    sc_trace(mVcdFile, trunc_ln632_fu_349_p1, "trunc_ln632_fu_349_p1");
    sc_trace(mVcdFile, empty_85_fu_359_p2, "empty_85_fu_359_p2");
    sc_trace(mVcdFile, empty_fu_353_p2, "empty_fu_353_p2");
    sc_trace(mVcdFile, empty_87_fu_371_p2, "empty_87_fu_371_p2");
    sc_trace(mVcdFile, empty_86_fu_365_p2, "empty_86_fu_365_p2");
    sc_trace(mVcdFile, empty_89_fu_383_p2, "empty_89_fu_383_p2");
    sc_trace(mVcdFile, empty_88_fu_377_p2, "empty_88_fu_377_p2");
    sc_trace(mVcdFile, empty_91_fu_395_p2, "empty_91_fu_395_p2");
    sc_trace(mVcdFile, empty_90_fu_389_p2, "empty_90_fu_389_p2");
    sc_trace(mVcdFile, empty_93_fu_407_p2, "empty_93_fu_407_p2");
    sc_trace(mVcdFile, empty_92_fu_401_p2, "empty_92_fu_401_p2");
    sc_trace(mVcdFile, empty_95_fu_419_p2, "empty_95_fu_419_p2");
    sc_trace(mVcdFile, empty_94_fu_413_p2, "empty_94_fu_413_p2");
    sc_trace(mVcdFile, add_ln659_fu_470_p2, "add_ln659_fu_470_p2");
    sc_trace(mVcdFile, add_ln660_fu_480_p2, "add_ln660_fu_480_p2");
    sc_trace(mVcdFile, add_ln120_fu_545_p2, "add_ln120_fu_545_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("crypto_sign.hdltvin.dat");
    mHdltvoutHandle.open("crypto_sign.hdltvout.dat");
}

crypto_sign::~crypto_sign() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete secret_data_U;
    delete secret_pk_plaintext_U;
    delete secret_pk_ciphertext_U;
    delete grp_picnic_sign_fu_324;
}

void crypto_sign::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_picnic_sign_fu_324_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             ((esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1) && 
               esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_ret_phi_fu_287_p4.read())) || 
              (esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_1) && 
               esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_ret_phi_fu_287_p4.read()))))) {
            grp_picnic_sign_fu_324_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_picnic_sign_fu_324_ap_ready.read())) {
            grp_picnic_sign_fu_324_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(empty_96_fu_425_p2.read(), ap_const_lv1_0))) {
        loop_0_i_reg_272 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        loop_0_i_reg_272 = loop_22_reg_598.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        loop_0_reg_295 = loop_reg_658.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        loop_0_reg_295 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln119_fu_534_p2.read()))) {
        p_0_reg_307 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(grp_picnic_sign_fu_324_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln101_fu_498_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_fu_504_p2.read()))) {
        p_0_reg_307 = ap_const_lv32_FFFFFFFF;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(grp_picnic_sign_fu_324_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_498_p2.read()))) {
        p_0_reg_307 = grp_picnic_sign_fu_324_ap_return_0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                ((esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1) && 
                  esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_ret_phi_fu_287_p4.read())) || 
                 (esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_1) && 
                  esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_ret_phi_fu_287_p4.read()))))) {
        p_0_reg_307 = select_ln625_fu_456_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1))) {
        ret_reg_283 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(empty_96_fu_425_p2.read(), ap_const_lv1_1))) {
        ret_reg_283 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && ((esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_ret_phi_fu_287_p4.read())) || 
  (esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_ret_phi_fu_287_p4.read()))))) {
        add_ln100_reg_613 = add_ln100_fu_464_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_picnic_sign_fu_324_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln101_fu_498_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln104_fu_504_p2.read()))) {
        add_ln108_reg_640 = add_ln108_fu_510_p2.read();
        trunc_ln111_reg_645 = trunc_ln111_fu_515_p1.read();
        trunc_ln_reg_650 = grp_picnic_sign_fu_324_ap_return_1.read().range(15, 8);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_96_reg_578 = empty_96_fu_425_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_0))) {
        loop_22_reg_598 = loop_22_fu_445_p2.read();
        sext_ln657_i_cast_reg_589 = sext_ln657_i_cast_fu_435_p1.read();
        zext_ln657_reg_582 = zext_ln657_fu_431_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        loop_reg_658 = loop_fu_539_p2.read();
    }
}

void crypto_sign::thread_add_ln100_fu_464_p2() {
    add_ln100_fu_464_p2 = (!mlen.read().is_01() || !ap_const_lv64_4.is_01())? sc_lv<64>(): (sc_biguint<64>(mlen.read()) + sc_biguint<64>(ap_const_lv64_4));
}

void crypto_sign::thread_add_ln108_fu_510_p2() {
    add_ln108_fu_510_p2 = (!add_ln100_reg_613.read().is_01() || !grp_picnic_sign_fu_324_ap_return_1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(add_ln100_reg_613.read()) + sc_biguint<64>(grp_picnic_sign_fu_324_ap_return_1.read()));
}

void crypto_sign::thread_add_ln120_fu_545_p2() {
    add_ln120_fu_545_p2 = (!loop_0_reg_295.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<32>(): (sc_bigint<32>(loop_0_reg_295.read()) + sc_biguint<32>(ap_const_lv32_4));
}

void crypto_sign::thread_add_ln659_fu_470_p2() {
    add_ln659_fu_470_p2 = (!sext_ln657_i_cast_reg_589.read().is_01() || !ap_const_lv6_11.is_01())? sc_lv<6>(): (sc_biguint<6>(sext_ln657_i_cast_reg_589.read()) + sc_biguint<6>(ap_const_lv6_11));
}

void crypto_sign::thread_add_ln660_fu_480_p2() {
    add_ln660_fu_480_p2 = (!sext_ln657_i_cast_reg_589.read().is_01() || !ap_const_lv6_21.is_01())? sc_lv<6>(): (sc_biguint<6>(sext_ln657_i_cast_reg_589.read()) + sc_bigint<6>(ap_const_lv6_21));
}

void crypto_sign::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void crypto_sign::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void crypto_sign::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void crypto_sign::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void crypto_sign::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void crypto_sign::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void crypto_sign::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void crypto_sign::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void crypto_sign::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void crypto_sign::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void crypto_sign::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void crypto_sign::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void crypto_sign::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void crypto_sign::thread_ap_phi_mux_ret_phi_fu_287_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1))) {
        ap_phi_mux_ret_phi_fu_287_p4 = ap_const_lv1_0;
    } else {
        ap_phi_mux_ret_phi_fu_287_p4 = ret_reg_283.read();
    }
}

void crypto_sign::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void crypto_sign::thread_ap_return() {
    ap_return = p_0_reg_307.read();
}

void crypto_sign::thread_empty_85_fu_359_p2() {
    empty_85_fu_359_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_E);
}

void crypto_sign::thread_empty_86_fu_365_p2() {
    empty_86_fu_365_p2 = (empty_85_fu_359_p2.read() | empty_fu_353_p2.read());
}

void crypto_sign::thread_empty_87_fu_371_p2() {
    empty_87_fu_371_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_D.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_D);
}

void crypto_sign::thread_empty_88_fu_377_p2() {
    empty_88_fu_377_p2 = (empty_87_fu_371_p2.read() | empty_86_fu_365_p2.read());
}

void crypto_sign::thread_empty_89_fu_383_p2() {
    empty_89_fu_383_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_C);
}

void crypto_sign::thread_empty_90_fu_389_p2() {
    empty_90_fu_389_p2 = (empty_89_fu_383_p2.read() | empty_88_fu_377_p2.read());
}

void crypto_sign::thread_empty_91_fu_395_p2() {
    empty_91_fu_395_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_B);
}

void crypto_sign::thread_empty_92_fu_401_p2() {
    empty_92_fu_401_p2 = (empty_91_fu_395_p2.read() | empty_90_fu_389_p2.read());
}

void crypto_sign::thread_empty_93_fu_407_p2() {
    empty_93_fu_407_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_A);
}

void crypto_sign::thread_empty_94_fu_413_p2() {
    empty_94_fu_413_p2 = (empty_93_fu_407_p2.read() | empty_92_fu_401_p2.read());
}

void crypto_sign::thread_empty_95_fu_419_p2() {
    empty_95_fu_419_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_0);
}

void crypto_sign::thread_empty_96_fu_425_p2() {
    empty_96_fu_425_p2 = (empty_95_fu_419_p2.read() | empty_94_fu_413_p2.read());
}

void crypto_sign::thread_empty_fu_353_p2() {
    empty_fu_353_p2 = (!trunc_ln632_fu_349_p1.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln632_fu_349_p1.read() == ap_const_lv4_F);
}

void crypto_sign::thread_grp_picnic_sign_fu_324_ap_start() {
    grp_picnic_sign_fu_324_ap_start = grp_picnic_sign_fu_324_ap_start_reg.read();
}

void crypto_sign::thread_icmp_ln101_fu_498_p2() {
    icmp_ln101_fu_498_p2 = (!grp_picnic_sign_fu_324_ap_return_0.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(grp_picnic_sign_fu_324_ap_return_0.read() == ap_const_lv32_0);
}

void crypto_sign::thread_icmp_ln104_fu_504_p2() {
    icmp_ln104_fu_504_p2 = (!grp_picnic_sign_fu_324_ap_return_1.read().is_01() || !ap_const_lv64_84F4.is_01())? sc_lv<1>(): (sc_biguint<64>(grp_picnic_sign_fu_324_ap_return_1.read()) > sc_biguint<64>(ap_const_lv64_84F4));
}

void crypto_sign::thread_icmp_ln119_fu_534_p2() {
    icmp_ln119_fu_534_p2 = (!sext_ln119_fu_529_p1.read().is_01() || !mlen.read().is_01())? sc_lv<1>(): (sc_biguint<64>(sext_ln119_fu_529_p1.read()) < sc_biguint<64>(mlen.read()));
}

void crypto_sign::thread_icmp_ln657_fu_439_p2() {
    icmp_ln657_fu_439_p2 = (!loop_0_i_reg_272.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(loop_0_i_reg_272.read() == ap_const_lv5_10);
}

void crypto_sign::thread_loop_22_fu_445_p2() {
    loop_22_fu_445_p2 = (!loop_0_i_reg_272.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(loop_0_i_reg_272.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void crypto_sign::thread_loop_fu_539_p2() {
    loop_fu_539_p2 = (!loop_0_reg_295.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(loop_0_reg_295.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void crypto_sign::thread_m_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        m_address0 =  (sc_lv<12>) (sext_ln119_fu_529_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_address0 = grp_picnic_sign_fu_324_message_address0.read();
    } else {
        m_address0 = "XXXXXXXXXXXX";
    }
}

void crypto_sign::thread_m_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        m_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        m_ce0 = grp_picnic_sign_fu_324_message_ce0.read();
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        secret_data_address0 =  (sc_lv<5>) (zext_ln657_reg_582.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_data_address0 = grp_picnic_sign_fu_324_sk_data_address0.read();
    } else {
        secret_data_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign::thread_secret_data_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        secret_data_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_data_ce0 = grp_picnic_sign_fu_324_sk_data_ce0.read();
    } else {
        secret_data_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_data_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_data_ce1 = grp_picnic_sign_fu_324_sk_data_ce1.read();
    } else {
        secret_data_ce1 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_data_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        secret_data_we0 = ap_const_logic_1;
    } else {
        secret_data_we0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_pk_ciphertext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        secret_pk_ciphertext_address0 =  (sc_lv<5>) (zext_ln657_reg_582.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_pk_ciphertext_address0 = grp_picnic_sign_fu_324_sk_pk_ciphertext_address0.read();
    } else {
        secret_pk_ciphertext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign::thread_secret_pk_ciphertext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        secret_pk_ciphertext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_pk_ciphertext_ce0 = grp_picnic_sign_fu_324_sk_pk_ciphertext_ce0.read();
    } else {
        secret_pk_ciphertext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_pk_ciphertext_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_pk_ciphertext_ce1 = grp_picnic_sign_fu_324_sk_pk_ciphertext_ce1.read();
    } else {
        secret_pk_ciphertext_ce1 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_pk_ciphertext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        secret_pk_ciphertext_we0 = ap_const_logic_1;
    } else {
        secret_pk_ciphertext_we0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_pk_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        secret_pk_plaintext_address0 =  (sc_lv<5>) (zext_ln657_reg_582.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_pk_plaintext_address0 = grp_picnic_sign_fu_324_sk_pk_plaintext_address0.read();
    } else {
        secret_pk_plaintext_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void crypto_sign::thread_secret_pk_plaintext_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        secret_pk_plaintext_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_pk_plaintext_ce0 = grp_picnic_sign_fu_324_sk_pk_plaintext_ce0.read();
    } else {
        secret_pk_plaintext_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_pk_plaintext_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        secret_pk_plaintext_ce1 = grp_picnic_sign_fu_324_sk_pk_plaintext_ce1.read();
    } else {
        secret_pk_plaintext_ce1 = ap_const_logic_0;
    }
}

void crypto_sign::thread_secret_pk_plaintext_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        secret_pk_plaintext_we0 = ap_const_logic_1;
    } else {
        secret_pk_plaintext_we0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_select_ln625_fu_456_p3() {
    select_ln625_fu_456_p3 = (!ap_phi_mux_ret_phi_fu_287_p4.read()[0].is_01())? sc_lv<32>(): ((ap_phi_mux_ret_phi_fu_287_p4.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void crypto_sign::thread_sext_ln119_fu_529_p1() {
    sext_ln119_fu_529_p1 = esl_sext<64,32>(loop_0_reg_295.read());
}

void crypto_sign::thread_sext_ln120_fu_551_p1() {
    sext_ln120_fu_551_p1 = esl_sext<64,32>(add_ln120_fu_545_p2.read());
}

void crypto_sign::thread_sext_ln657_i_cast_fu_435_p1() {
    sext_ln657_i_cast_fu_435_p1 = esl_zext<6,5>(loop_0_i_reg_272.read());
}

void crypto_sign::thread_sk_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_address0 =  (sc_lv<6>) (zext_ln659_fu_475_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sk_address0 =  (sc_lv<6>) (zext_ln658_fu_451_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        sk_address0 =  (sc_lv<6>) (ap_const_lv64_0);
    } else {
        sk_address0 =  (sc_lv<6>) ("XXXXXX");
    }
}

void crypto_sign::thread_sk_address1() {
    sk_address1 =  (sc_lv<6>) (zext_ln660_fu_485_p1.read());
}

void crypto_sign::thread_sk_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        sk_ce0 = ap_const_logic_1;
    } else {
        sk_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_sk_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sk_ce1 = ap_const_logic_1;
    } else {
        sk_ce1 = ap_const_logic_0;
    }
}

void crypto_sign::thread_sm_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sm_address0 =  (sc_lv<16>) (sext_ln120_fu_551_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sm_address0 =  (sc_lv<16>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_address0 =  (sc_lv<16>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sm_address0 = grp_picnic_sign_fu_324_signature_address0.read();
    } else {
        sm_address0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void crypto_sign::thread_sm_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sm_address1 =  (sc_lv<16>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_address1 =  (sc_lv<16>) (ap_const_lv64_1);
    } else {
        sm_address1 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void crypto_sign::thread_sm_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sm_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sm_ce0 = grp_picnic_sign_fu_324_signature_ce0.read();
    } else {
        sm_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_sm_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sm_ce1 = ap_const_logic_1;
    } else {
        sm_ce1 = ap_const_logic_0;
    }
}

void crypto_sign::thread_sm_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        sm_d0 = m_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sm_d0 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_d0 = trunc_ln111_reg_645.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sm_d0 = grp_picnic_sign_fu_324_signature_d0.read();
    } else {
        sm_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_sign::thread_sm_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sm_d1 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sm_d1 = trunc_ln_reg_650.read();
    } else {
        sm_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void crypto_sign::thread_sm_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sm_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sm_we0 = grp_picnic_sign_fu_324_signature_we0.read();
    } else {
        sm_we0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_sm_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        sm_we1 = ap_const_logic_1;
    } else {
        sm_we1 = ap_const_logic_0;
    }
}

void crypto_sign::thread_smlen_address0() {
    smlen_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void crypto_sign::thread_smlen_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        smlen_ce0 = ap_const_logic_1;
    } else {
        smlen_ce0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_smlen_d0() {
    smlen_d0 = add_ln108_reg_640.read();
}

void crypto_sign::thread_smlen_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        smlen_we0 = ap_const_logic_1;
    } else {
        smlen_we0 = ap_const_logic_0;
    }
}

void crypto_sign::thread_trunc_ln111_fu_515_p1() {
    trunc_ln111_fu_515_p1 = grp_picnic_sign_fu_324_ap_return_1.read().range(8-1, 0);
}

void crypto_sign::thread_trunc_ln632_fu_349_p1() {
    trunc_ln632_fu_349_p1 = sk_q0.read().range(4-1, 0);
}

void crypto_sign::thread_viewOutputs_address0() {
    viewOutputs_address0 = grp_picnic_sign_fu_324_viewOutputs_address0.read();
}

void crypto_sign::thread_viewOutputs_address1() {
    viewOutputs_address1 = grp_picnic_sign_fu_324_viewOutputs_address1.read();
}

void crypto_sign::thread_viewOutputs_ce0() {
    viewOutputs_ce0 = grp_picnic_sign_fu_324_viewOutputs_ce0.read();
}

void crypto_sign::thread_viewOutputs_ce1() {
    viewOutputs_ce1 = grp_picnic_sign_fu_324_viewOutputs_ce1.read();
}

void crypto_sign::thread_viewOutputs_d0() {
    viewOutputs_d0 = grp_picnic_sign_fu_324_viewOutputs_d0.read();
}

void crypto_sign::thread_viewOutputs_we0() {
    viewOutputs_we0 = grp_picnic_sign_fu_324_viewOutputs_we0.read();
}

void crypto_sign::thread_zext_ln657_fu_431_p1() {
    zext_ln657_fu_431_p1 = esl_zext<64,5>(loop_0_i_reg_272.read());
}

void crypto_sign::thread_zext_ln658_fu_451_p1() {
    zext_ln658_fu_451_p1 = esl_zext<64,5>(loop_22_fu_445_p2.read());
}

void crypto_sign::thread_zext_ln659_fu_475_p1() {
    zext_ln659_fu_475_p1 = esl_zext<64,6>(add_ln659_fu_470_p2.read());
}

void crypto_sign::thread_zext_ln660_fu_485_p1() {
    zext_ln660_fu_485_p1 = esl_zext<64,6>(add_ln660_fu_480_p2.read());
}

void crypto_sign::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && ((esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_ret_phi_fu_287_p4.read())) || 
  (esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_ret_phi_fu_287_p4.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && ((esl_seteq<1,1,1>(icmp_ln657_fu_439_p2.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_ret_phi_fu_287_p4.read())) || 
  (esl_seteq<1,1,1>(empty_96_reg_578.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_ret_phi_fu_287_p4.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_picnic_sign_fu_324_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln101_fu_498_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln104_fu_504_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_picnic_sign_fu_324_ap_done.read(), ap_const_logic_1) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln104_fu_504_p2.read()) || 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_498_p2.read())))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln119_fu_534_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void crypto_sign::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_address0\" :  \"" << sm_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_ce0\" :  \"" << sm_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_we0\" :  \"" << sm_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_d0\" :  \"" << sm_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_address1\" :  \"" << sm_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_ce1\" :  \"" << sm_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_we1\" :  \"" << sm_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sm_d1\" :  \"" << sm_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"smlen_address0\" :  \"" << smlen_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"smlen_ce0\" :  \"" << smlen_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"smlen_we0\" :  \"" << smlen_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"smlen_d0\" :  \"" << smlen_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_address0\" :  \"" << m_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_ce0\" :  \"" << m_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_q0\" :  \"" << m_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mlen\" :  \"" << mlen.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address0\" :  \"" << sk_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce0\" :  \"" << sk_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sk_q0\" :  \"" << sk_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_address1\" :  \"" << sk_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sk_ce1\" :  \"" << sk_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sk_q1\" :  \"" << sk_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_address0\" :  \"" << viewOutputs_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_ce0\" :  \"" << viewOutputs_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_we0\" :  \"" << viewOutputs_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_d0\" :  \"" << viewOutputs_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"viewOutputs_q0\" :  \"" << viewOutputs_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_address1\" :  \"" << viewOutputs_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"viewOutputs_ce1\" :  \"" << viewOutputs_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"viewOutputs_q1\" :  \"" << viewOutputs_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

