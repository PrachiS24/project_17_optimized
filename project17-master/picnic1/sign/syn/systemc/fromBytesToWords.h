// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fromBytesToWords_HH_
#define _fromBytesToWords_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fromBytesToWords : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > stateAsWords_address0;
    sc_out< sc_logic > stateAsWords_ce0;
    sc_out< sc_logic > stateAsWords_we0;
    sc_out< sc_lv<64> > stateAsWords_d0;
    sc_in< sc_lv<64> > stateAsWords_q0;
    sc_out< sc_lv<8> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_in< sc_lv<8> > state_q0;


    // Module declarations
    fromBytesToWords(sc_module_name name);
    SC_HAS_PROCESS(fromBytesToWords);

    ~fromBytesToWords();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln269_fu_98_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > i_fu_104_p2;
    sc_signal< sc_lv<5> > i_reg_186;
    sc_signal< sc_lv<5> > stateAsWords_addr_reg_191;
    sc_signal< sc_lv<8> > shl_ln272_1_fu_115_p3;
    sc_signal< sc_lv<8> > shl_ln272_1_reg_196;
    sc_signal< sc_lv<4> > j_fu_129_p2;
    sc_signal< sc_lv<4> > j_reg_204;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln271_fu_123_p2;
    sc_signal< sc_lv<5> > i_0_reg_75;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > j_0_reg_86;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln270_fu_110_p1;
    sc_signal< sc_lv<64> > zext_ln272_fu_144_p1;
    sc_signal< sc_lv<64> > or_ln272_fu_175_p2;
    sc_signal< sc_lv<8> > zext_ln271_fu_135_p1;
    sc_signal< sc_lv<8> > add_ln272_fu_139_p2;
    sc_signal< sc_lv<3> > trunc_ln272_fu_153_p1;
    sc_signal< sc_lv<6> > shl_ln_fu_157_p3;
    sc_signal< sc_lv<64> > zext_ln272_1_fu_149_p1;
    sc_signal< sc_lv<64> > zext_ln272_2_fu_165_p1;
    sc_signal< sc_lv<64> > shl_ln272_fu_169_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln272_fu_139_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_104_p2();
    void thread_icmp_ln269_fu_98_p2();
    void thread_icmp_ln271_fu_123_p2();
    void thread_j_fu_129_p2();
    void thread_or_ln272_fu_175_p2();
    void thread_shl_ln272_1_fu_115_p3();
    void thread_shl_ln272_fu_169_p2();
    void thread_shl_ln_fu_157_p3();
    void thread_stateAsWords_address0();
    void thread_stateAsWords_ce0();
    void thread_stateAsWords_d0();
    void thread_stateAsWords_we0();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_trunc_ln272_fu_153_p1();
    void thread_zext_ln270_fu_110_p1();
    void thread_zext_ln271_fu_135_p1();
    void thread_zext_ln272_1_fu_149_p1();
    void thread_zext_ln272_2_fu_165_p1();
    void thread_zext_ln272_fu_144_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
