// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mpc_AND_2_HH_
#define _mpc_AND_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "crypto_sign_mux_3VhK.h"
#include "crypto_sign_mac_mWhU.h"

namespace ap_rtl {

struct mpc_AND_2 : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > in1_0_read;
    sc_in< sc_lv<8> > in1_1_read;
    sc_in< sc_lv<8> > in1_2_read;
    sc_in< sc_lv<8> > in2_0_read;
    sc_in< sc_lv<8> > in2_1_read;
    sc_in< sc_lv<8> > in2_2_read;
    sc_in< sc_lv<8> > out_0_read;
    sc_in< sc_lv<8> > out_1_read;
    sc_in< sc_lv<8> > out_2_read;
    sc_out< sc_lv<9> > rand_tape_address0;
    sc_out< sc_logic > rand_tape_ce0;
    sc_in< sc_lv<8> > rand_tape_q0;
    sc_out< sc_lv<9> > rand_tape_address1;
    sc_out< sc_logic > rand_tape_ce1;
    sc_in< sc_lv<8> > rand_tape_q1;
    sc_in< sc_lv<32> > rand_pos_read;
    sc_out< sc_lv<16> > views_communicatedBi_address0;
    sc_out< sc_logic > views_communicatedBi_ce0;
    sc_out< sc_logic > views_communicatedBi_we0;
    sc_out< sc_lv<8> > views_communicatedBi_d0;
    sc_in< sc_lv<8> > views_communicatedBi_q0;
    sc_in< sc_lv<8> > views_communicatedBits_offset;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;


    // Module declarations
    mpc_AND_2(sc_module_name name);
    SC_HAS_PROCESS(mpc_AND_2);

    ~mpc_AND_2();

    sc_trace_file* mVcdFile;

    crypto_sign_mux_3VhK<1,1,8,8,8,2,8>* crypto_sign_mux_3VhK_U94;
    crypto_sign_mux_3VhK<1,1,8,8,8,2,8>* crypto_sign_mux_3VhK_U95;
    crypto_sign_mux_3VhK<1,1,8,8,8,2,8>* crypto_sign_mux_3VhK_U96;
    crypto_sign_mux_3VhK<1,1,8,8,8,2,8>* crypto_sign_mux_3VhK_U97;
    crypto_sign_mux_3VhK<1,1,8,8,8,2,8>* crypto_sign_mux_3VhK_U98;
    crypto_sign_mux_3VhK<1,1,8,8,8,2,8>* crypto_sign_mux_3VhK_U99;
    crypto_sign_mac_mWhU<1,1,12,8,17,17>* crypto_sign_mac_mWhU_U100;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<17> > zext_ln54_cast1_reg_693;
    sc_signal< sc_lv<10> > zext_ln54_cast_reg_698;
    sc_signal< sc_lv<3> > trunc_ln54_fu_268_p1;
    sc_signal< sc_lv<3> > trunc_ln54_reg_709;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > zext_ln54_11_fu_312_p1;
    sc_signal< sc_lv<8> > zext_ln54_11_reg_724;
    sc_signal< sc_lv<1> > r_0_fu_317_p1;
    sc_signal< sc_lv<1> > r_0_reg_732;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<12> > sext_ln66_fu_343_p1;
    sc_signal< sc_lv<12> > sext_ln66_reg_788;
    sc_signal< sc_lv<8> > zext_ln54_12_fu_347_p1;
    sc_signal< sc_lv<8> > zext_ln54_12_reg_793;
    sc_signal< sc_lv<8> > zext_ln54_13_fu_354_p1;
    sc_signal< sc_lv<8> > zext_ln54_13_reg_799;
    sc_signal< sc_lv<8> > zext_ln54_14_fu_367_p1;
    sc_signal< sc_lv<8> > zext_ln54_14_reg_805;
    sc_signal< sc_lv<8> > xor_ln66_fu_376_p2;
    sc_signal< sc_lv<8> > xor_ln66_reg_811;
    sc_signal< sc_lv<2> > i_fu_388_p2;
    sc_signal< sc_lv<2> > i_reg_819;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<16> > views_communicatedBi_3_reg_824;
    sc_signal< sc_lv<1> > icmp_ln1342_fu_382_p2;
    sc_signal< sc_lv<8> > xor_ln1343_4_fu_521_p2;
    sc_signal< sc_lv<8> > xor_ln1343_4_reg_829;
    sc_signal< sc_lv<2> > ap_phi_mux_i_0_phi_fu_221_p4;
    sc_signal< sc_lv<2> > i_0_reg_217;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > zext_ln54_fu_243_p1;
    sc_signal< sc_lv<64> > sext_ln54_fu_292_p1;
    sc_signal< sc_lv<64> > sext_ln54_1_fu_302_p1;
    sc_signal< sc_lv<64> > sext_ln66_2_fu_407_p1;
    sc_signal< sc_lv<8> > out6_01_fu_82;
    sc_signal< sc_lv<1> > write_flag_0_fu_86;
    sc_signal< sc_lv<1> > write_flag6_0_fu_90;
    sc_signal< sc_lv<8> > out5_02_fu_94;
    sc_signal< sc_lv<8> > out_03_fu_98;
    sc_signal< sc_lv<1> > write_flag3_0_fu_102;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > grp_fu_228_p1;
    sc_signal< sc_lv<29> > lshr_ln_fu_233_p4;
    sc_signal< sc_lv<10> > add_ln54_fu_287_p2;
    sc_signal< sc_lv<10> > add_ln54_1_fu_297_p2;
    sc_signal< sc_lv<3> > xor_ln54_fu_307_p2;
    sc_signal< sc_lv<8> > grp_fu_228_p2;
    sc_signal< sc_lv<10> > tmp_18_fu_325_p3;
    sc_signal< sc_lv<11> > zext_ln66_36_fu_333_p1;
    sc_signal< sc_lv<11> > zext_ln66_fu_321_p1;
    sc_signal< sc_lv<11> > sub_ln66_fu_337_p2;
    sc_signal< sc_lv<1> > r_1_fu_350_p1;
    sc_signal< sc_lv<8> > lshr_ln54_6_fu_358_p2;
    sc_signal< sc_lv<1> > r_2_fu_363_p1;
    sc_signal< sc_lv<8> > shl_ln66_fu_371_p2;
    sc_signal< sc_lv<12> > zext_ln66_37_fu_394_p1;
    sc_signal< sc_lv<12> > add_ln66_fu_398_p2;
    sc_signal< sc_lv<17> > grp_fu_641_p3;
    sc_signal< sc_lv<1> > icmp_ln1343_fu_420_p2;
    sc_signal< sc_lv<2> > xor_ln1343_3_fu_426_p2;
    sc_signal< sc_lv<2> > select_ln1343_fu_432_p3;
    sc_signal< sc_lv<8> > tmp_s_fu_440_p5;
    sc_signal< sc_lv<8> > tmp_fu_411_p5;
    sc_signal< sc_lv<8> > tmp_2_fu_464_p5;
    sc_signal< sc_lv<8> > tmp_1_fu_455_p5;
    sc_signal< sc_lv<8> > and_ln1343_2_fu_479_p2;
    sc_signal< sc_lv<8> > tmp_3_fu_485_p5;
    sc_signal< sc_lv<8> > and_ln1343_1_fu_473_p2;
    sc_signal< sc_lv<8> > tmp_4_fu_494_p5;
    sc_signal< sc_lv<8> > xor_ln1343_1_fu_509_p2;
    sc_signal< sc_lv<8> > and_ln1343_fu_449_p2;
    sc_signal< sc_lv<8> > xor_ln1343_2_fu_515_p2;
    sc_signal< sc_lv<8> > xor_ln1343_fu_503_p2;
    sc_signal< sc_lv<32> > add_ln1349_fu_575_p2;
    sc_signal< sc_lv<8> > select_ln1350_fu_580_p3;
    sc_signal< sc_lv<8> > select_ln1350_1_fu_587_p3;
    sc_signal< sc_lv<8> > select_ln1350_2_fu_594_p3;
    sc_signal< sc_lv<8> > and_ln66_fu_629_p2;
    sc_signal< sc_lv<8> > shl_ln66_6_fu_625_p2;
    sc_signal< sc_lv<8> > grp_fu_641_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<10> ap_const_lv10_A6;
    static const sc_lv<10> ap_const_lv10_14C;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<17> ap_const_lv17_4B;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln1349_fu_575_p2();
    void thread_add_ln54_1_fu_297_p2();
    void thread_add_ln54_fu_287_p2();
    void thread_add_ln66_fu_398_p2();
    void thread_and_ln1343_1_fu_473_p2();
    void thread_and_ln1343_2_fu_479_p2();
    void thread_and_ln1343_fu_449_p2();
    void thread_and_ln66_fu_629_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i_0_phi_fu_221_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_grp_fu_228_p1();
    void thread_grp_fu_228_p2();
    void thread_grp_fu_641_p1();
    void thread_i_fu_388_p2();
    void thread_icmp_ln1342_fu_382_p2();
    void thread_icmp_ln1343_fu_420_p2();
    void thread_lshr_ln54_6_fu_358_p2();
    void thread_lshr_ln_fu_233_p4();
    void thread_r_0_fu_317_p1();
    void thread_r_1_fu_350_p1();
    void thread_r_2_fu_363_p1();
    void thread_rand_tape_address0();
    void thread_rand_tape_address1();
    void thread_rand_tape_ce0();
    void thread_rand_tape_ce1();
    void thread_select_ln1343_fu_432_p3();
    void thread_select_ln1350_1_fu_587_p3();
    void thread_select_ln1350_2_fu_594_p3();
    void thread_select_ln1350_fu_580_p3();
    void thread_sext_ln54_1_fu_302_p1();
    void thread_sext_ln54_fu_292_p1();
    void thread_sext_ln66_2_fu_407_p1();
    void thread_sext_ln66_fu_343_p1();
    void thread_shl_ln66_6_fu_625_p2();
    void thread_shl_ln66_fu_371_p2();
    void thread_sub_ln66_fu_337_p2();
    void thread_tmp_18_fu_325_p3();
    void thread_trunc_ln54_fu_268_p1();
    void thread_views_communicatedBi_address0();
    void thread_views_communicatedBi_ce0();
    void thread_views_communicatedBi_d0();
    void thread_views_communicatedBi_we0();
    void thread_xor_ln1343_1_fu_509_p2();
    void thread_xor_ln1343_2_fu_515_p2();
    void thread_xor_ln1343_3_fu_426_p2();
    void thread_xor_ln1343_4_fu_521_p2();
    void thread_xor_ln1343_fu_503_p2();
    void thread_xor_ln54_fu_307_p2();
    void thread_xor_ln66_fu_376_p2();
    void thread_zext_ln54_11_fu_312_p1();
    void thread_zext_ln54_12_fu_347_p1();
    void thread_zext_ln54_13_fu_354_p1();
    void thread_zext_ln54_14_fu_367_p1();
    void thread_zext_ln54_fu_243_p1();
    void thread_zext_ln66_36_fu_333_p1();
    void thread_zext_ln66_37_fu_394_p1();
    void thread_zext_ln66_fu_321_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
