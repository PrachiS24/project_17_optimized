// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fromWordsToBytes_HH_
#define _fromWordsToBytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fromWordsToBytes : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_out< sc_lv<5> > stateAsWords_address0;
    sc_out< sc_logic > stateAsWords_ce0;
    sc_in< sc_lv<64> > stateAsWords_q0;


    // Module declarations
    fromWordsToBytes(sc_module_name name);
    SC_HAS_PROCESS(fromWordsToBytes);

    ~fromWordsToBytes();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > indvar_flatten_reg_78;
    sc_signal< sc_lv<5> > i_0_reg_89;
    sc_signal< sc_lv<4> > j_0_reg_100;
    sc_signal< sc_lv<1> > icmp_ln280_fu_111_p2;
    sc_signal< sc_lv<1> > icmp_ln280_reg_208;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln280_reg_208_pp0_iter1_reg;
    sc_signal< sc_lv<8> > add_ln280_fu_117_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > select_ln280_fu_135_p3;
    sc_signal< sc_lv<4> > select_ln280_reg_217;
    sc_signal< sc_lv<4> > select_ln280_reg_217_pp0_iter1_reg;
    sc_signal< sc_lv<5> > select_ln280_1_fu_143_p3;
    sc_signal< sc_lv<5> > select_ln280_1_reg_222;
    sc_signal< sc_lv<5> > select_ln280_1_reg_222_pp0_iter1_reg;
    sc_signal< sc_lv<3> > trunc_ln282_fu_156_p1;
    sc_signal< sc_lv<3> > trunc_ln282_reg_233;
    sc_signal< sc_lv<4> > j_fu_160_p2;
    sc_signal< sc_lv<8> > trunc_ln282_1_fu_183_p1;
    sc_signal< sc_lv<8> > trunc_ln282_1_reg_243;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_93_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln280_fu_151_p1;
    sc_signal< sc_lv<64> > zext_ln282_1_fu_203_p1;
    sc_signal< sc_lv<1> > icmp_ln281_fu_129_p2;
    sc_signal< sc_lv<5> > i_fu_123_p2;
    sc_signal< sc_lv<6> > shl_ln_fu_166_p3;
    sc_signal< sc_lv<64> > zext_ln282_fu_173_p1;
    sc_signal< sc_lv<64> > lshr_ln282_fu_177_p2;
    sc_signal< sc_lv<8> > zext_ln281_fu_194_p1;
    sc_signal< sc_lv<8> > shl_ln282_1_mid2_fu_187_p3;
    sc_signal< sc_lv<8> > add_ln282_fu_197_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_C8;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln280_fu_117_p2();
    void thread_add_ln282_fu_197_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_93_p4();
    void thread_ap_ready();
    void thread_i_fu_123_p2();
    void thread_icmp_ln280_fu_111_p2();
    void thread_icmp_ln281_fu_129_p2();
    void thread_j_fu_160_p2();
    void thread_lshr_ln282_fu_177_p2();
    void thread_select_ln280_1_fu_143_p3();
    void thread_select_ln280_fu_135_p3();
    void thread_shl_ln282_1_mid2_fu_187_p3();
    void thread_shl_ln_fu_166_p3();
    void thread_stateAsWords_address0();
    void thread_stateAsWords_ce0();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_state_d0();
    void thread_state_we0();
    void thread_trunc_ln282_1_fu_183_p1();
    void thread_trunc_ln282_fu_156_p1();
    void thread_zext_ln280_fu_151_p1();
    void thread_zext_ln281_fu_194_p1();
    void thread_zext_ln282_1_fu_203_p1();
    void thread_zext_ln282_fu_173_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
