// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module theta (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_state6 = 10'd16;
parameter    ap_ST_fsm_state7 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_pp1_stage0 = 10'd128;
parameter    ap_ST_fsm_pp1_stage1 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [4:0] A_address1;
output   A_ce1;
output   A_we1;
output  [63:0] A_d1;
input  [63:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg[4:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] x_0_reg_186;
reg   [4:0] indvar_flatten_reg_209;
reg   [2:0] x_2_reg_220;
reg   [2:0] y_1_reg_231;
wire   [0:0] icmp_ln336_fu_242_p2;
reg   [0:0] icmp_ln336_reg_564;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] x_3_fu_248_p2;
reg   [2:0] x_3_reg_568;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln337_fu_254_p1;
reg   [63:0] zext_ln337_reg_573;
wire   [4:0] zext_ln339_fu_259_p1;
reg   [4:0] zext_ln339_reg_578;
wire   [3:0] zext_ln339_5_fu_263_p1;
reg   [3:0] zext_ln339_5_reg_584;
reg   [63:0] A_load_reg_599;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] A_load_5_reg_604;
reg   [63:0] A_load_2_reg_619;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [63:0] A_load_3_reg_624;
wire   [0:0] icmp_ln341_fu_333_p2;
wire    ap_CS_fsm_state7;
wire   [2:0] x_fu_339_p2;
reg   [2:0] x_reg_638;
wire   [0:0] icmp_ln343_fu_437_p2;
reg   [0:0] icmp_ln343_reg_653;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [4:0] add_ln343_fu_443_p2;
reg   [4:0] add_ln343_reg_657;
reg    ap_enable_reg_pp1_iter0;
wire   [2:0] select_ln345_fu_461_p3;
reg   [2:0] select_ln345_reg_662;
wire   [2:0] select_ln345_1_fu_469_p3;
reg   [2:0] select_ln345_1_reg_670;
wire   [63:0] D_q0;
reg   [63:0] D_load_reg_683;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state10_pp1_stage1_iter0;
wire    ap_block_pp1_stage1_11001;
reg   [4:0] A_addr_5_reg_688;
wire   [2:0] y_fu_553_p2;
reg   [2:0] y_reg_694;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
reg   [2:0] C_address0;
reg    C_ce0;
reg    C_we0;
wire   [63:0] C_d0;
wire   [63:0] C_q0;
wire   [2:0] C_address1;
reg    C_ce1;
wire   [63:0] C_q1;
reg   [2:0] D_address0;
reg    D_ce0;
reg    D_we0;
wire   [63:0] D_d0;
reg   [2:0] ap_phi_mux_x_0_phi_fu_190_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] x_1_reg_197;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_213_p4;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_x_2_phi_fu_224_p4;
reg   [2:0] ap_phi_mux_y_1_phi_fu_235_p4;
wire   [63:0] zext_ln339_1_fu_273_p1;
wire   [63:0] zext_ln339_2_fu_283_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln339_3_fu_293_p1;
wire   [63:0] zext_ln339_4_fu_303_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln342_fu_365_p1;
wire   [63:0] zext_ln342_1_fu_400_p1;
wire   [63:0] zext_ln342_2_fu_432_p1;
wire   [63:0] zext_ln345_fu_477_p1;
wire   [63:0] zext_ln345_1_fu_548_p1;
wire    ap_block_pp1_stage1;
wire   [3:0] add_ln339_fu_267_p2;
wire   [3:0] add_ln339_1_fu_278_p2;
wire   [4:0] add_ln339_2_fu_288_p2;
wire   [4:0] add_ln339_3_fu_298_p2;
wire   [63:0] xor_ln339_1_fu_312_p2;
wire   [63:0] xor_ln339_2_fu_317_p2;
wire   [63:0] xor_ln339_fu_308_p2;
wire   [0:0] icmp_ln342_fu_345_p2;
wire   [2:0] xor_ln342_1_fu_351_p2;
wire   [2:0] select_ln342_fu_357_p3;
wire   [3:0] zext_ln341_fu_329_p1;
wire   [3:0] add_ln342_1_fu_370_p2;
wire   [2:0] add_ln342_2_fu_382_p2;
wire   [0:0] icmp_ln342_1_fu_376_p2;
wire  signed [3:0] sext_ln342_fu_388_p1;
wire   [3:0] select_ln342_1_fu_392_p3;
wire   [62:0] trunc_ln342_fu_405_p1;
wire   [0:0] tmp_2_fu_409_p3;
wire   [63:0] or_ln_fu_417_p3;
wire   [0:0] icmp_ln344_fu_455_p2;
wire   [2:0] x_5_fu_449_p2;
wire   [0:0] icmp_ln345_fu_482_p2;
wire   [2:0] add_ln345_2_fu_487_p2;
wire   [2:0] select_ln345_2_fu_492_p3;
wire   [0:0] icmp_ln345_1_fu_503_p2;
wire   [2:0] add_ln345_3_fu_508_p2;
wire   [2:0] select_ln345_3_fu_513_p3;
wire   [3:0] zext_ln345_2_fu_499_p1;
wire   [3:0] zext_ln345_3_fu_520_p1;
wire   [3:0] add_ln345_1_fu_532_p2;
wire   [4:0] shl_ln_fu_524_p3;
wire   [4:0] zext_ln345_4_fu_538_p1;
wire   [4:0] add_ln345_fu_542_p2;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

theta_C #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_address0),
    .ce0(C_ce0),
    .we0(C_we0),
    .d0(C_d0),
    .q0(C_q0),
    .address1(C_address1),
    .ce1(C_ce1),
    .q1(C_q1)
);

theta_D #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
D_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(D_address0),
    .ce0(D_ce0),
    .we0(D_we0),
    .d0(D_d0),
    .q0(D_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln341_fu_333_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln341_fu_333_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln341_fu_333_p2 == 1'd1))) begin
        indvar_flatten_reg_209 <= 5'd0;
    end else if (((icmp_ln343_reg_653 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_209 <= add_ln343_reg_657;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_0_reg_186 <= x_3_reg_568;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_reg_197 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_1_reg_197 <= x_reg_638;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln341_fu_333_p2 == 1'd1))) begin
        x_2_reg_220 <= 3'd0;
    end else if (((icmp_ln343_reg_653 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x_2_reg_220 <= select_ln345_1_reg_670;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln341_fu_333_p2 == 1'd1))) begin
        y_1_reg_231 <= 3'd0;
    end else if (((icmp_ln343_reg_653 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        y_1_reg_231 <= y_reg_694;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln343_reg_653 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        A_addr_5_reg_688 <= zext_ln345_1_fu_548_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln336_reg_564 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        A_load_2_reg_619 <= A_q0;
        A_load_3_reg_624 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln336_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_load_5_reg_604 <= A_q1;
        A_load_reg_599 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln343_reg_653 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        D_load_reg_683 <= D_q0;
        y_reg_694 <= y_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln343_reg_657 <= add_ln343_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln336_reg_564 <= icmp_ln336_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln343_reg_653 <= icmp_ln343_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln343_fu_437_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln345_1_reg_670 <= select_ln345_1_fu_469_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln343_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln345_reg_662 <= select_ln345_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_3_reg_568 <= x_3_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_reg_638 <= x_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln337_reg_573[2 : 0] <= zext_ln337_fu_254_p1[2 : 0];
        zext_ln339_5_reg_584[2 : 0] <= zext_ln339_5_fu_263_p1[2 : 0];
        zext_ln339_reg_578[2 : 0] <= zext_ln339_fu_259_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        A_address0 = zext_ln345_1_fu_548_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_address0 = zext_ln339_4_fu_303_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_address0 = zext_ln339_2_fu_283_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = zext_ln337_fu_254_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_address1 = A_addr_5_reg_688;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_address1 = zext_ln339_3_fu_293_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address1 = zext_ln339_1_fu_273_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln343_reg_653 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address0 = zext_ln342_fu_365_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        C_address0 = zext_ln337_reg_573;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln336_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        D_address0 = zext_ln345_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        D_address0 = zext_ln342_2_fu_432_p1;
    end else begin
        D_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        D_we0 = 1'b1;
    end else begin
        D_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln336_fu_242_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln343_fu_437_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln343_reg_653 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_213_p4 = add_ln343_reg_657;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_213_p4 = indvar_flatten_reg_209;
    end
end

always @ (*) begin
    if (((icmp_ln336_reg_564 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_190_p4 = x_3_reg_568;
    end else begin
        ap_phi_mux_x_0_phi_fu_190_p4 = x_0_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln343_reg_653 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_x_2_phi_fu_224_p4 = select_ln345_1_reg_670;
    end else begin
        ap_phi_mux_x_2_phi_fu_224_p4 = x_2_reg_220;
    end
end

always @ (*) begin
    if (((icmp_ln343_reg_653 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_y_1_phi_fu_235_p4 = y_reg_694;
    end else begin
        ap_phi_mux_y_1_phi_fu_235_p4 = y_1_reg_231;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln336_fu_242_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln336_fu_242_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln341_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln343_fu_437_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln343_fu_437_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d1 = (D_load_reg_683 ^ A_q0);

assign C_address1 = zext_ln342_1_fu_400_p1;

assign C_d0 = (xor_ln339_fu_308_p2 ^ xor_ln339_2_fu_317_p2);

assign D_d0 = (or_ln_fu_417_p3 ^ C_q1);

assign add_ln339_1_fu_278_p2 = ($signed(zext_ln339_5_reg_584) + $signed(4'd10));

assign add_ln339_2_fu_288_p2 = (zext_ln339_reg_578 + 5'd15);

assign add_ln339_3_fu_298_p2 = ($signed(zext_ln339_reg_578) + $signed(5'd20));

assign add_ln339_fu_267_p2 = (zext_ln339_5_fu_263_p1 + 4'd5);

assign add_ln342_1_fu_370_p2 = (4'd4 + zext_ln341_fu_329_p1);

assign add_ln342_2_fu_382_p2 = ($signed(3'd7) + $signed(x_1_reg_197));

assign add_ln343_fu_443_p2 = (ap_phi_mux_indvar_flatten_phi_fu_213_p4 + 5'd1);

assign add_ln345_1_fu_532_p2 = (zext_ln345_2_fu_499_p1 + zext_ln345_3_fu_520_p1);

assign add_ln345_2_fu_487_p2 = (select_ln345_1_reg_670 + 3'd3);

assign add_ln345_3_fu_508_p2 = (select_ln345_reg_662 + 3'd3);

assign add_ln345_fu_542_p2 = (shl_ln_fu_524_p3 + zext_ln345_4_fu_538_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln336_fu_242_p2 = ((ap_phi_mux_x_0_phi_fu_190_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln341_fu_333_p2 = ((x_1_reg_197 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln342_1_fu_376_p2 = ((add_ln342_1_fu_370_p2 < 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_345_p2 = ((x_fu_339_p2 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln343_fu_437_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_213_p4 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln344_fu_455_p2 = ((ap_phi_mux_y_1_phi_fu_235_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln345_1_fu_503_p2 = ((select_ln345_reg_662 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln345_fu_482_p2 = ((select_ln345_1_reg_670 < 3'd5) ? 1'b1 : 1'b0);

assign or_ln_fu_417_p3 = {{trunc_ln342_fu_405_p1}, {tmp_2_fu_409_p3}};

assign select_ln342_1_fu_392_p3 = ((icmp_ln342_1_fu_376_p2[0:0] === 1'b1) ? add_ln342_1_fu_370_p2 : sext_ln342_fu_388_p1);

assign select_ln342_fu_357_p3 = ((icmp_ln342_fu_345_p2[0:0] === 1'b1) ? x_fu_339_p2 : xor_ln342_1_fu_351_p2);

assign select_ln345_1_fu_469_p3 = ((icmp_ln344_fu_455_p2[0:0] === 1'b1) ? x_5_fu_449_p2 : ap_phi_mux_x_2_phi_fu_224_p4);

assign select_ln345_2_fu_492_p3 = ((icmp_ln345_fu_482_p2[0:0] === 1'b1) ? select_ln345_1_reg_670 : add_ln345_2_fu_487_p2);

assign select_ln345_3_fu_513_p3 = ((icmp_ln345_1_fu_503_p2[0:0] === 1'b1) ? select_ln345_reg_662 : add_ln345_3_fu_508_p2);

assign select_ln345_fu_461_p3 = ((icmp_ln344_fu_455_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_y_1_phi_fu_235_p4);

assign sext_ln342_fu_388_p1 = $signed(add_ln342_2_fu_382_p2);

assign shl_ln_fu_524_p3 = {{select_ln345_3_fu_513_p3}, {2'd0}};

assign tmp_2_fu_409_p3 = C_q0[32'd63];

assign trunc_ln342_fu_405_p1 = C_q0[62:0];

assign x_3_fu_248_p2 = (ap_phi_mux_x_0_phi_fu_190_p4 + 3'd1);

assign x_5_fu_449_p2 = (ap_phi_mux_x_2_phi_fu_224_p4 + 3'd1);

assign x_fu_339_p2 = (x_1_reg_197 + 3'd1);

assign xor_ln339_1_fu_312_p2 = (A_q0 ^ A_load_3_reg_624);

assign xor_ln339_2_fu_317_p2 = (xor_ln339_1_fu_312_p2 ^ A_load_2_reg_619);

assign xor_ln339_fu_308_p2 = (A_load_reg_599 ^ A_load_5_reg_604);

assign xor_ln342_1_fu_351_p2 = (x_1_reg_197 ^ 3'd4);

assign y_fu_553_p2 = (select_ln345_reg_662 + 3'd1);

assign zext_ln337_fu_254_p1 = ap_phi_mux_x_0_phi_fu_190_p4;

assign zext_ln339_1_fu_273_p1 = add_ln339_fu_267_p2;

assign zext_ln339_2_fu_283_p1 = add_ln339_1_fu_278_p2;

assign zext_ln339_3_fu_293_p1 = add_ln339_2_fu_288_p2;

assign zext_ln339_4_fu_303_p1 = add_ln339_3_fu_298_p2;

assign zext_ln339_5_fu_263_p1 = ap_phi_mux_x_0_phi_fu_190_p4;

assign zext_ln339_fu_259_p1 = ap_phi_mux_x_0_phi_fu_190_p4;

assign zext_ln341_fu_329_p1 = x_1_reg_197;

assign zext_ln342_1_fu_400_p1 = select_ln342_1_fu_392_p3;

assign zext_ln342_2_fu_432_p1 = x_1_reg_197;

assign zext_ln342_fu_365_p1 = select_ln342_fu_357_p3;

assign zext_ln345_1_fu_548_p1 = add_ln345_fu_542_p2;

assign zext_ln345_2_fu_499_p1 = select_ln345_2_fu_492_p3;

assign zext_ln345_3_fu_520_p1 = select_ln345_3_fu_513_p3;

assign zext_ln345_4_fu_538_p1 = add_ln345_1_fu_532_p2;

assign zext_ln345_fu_477_p1 = select_ln345_1_fu_469_p3;

always @ (posedge ap_clk) begin
    zext_ln337_reg_573[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln339_reg_578[4:3] <= 2'b00;
    zext_ln339_5_reg_584[3] <= 1'b0;
end

endmodule //theta
