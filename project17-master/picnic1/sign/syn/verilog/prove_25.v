// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module prove_25 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        proof_0_seed1_address0,
        proof_0_seed1_ce0,
        proof_0_seed1_we0,
        proof_0_seed1_d0,
        proof_seed1_offset1,
        proof_0_seed2_address0,
        proof_0_seed2_ce0,
        proof_0_seed2_we0,
        proof_0_seed2_d0,
        proof_0_inputShare_address0,
        proof_0_inputShare_ce0,
        proof_0_inputShare_we0,
        proof_0_inputShare_d0,
        proof_0_communicatedBits_address0,
        proof_0_communicatedBits_ce0,
        proof_0_communicatedBits_we0,
        proof_0_communicatedBits_d0,
        proof_0_view3Commitment_address0,
        proof_0_view3Commitment_ce0,
        proof_0_view3Commitment_we0,
        proof_0_view3Commitment_d0,
        challenge,
        seeds_seed_address0,
        seeds_seed_ce0,
        seeds_seed_q0,
        views_inputShare_address0,
        views_inputShare_ce0,
        views_inputShare_q0,
        views_communicatedBits_address0,
        views_communicatedBits_ce0,
        views_communicatedBits_q0,
        commitments_hashes_address0,
        commitments_hashes_ce0,
        commitments_hashes_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] proof_0_seed1_address0;
output   proof_0_seed1_ce0;
output   proof_0_seed1_we0;
output  [7:0] proof_0_seed1_d0;
input  [7:0] proof_seed1_offset1;
output  [11:0] proof_0_seed2_address0;
output   proof_0_seed2_ce0;
output   proof_0_seed2_we0;
output  [7:0] proof_0_seed2_d0;
output  [9:0] proof_0_inputShare_address0;
output   proof_0_inputShare_ce0;
output   proof_0_inputShare_we0;
output  [31:0] proof_0_inputShare_d0;
output  [14:0] proof_0_communicatedBits_address0;
output   proof_0_communicatedBits_ce0;
output   proof_0_communicatedBits_we0;
output  [7:0] proof_0_communicatedBits_d0;
output  [12:0] proof_0_view3Commitment_address0;
output   proof_0_view3Commitment_ce0;
output   proof_0_view3Commitment_we0;
output  [7:0] proof_0_view3Commitment_d0;
input  [1:0] challenge;
output  [13:0] seeds_seed_address0;
output   seeds_seed_ce0;
input  [7:0] seeds_seed_q0;
output  [11:0] views_inputShare_address0;
output   views_inputShare_ce0;
input  [31:0] views_inputShare_q0;
output  [15:0] views_communicatedBits_address0;
output   views_communicatedBits_ce0;
input  [7:0] views_communicatedBits_q0;
output  [14:0] commitments_hashes_address0;
output   commitments_hashes_ce0;
input  [7:0] commitments_hashes_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] proof_0_seed1_address0;
reg proof_0_seed1_ce0;
reg proof_0_seed1_we0;
reg[11:0] proof_0_seed2_address0;
reg proof_0_seed2_ce0;
reg proof_0_seed2_we0;
reg proof_0_inputShare_ce0;
reg proof_0_inputShare_we0;
reg proof_0_communicatedBits_ce0;
reg proof_0_communicatedBits_we0;
reg proof_0_view3Commitment_ce0;
reg proof_0_view3Commitment_we0;
reg[13:0] seeds_seed_address0;
reg seeds_seed_ce0;
reg views_inputShare_ce0;
reg views_communicatedBits_ce0;
reg commitments_hashes_ce0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] zext_ln720_fu_431_p1;
reg   [12:0] zext_ln720_reg_1006;
wire   [10:0] zext_ln724_1_fu_447_p1;
reg   [10:0] zext_ln724_1_reg_1016;
wire   [14:0] mul_ln724_fu_451_p2;
reg   [14:0] mul_ln724_reg_1021;
wire   [13:0] zext_ln692_1_fu_465_p1;
reg   [13:0] zext_ln692_1_reg_1026;
wire  signed [10:0] sub_ln692_fu_469_p2;
reg  signed [10:0] sub_ln692_reg_1031;
wire  signed [11:0] sext_ln692_fu_475_p1;
reg  signed [11:0] sext_ln692_reg_1036;
wire   [14:0] sub_ln692_1_fu_491_p2;
reg   [14:0] sub_ln692_1_reg_1041;
wire   [14:0] add_ln695_fu_497_p2;
reg   [14:0] add_ln695_reg_1047;
wire   [14:0] tmp_27_cast_fu_509_p3;
reg   [14:0] tmp_27_cast_reg_1053;
wire   [12:0] tmp_29_cast_fu_517_p3;
reg   [12:0] tmp_29_cast_reg_1059;
wire   [0:0] icmp_ln689_fu_525_p2;
reg   [0:0] icmp_ln689_reg_1064;
wire   [0:0] icmp_ln697_fu_531_p2;
reg   [0:0] icmp_ln697_reg_1068;
wire   [4:0] loop_14_fu_543_p2;
reg   [4:0] loop_14_reg_1075;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln707_fu_537_p2;
wire   [4:0] loop_17_fu_583_p2;
reg   [4:0] loop_17_reg_1088;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln710_fu_577_p2;
wire   [4:0] loop_16_fu_609_p2;
reg   [4:0] loop_16_reg_1101;
wire   [0:0] icmp_ln702_fu_603_p2;
wire   [4:0] loop_15_fu_635_p2;
reg   [4:0] loop_15_reg_1114;
wire   [0:0] icmp_ln694_fu_629_p2;
wire   [2:0] zext_ln717_fu_655_p1;
reg   [2:0] zext_ln717_reg_1124;
wire   [2:0] add_ln717_fu_658_p2;
reg   [2:0] add_ln717_reg_1130;
wire   [0:0] icmp_ln717_fu_674_p2;
reg   [0:0] icmp_ln717_reg_1135;
wire   [4:0] loop_13_fu_700_p2;
reg   [4:0] loop_13_reg_1142;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln699_fu_694_p2;
wire   [4:0] loop_fu_754_p2;
reg   [4:0] loop_reg_1155;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln691_fu_748_p2;
wire   [2:0] loop_18_fu_808_p2;
reg   [2:0] loop_18_reg_1168;
wire    ap_CS_fsm_state12;
wire   [10:0] add_ln720_fu_822_p2;
reg   [10:0] add_ln720_reg_1173;
wire   [0:0] icmp_ln719_fu_802_p2;
wire   [11:0] add_ln724_1_fu_869_p2;
reg  signed [11:0] add_ln724_1_reg_1183;
wire  signed [16:0] mul_ln724_1_fu_994_p2;
reg  signed [16:0] mul_ln724_1_reg_1188;
wire    ap_CS_fsm_state14;
wire   [6:0] loop_19_fu_887_p2;
reg   [6:0] loop_19_reg_1196;
wire    ap_CS_fsm_state15;
wire   [14:0] add_ln724_2_fu_901_p2;
reg   [14:0] add_ln724_2_reg_1201;
wire   [0:0] icmp_ln723_fu_881_p2;
wire   [15:0] tmp_31_cast_fu_943_p3;
reg   [15:0] tmp_31_cast_reg_1211;
wire   [5:0] loop_20_fu_961_p2;
reg   [5:0] loop_20_reg_1219;
wire    ap_CS_fsm_state17;
wire   [13:0] add_ln728_2_fu_975_p2;
reg   [13:0] add_ln728_2_reg_1224;
wire   [0:0] icmp_ln727_fu_955_p2;
reg   [4:0] loop_4_reg_310;
wire    ap_CS_fsm_state3;
reg   [4:0] loop_5_reg_322;
wire    ap_CS_fsm_state5;
reg   [4:0] loop_3_reg_334;
wire    ap_CS_fsm_state8;
reg   [4:0] loop_1_reg_346;
wire    ap_CS_fsm_state11;
reg   [4:0] loop_2_reg_358;
wire    ap_CS_fsm_state7;
reg   [4:0] loop_0_reg_370;
wire    ap_CS_fsm_state10;
reg   [2:0] loop_6_reg_382;
wire    ap_CS_fsm_state13;
reg   [6:0] loop_7_reg_393;
wire    ap_CS_fsm_state16;
reg   [5:0] loop_8_reg_404;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln708_3_fu_558_p1;
wire   [63:0] zext_ln708_2_fu_572_p1;
wire  signed [63:0] sext_ln711_fu_598_p1;
wire   [63:0] zext_ln703_3_fu_624_p1;
wire  signed [63:0] sext_ln695_fu_650_p1;
wire   [63:0] zext_ln711_2_fu_689_p1;
wire  signed [63:0] sext_ln700_fu_715_p1;
wire   [63:0] zext_ln700_2_fu_729_p1;
wire   [63:0] zext_ln703_2_fu_743_p1;
wire  signed [63:0] sext_ln692_1_fu_769_p1;
wire   [63:0] zext_ln692_5_fu_783_p1;
wire   [63:0] zext_ln695_2_fu_797_p1;
wire   [63:0] zext_ln720_5_fu_832_p1;
wire   [63:0] zext_ln720_4_fu_874_p1;
wire  signed [63:0] sext_ln724_2_fu_911_p1;
wire   [63:0] zext_ln724_5_fu_951_p1;
wire   [63:0] zext_ln728_4_fu_985_p1;
wire   [63:0] zext_ln728_3_fu_990_p1;
wire   [11:0] tmp_fu_423_p3;
wire   [9:0] tmp_s_fu_439_p3;
wire   [7:0] mul_ln724_fu_451_p0;
wire   [12:0] tmp_16_fu_457_p3;
wire   [10:0] zext_ln692_fu_419_p1;
wire   [13:0] tmp_17_fu_479_p3;
wire   [14:0] zext_ln692_2_fu_487_p1;
wire   [14:0] zext_ln720_1_fu_435_p1;
wire   [10:0] add_ln703_fu_503_p2;
wire   [14:0] zext_ln708_fu_549_p1;
wire   [14:0] add_ln708_1_fu_553_p2;
wire   [12:0] zext_ln708_1_fu_563_p1;
wire   [12:0] add_ln708_fu_567_p2;
wire   [14:0] zext_ln711_fu_589_p1;
wire   [14:0] add_ln711_1_fu_593_p2;
wire   [14:0] zext_ln703_fu_615_p1;
wire   [14:0] add_ln703_2_fu_619_p2;
wire   [14:0] zext_ln695_fu_641_p1;
wire   [14:0] add_ln695_2_fu_645_p2;
wire   [1:0] tmp_18_fu_664_p4;
wire   [12:0] zext_ln711_1_fu_680_p1;
wire   [12:0] add_ln711_fu_684_p2;
wire   [14:0] zext_ln700_fu_706_p1;
wire   [14:0] add_ln700_1_fu_710_p2;
wire   [12:0] zext_ln700_1_fu_720_p1;
wire   [12:0] add_ln700_fu_724_p2;
wire   [12:0] zext_ln703_1_fu_734_p1;
wire   [12:0] add_ln703_1_fu_738_p2;
wire   [14:0] zext_ln692_3_fu_760_p1;
wire   [14:0] add_ln692_1_fu_764_p2;
wire   [12:0] zext_ln692_4_fu_774_p1;
wire   [12:0] add_ln692_fu_778_p2;
wire   [12:0] zext_ln695_1_fu_788_p1;
wire   [12:0] add_ln695_1_fu_792_p2;
wire   [10:0] zext_ln720_3_fu_818_p1;
wire   [12:0] zext_ln720_2_fu_814_p1;
wire   [12:0] add_ln720_1_fu_827_p2;
wire   [2:0] add_ln724_fu_837_p2;
wire   [1:0] xor_ln724_fu_848_p2;
wire   [0:0] icmp_ln724_fu_842_p2;
wire  signed [2:0] sext_ln724_fu_853_p1;
wire   [2:0] select_ln724_fu_857_p3;
wire   [11:0] zext_ln724_2_fu_865_p1;
wire   [14:0] zext_ln724_4_fu_897_p1;
wire   [16:0] zext_ln724_3_fu_893_p1;
(* use_dsp48 = "no" *) wire   [16:0] add_ln724_3_fu_906_p2;
wire   [2:0] add_ln728_fu_916_p2;
wire   [0:0] icmp_ln728_fu_921_p2;
wire   [2:0] select_ln728_fu_927_p3;
wire   [10:0] zext_ln728_fu_934_p1;
wire   [10:0] add_ln728_1_fu_938_p2;
wire   [13:0] zext_ln728_2_fu_971_p1;
wire   [15:0] zext_ln728_1_fu_967_p1;
wire   [15:0] add_ln728_3_fu_980_p2;
wire   [7:0] mul_ln724_1_fu_994_p1;
reg   [17:0] ap_NS_fsm;
wire   [14:0] mul_ln724_fu_451_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

crypto_sign_mul_mbdk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
crypto_sign_mul_mbdk_U174(
    .din0(add_ln724_1_reg_1183),
    .din1(mul_ln724_1_fu_994_p1),
    .dout(mul_ln724_1_fu_994_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln689_fu_525_p2 == 1'd1))) begin
        loop_0_reg_370 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        loop_0_reg_370 <= loop_reg_1155;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln691_fu_748_p2 == 1'd1))) begin
        loop_1_reg_346 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        loop_1_reg_346 <= loop_15_reg_1114;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln697_fu_531_p2 == 1'd1) & (icmp_ln689_fu_525_p2 == 1'd0))) begin
        loop_2_reg_358 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        loop_2_reg_358 <= loop_13_reg_1142;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln699_fu_694_p2 == 1'd1))) begin
        loop_3_reg_334 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_3_reg_334 <= loop_16_reg_1101;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln697_fu_531_p2 == 1'd0) & (icmp_ln689_fu_525_p2 == 1'd0))) begin
        loop_4_reg_310 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_4_reg_310 <= loop_14_reg_1075;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln707_fu_537_p2 == 1'd1))) begin
        loop_5_reg_322 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        loop_5_reg_322 <= loop_17_reg_1088;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((((icmp_ln717_fu_674_p2 == 1'd1) & (icmp_ln694_fu_629_p2 == 1'd1) & (icmp_ln689_reg_1064 == 1'd1)) | ((icmp_ln717_fu_674_p2 == 1'd1) & (icmp_ln702_fu_603_p2 == 1'd1) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0))) | ((icmp_ln717_fu_674_p2 == 1'd1) & (icmp_ln710_fu_577_p2 == 1'd1) & (icmp_ln697_reg_1068 == 1'd0) & (icmp_ln689_reg_1064 == 1'd0))))) begin
        loop_6_reg_382 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        loop_6_reg_382 <= loop_18_reg_1168;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        loop_7_reg_393 <= loop_19_reg_1196;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        loop_7_reg_393 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln723_fu_881_p2 == 1'd1))) begin
        loop_8_reg_404 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        loop_8_reg_404 <= loop_20_reg_1219;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln695_reg_1047[14 : 4] <= add_ln695_fu_497_p2[14 : 4];
        icmp_ln689_reg_1064 <= icmp_ln689_fu_525_p2;
        mul_ln724_reg_1021 <= mul_ln724_fu_451_p2;
        sext_ln692_reg_1036 <= sext_ln692_fu_475_p1;
        sub_ln692_1_reg_1041[14 : 4] <= sub_ln692_1_fu_491_p2[14 : 4];
        sub_ln692_reg_1031 <= sub_ln692_fu_469_p2;
        tmp_27_cast_reg_1053[14 : 4] <= tmp_27_cast_fu_509_p3[14 : 4];
        tmp_29_cast_reg_1059[12 : 2] <= tmp_29_cast_fu_517_p3[12 : 2];
        zext_ln692_1_reg_1026[12 : 5] <= zext_ln692_1_fu_465_p1[12 : 5];
        zext_ln720_reg_1006[11 : 4] <= zext_ln720_fu_431_p1[11 : 4];
        zext_ln724_1_reg_1016[9 : 2] <= zext_ln724_1_fu_447_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((((icmp_ln694_fu_629_p2 == 1'd1) & (icmp_ln689_reg_1064 == 1'd1)) | ((icmp_ln702_fu_603_p2 == 1'd1) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0))) | ((icmp_ln710_fu_577_p2 == 1'd1) & (icmp_ln697_reg_1068 == 1'd0) & (icmp_ln689_reg_1064 == 1'd0))))) begin
        add_ln717_reg_1130 <= add_ln717_fu_658_p2;
        icmp_ln717_reg_1135 <= icmp_ln717_fu_674_p2;
        zext_ln717_reg_1124[1 : 0] <= zext_ln717_fu_655_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln717_reg_1135 == 1'd1) & (icmp_ln719_fu_802_p2 == 1'd0))) begin
        add_ln720_reg_1173 <= add_ln720_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln719_fu_802_p2 == 1'd1) | (icmp_ln717_reg_1135 == 1'd0)))) begin
        add_ln724_1_reg_1183 <= add_ln724_1_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln723_fu_881_p2 == 1'd0))) begin
        add_ln724_2_reg_1201 <= add_ln724_2_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln727_fu_955_p2 == 1'd0))) begin
        add_ln728_2_reg_1224 <= add_ln728_2_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln689_fu_525_p2 == 1'd0))) begin
        icmp_ln697_reg_1068 <= icmp_ln697_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        loop_13_reg_1142 <= loop_13_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        loop_14_reg_1075 <= loop_14_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln689_reg_1064 == 1'd1))) begin
        loop_15_reg_1114 <= loop_15_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0))) begin
        loop_16_reg_1101 <= loop_16_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln697_reg_1068 == 1'd0) & (icmp_ln689_reg_1064 == 1'd0))) begin
        loop_17_reg_1088 <= loop_17_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln717_reg_1135 == 1'd1))) begin
        loop_18_reg_1168 <= loop_18_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        loop_19_reg_1196 <= loop_19_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        loop_20_reg_1219 <= loop_20_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        loop_reg_1155 <= loop_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln724_1_reg_1188 <= mul_ln724_1_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln723_fu_881_p2 == 1'd1))) begin
        tmp_31_cast_reg_1211[15 : 5] <= tmp_31_cast_fu_943_p3[15 : 5];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (icmp_ln727_fu_955_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln727_fu_955_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        commitments_hashes_ce0 = 1'b1;
    end else begin
        commitments_hashes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        proof_0_communicatedBits_ce0 = 1'b1;
    end else begin
        proof_0_communicatedBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        proof_0_communicatedBits_we0 = 1'b1;
    end else begin
        proof_0_communicatedBits_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        proof_0_inputShare_ce0 = 1'b1;
    end else begin
        proof_0_inputShare_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        proof_0_inputShare_we0 = 1'b1;
    end else begin
        proof_0_inputShare_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        proof_0_seed1_address0 = zext_ln692_5_fu_783_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        proof_0_seed1_address0 = zext_ln700_2_fu_729_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        proof_0_seed1_address0 = zext_ln708_2_fu_572_p1;
    end else begin
        proof_0_seed1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        proof_0_seed1_ce0 = 1'b1;
    end else begin
        proof_0_seed1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        proof_0_seed1_we0 = 1'b1;
    end else begin
        proof_0_seed1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        proof_0_seed2_address0 = zext_ln695_2_fu_797_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        proof_0_seed2_address0 = zext_ln703_2_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        proof_0_seed2_address0 = zext_ln711_2_fu_689_p1;
    end else begin
        proof_0_seed2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        proof_0_seed2_ce0 = 1'b1;
    end else begin
        proof_0_seed2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        proof_0_seed2_we0 = 1'b1;
    end else begin
        proof_0_seed2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        proof_0_view3Commitment_ce0 = 1'b1;
    end else begin
        proof_0_view3Commitment_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        proof_0_view3Commitment_we0 = 1'b1;
    end else begin
        proof_0_view3Commitment_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        seeds_seed_address0 = sext_ln692_1_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        seeds_seed_address0 = sext_ln700_fu_715_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln694_fu_629_p2 == 1'd0) & (icmp_ln689_reg_1064 == 1'd1))) begin
        seeds_seed_address0 = sext_ln695_fu_650_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln702_fu_603_p2 == 1'd0) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0))) begin
        seeds_seed_address0 = zext_ln703_3_fu_624_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln710_fu_577_p2 == 1'd0) & (icmp_ln697_reg_1068 == 1'd0) & (icmp_ln689_reg_1064 == 1'd0))) begin
        seeds_seed_address0 = sext_ln711_fu_598_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        seeds_seed_address0 = zext_ln708_3_fu_558_p1;
    end else begin
        seeds_seed_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln694_fu_629_p2 == 1'd0) & (icmp_ln689_reg_1064 == 1'd1)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln702_fu_603_p2 == 1'd0) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln710_fu_577_p2 == 1'd0) & (icmp_ln697_reg_1068 == 1'd0) & (icmp_ln689_reg_1064 == 1'd0)))) begin
        seeds_seed_ce0 = 1'b1;
    end else begin
        seeds_seed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        views_communicatedBits_ce0 = 1'b1;
    end else begin
        views_communicatedBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        views_inputShare_ce0 = 1'b1;
    end else begin
        views_inputShare_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln689_fu_525_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln697_fu_531_p2 == 1'd1) & (icmp_ln689_fu_525_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln697_fu_531_p2 == 1'd0) & (icmp_ln689_fu_525_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln707_fu_537_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((((icmp_ln694_fu_629_p2 == 1'd1) & (icmp_ln689_reg_1064 == 1'd1)) | ((icmp_ln702_fu_603_p2 == 1'd1) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0))) | ((icmp_ln710_fu_577_p2 == 1'd1) & (icmp_ln697_reg_1068 == 1'd0) & (icmp_ln689_reg_1064 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln694_fu_629_p2 == 1'd0) & (icmp_ln689_reg_1064 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln702_fu_603_p2 == 1'd0) & (icmp_ln697_reg_1068 == 1'd1) & (icmp_ln689_reg_1064 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln699_fu_694_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln691_fu_748_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln719_fu_802_p2 == 1'd1) | (icmp_ln717_reg_1135 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln723_fu_881_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln727_fu_955_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln692_1_fu_764_p2 = (sub_ln692_1_reg_1041 + zext_ln692_3_fu_760_p1);

assign add_ln692_fu_778_p2 = (zext_ln720_reg_1006 + zext_ln692_4_fu_774_p1);

assign add_ln695_1_fu_792_p2 = (zext_ln720_reg_1006 + zext_ln695_1_fu_788_p1);

assign add_ln695_2_fu_645_p2 = (add_ln695_reg_1047 + zext_ln695_fu_641_p1);

assign add_ln695_fu_497_p2 = (sub_ln692_1_fu_491_p2 + 15'd16);

assign add_ln700_1_fu_710_p2 = (add_ln695_reg_1047 + zext_ln700_fu_706_p1);

assign add_ln700_fu_724_p2 = (zext_ln720_reg_1006 + zext_ln700_1_fu_720_p1);

assign add_ln703_1_fu_738_p2 = (zext_ln720_reg_1006 + zext_ln703_1_fu_734_p1);

assign add_ln703_2_fu_619_p2 = (tmp_27_cast_reg_1053 + zext_ln703_fu_615_p1);

assign add_ln703_fu_503_p2 = ($signed(sub_ln692_fu_469_p2) + $signed(11'd2));

assign add_ln708_1_fu_553_p2 = (tmp_27_cast_reg_1053 + zext_ln708_fu_549_p1);

assign add_ln708_fu_567_p2 = (zext_ln720_reg_1006 + zext_ln708_1_fu_563_p1);

assign add_ln711_1_fu_593_p2 = (sub_ln692_1_reg_1041 + zext_ln711_fu_589_p1);

assign add_ln711_fu_684_p2 = (zext_ln720_reg_1006 + zext_ln711_1_fu_680_p1);

assign add_ln717_fu_658_p2 = ($signed(zext_ln717_fu_655_p1) + $signed(3'd7));

assign add_ln720_1_fu_827_p2 = (tmp_29_cast_reg_1059 + zext_ln720_2_fu_814_p1);

assign add_ln720_fu_822_p2 = (zext_ln724_1_reg_1016 + zext_ln720_3_fu_818_p1);

assign add_ln724_1_fu_869_p2 = ($signed(zext_ln724_2_fu_865_p1) + $signed(sext_ln692_reg_1036));

assign add_ln724_2_fu_901_p2 = (mul_ln724_reg_1021 + zext_ln724_4_fu_897_p1);

assign add_ln724_3_fu_906_p2 = ($signed(mul_ln724_1_reg_1188) + $signed(zext_ln724_3_fu_893_p1));

assign add_ln724_fu_837_p2 = (zext_ln717_reg_1124 + 3'd1);

assign add_ln728_1_fu_938_p2 = ($signed(zext_ln728_fu_934_p1) + $signed(sub_ln692_reg_1031));

assign add_ln728_2_fu_975_p2 = (zext_ln692_1_reg_1026 + zext_ln728_2_fu_971_p1);

assign add_ln728_3_fu_980_p2 = (tmp_31_cast_reg_1211 + zext_ln728_1_fu_967_p1);

assign add_ln728_fu_916_p2 = (zext_ln717_reg_1124 + 3'd2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign commitments_hashes_address0 = zext_ln728_4_fu_985_p1;

assign icmp_ln689_fu_525_p2 = ((challenge == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln691_fu_748_p2 = ((loop_0_reg_370 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln694_fu_629_p2 = ((loop_1_reg_346 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln697_fu_531_p2 = ((challenge == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln699_fu_694_p2 = ((loop_2_reg_358 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln702_fu_603_p2 = ((loop_3_reg_334 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln707_fu_537_p2 = ((loop_4_reg_310 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln710_fu_577_p2 = ((loop_5_reg_322 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln717_fu_674_p2 = ((tmp_18_fu_664_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln719_fu_802_p2 = ((loop_6_reg_382 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln723_fu_881_p2 = ((loop_7_reg_393 == 7'd75) ? 1'b1 : 1'b0);

assign icmp_ln724_fu_842_p2 = ((add_ln724_fu_837_p2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln727_fu_955_p2 = ((loop_8_reg_404 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln728_fu_921_p2 = ((add_ln728_fu_916_p2 < 3'd3) ? 1'b1 : 1'b0);

assign loop_13_fu_700_p2 = (loop_2_reg_358 + 5'd1);

assign loop_14_fu_543_p2 = (loop_4_reg_310 + 5'd1);

assign loop_15_fu_635_p2 = (loop_1_reg_346 + 5'd1);

assign loop_16_fu_609_p2 = (loop_3_reg_334 + 5'd1);

assign loop_17_fu_583_p2 = (loop_5_reg_322 + 5'd1);

assign loop_18_fu_808_p2 = (loop_6_reg_382 + 3'd1);

assign loop_19_fu_887_p2 = (loop_7_reg_393 + 7'd1);

assign loop_20_fu_961_p2 = (loop_8_reg_404 + 6'd1);

assign loop_fu_754_p2 = (loop_0_reg_370 + 5'd1);

assign mul_ln724_1_fu_994_p1 = 17'd75;

assign mul_ln724_fu_451_p0 = mul_ln724_fu_451_p00;

assign mul_ln724_fu_451_p00 = proof_seed1_offset1;

assign mul_ln724_fu_451_p2 = (mul_ln724_fu_451_p0 * $signed('h4B));

assign proof_0_communicatedBits_address0 = zext_ln724_5_fu_951_p1;

assign proof_0_communicatedBits_d0 = views_communicatedBits_q0;

assign proof_0_inputShare_address0 = zext_ln720_4_fu_874_p1;

assign proof_0_inputShare_d0 = views_inputShare_q0;

assign proof_0_seed1_d0 = seeds_seed_q0;

assign proof_0_seed2_d0 = seeds_seed_q0;

assign proof_0_view3Commitment_address0 = zext_ln728_3_fu_990_p1;

assign proof_0_view3Commitment_d0 = commitments_hashes_q0;

assign select_ln724_fu_857_p3 = ((icmp_ln724_fu_842_p2[0:0] === 1'b1) ? add_ln724_fu_837_p2 : sext_ln724_fu_853_p1);

assign select_ln728_fu_927_p3 = ((icmp_ln728_fu_921_p2[0:0] === 1'b1) ? add_ln728_fu_916_p2 : add_ln717_reg_1130);

assign sext_ln692_1_fu_769_p1 = $signed(add_ln692_1_fu_764_p2);

assign sext_ln692_fu_475_p1 = sub_ln692_fu_469_p2;

assign sext_ln695_fu_650_p1 = $signed(add_ln695_2_fu_645_p2);

assign sext_ln700_fu_715_p1 = $signed(add_ln700_1_fu_710_p2);

assign sext_ln711_fu_598_p1 = $signed(add_ln711_1_fu_593_p2);

assign sext_ln724_2_fu_911_p1 = $signed(add_ln724_3_fu_906_p2);

assign sext_ln724_fu_853_p1 = $signed(xor_ln724_fu_848_p2);

assign sub_ln692_1_fu_491_p2 = (zext_ln692_2_fu_487_p1 - zext_ln720_1_fu_435_p1);

assign sub_ln692_fu_469_p2 = (zext_ln724_1_fu_447_p1 - zext_ln692_fu_419_p1);

assign tmp_16_fu_457_p3 = {{proof_seed1_offset1}, {5'd0}};

assign tmp_17_fu_479_p3 = {{proof_seed1_offset1}, {6'd0}};

assign tmp_18_fu_664_p4 = {{add_ln717_fu_658_p2[2:1]}};

assign tmp_27_cast_fu_509_p3 = {{add_ln703_fu_503_p2}, {4'd0}};

assign tmp_29_cast_fu_517_p3 = {{add_ln703_fu_503_p2}, {2'd0}};

assign tmp_31_cast_fu_943_p3 = {{add_ln728_1_fu_938_p2}, {5'd0}};

assign tmp_fu_423_p3 = {{proof_seed1_offset1}, {4'd0}};

assign tmp_s_fu_439_p3 = {{proof_seed1_offset1}, {2'd0}};

assign views_communicatedBits_address0 = sext_ln724_2_fu_911_p1;

assign views_inputShare_address0 = zext_ln720_5_fu_832_p1;

assign xor_ln724_fu_848_p2 = (challenge ^ 2'd2);

assign zext_ln692_1_fu_465_p1 = tmp_16_fu_457_p3;

assign zext_ln692_2_fu_487_p1 = tmp_17_fu_479_p3;

assign zext_ln692_3_fu_760_p1 = loop_0_reg_370;

assign zext_ln692_4_fu_774_p1 = loop_0_reg_370;

assign zext_ln692_5_fu_783_p1 = add_ln692_fu_778_p2;

assign zext_ln692_fu_419_p1 = proof_seed1_offset1;

assign zext_ln695_1_fu_788_p1 = loop_1_reg_346;

assign zext_ln695_2_fu_797_p1 = add_ln695_1_fu_792_p2;

assign zext_ln695_fu_641_p1 = loop_1_reg_346;

assign zext_ln700_1_fu_720_p1 = loop_2_reg_358;

assign zext_ln700_2_fu_729_p1 = add_ln700_fu_724_p2;

assign zext_ln700_fu_706_p1 = loop_2_reg_358;

assign zext_ln703_1_fu_734_p1 = loop_3_reg_334;

assign zext_ln703_2_fu_743_p1 = add_ln703_1_fu_738_p2;

assign zext_ln703_3_fu_624_p1 = add_ln703_2_fu_619_p2;

assign zext_ln703_fu_615_p1 = loop_3_reg_334;

assign zext_ln708_1_fu_563_p1 = loop_4_reg_310;

assign zext_ln708_2_fu_572_p1 = add_ln708_fu_567_p2;

assign zext_ln708_3_fu_558_p1 = add_ln708_1_fu_553_p2;

assign zext_ln708_fu_549_p1 = loop_4_reg_310;

assign zext_ln711_1_fu_680_p1 = loop_5_reg_322;

assign zext_ln711_2_fu_689_p1 = add_ln711_fu_684_p2;

assign zext_ln711_fu_589_p1 = loop_5_reg_322;

assign zext_ln717_fu_655_p1 = challenge;

assign zext_ln720_1_fu_435_p1 = tmp_fu_423_p3;

assign zext_ln720_2_fu_814_p1 = loop_6_reg_382;

assign zext_ln720_3_fu_818_p1 = loop_6_reg_382;

assign zext_ln720_4_fu_874_p1 = add_ln720_reg_1173;

assign zext_ln720_5_fu_832_p1 = add_ln720_1_fu_827_p2;

assign zext_ln720_fu_431_p1 = tmp_fu_423_p3;

assign zext_ln724_1_fu_447_p1 = tmp_s_fu_439_p3;

assign zext_ln724_2_fu_865_p1 = select_ln724_fu_857_p3;

assign zext_ln724_3_fu_893_p1 = loop_7_reg_393;

assign zext_ln724_4_fu_897_p1 = loop_7_reg_393;

assign zext_ln724_5_fu_951_p1 = add_ln724_2_reg_1201;

assign zext_ln728_1_fu_967_p1 = loop_8_reg_404;

assign zext_ln728_2_fu_971_p1 = loop_8_reg_404;

assign zext_ln728_3_fu_990_p1 = add_ln728_2_reg_1224;

assign zext_ln728_4_fu_985_p1 = add_ln728_3_fu_980_p2;

assign zext_ln728_fu_934_p1 = select_ln728_fu_927_p3;

always @ (posedge ap_clk) begin
    zext_ln720_reg_1006[3:0] <= 4'b0000;
    zext_ln720_reg_1006[12] <= 1'b0;
    zext_ln724_1_reg_1016[1:0] <= 2'b00;
    zext_ln724_1_reg_1016[10] <= 1'b0;
    zext_ln692_1_reg_1026[4:0] <= 5'b00000;
    zext_ln692_1_reg_1026[13] <= 1'b0;
    sub_ln692_1_reg_1041[3:0] <= 4'b0000;
    add_ln695_reg_1047[3:0] <= 4'b0000;
    tmp_27_cast_reg_1053[3:0] <= 4'b0000;
    tmp_29_cast_reg_1059[1:0] <= 2'b00;
    zext_ln717_reg_1124[2] <= 1'b0;
    tmp_31_cast_reg_1211[4:0] <= 5'b00000;
end

endmodule //prove_25
