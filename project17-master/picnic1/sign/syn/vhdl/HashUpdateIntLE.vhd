-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HashUpdateIntLE is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_sponge_state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_ce0 : OUT STD_LOGIC;
    ctx_sponge_state_we0 : OUT STD_LOGIC;
    ctx_sponge_state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ctx_sponge_byteIOInd : IN STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of HashUpdateIntLE is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal KeccakRhoOffsets_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRhoOffsets_ce0 : STD_LOGIC;
    signal KeccakRhoOffsets_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal KeccakRoundConstants_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRoundConstants_ce0 : STD_LOGIC;
    signal KeccakRoundConstants_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_i_reg_307 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_i_reg_319 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten7_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i2_reg_341 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_i5_reg_352 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln226_fu_434_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln226_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln194_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln231_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_reg_947 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_450_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_reg_952 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln234_fu_456_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln234_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ctx_sponge_state_add_reg_970 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln233_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln269_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_33_fu_542_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_33_reg_983 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_addr_13_reg_988 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_567_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_1001 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln271_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_35_fu_626_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_35_reg_1015 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln352_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln352_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln352_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln352_reg_1024 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal x_11_fu_644_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_11_reg_1029 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln35211_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35211_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln353_21_fu_656_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_21_reg_1039 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_22_fu_664_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_22_reg_1047 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state12_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln353_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal stateAsWords_addr_15_reg_1062 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln353_fu_787_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln353_reg_1068 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state13_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal y_fu_794_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_1073 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln280_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln280_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln280_reg_1083_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln280_fu_817_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln280_fu_835_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln280_reg_1092 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln280_reg_1092_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln280_6_fu_843_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln280_6_reg_1097 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln280_6_reg_1097_pp2_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln282_fu_856_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln282_reg_1108 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_13_fu_860_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln282_6_fu_883_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln282_6_reg_1118 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_rec_i_i_i_fu_913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_theta_fu_368_ap_ready : STD_LOGIC;
    signal grp_theta_fu_368_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal stateAsWords_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce0 : STD_LOGIC;
    signal stateAsWords_we0 : STD_LOGIC;
    signal stateAsWords_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_ce1 : STD_LOGIC;
    signal stateAsWords_we1 : STD_LOGIC;
    signal stateAsWords_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stateAsWords_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pi_fu_363_ap_start : STD_LOGIC;
    signal grp_pi_fu_363_ap_done : STD_LOGIC;
    signal grp_pi_fu_363_ap_idle : STD_LOGIC;
    signal grp_pi_fu_363_ap_ready : STD_LOGIC;
    signal grp_pi_fu_363_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_363_A_ce0 : STD_LOGIC;
    signal grp_pi_fu_363_A_we0 : STD_LOGIC;
    signal grp_pi_fu_363_A_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pi_fu_363_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_363_A_ce1 : STD_LOGIC;
    signal grp_pi_fu_363_A_we1 : STD_LOGIC;
    signal grp_pi_fu_363_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_theta_fu_368_ap_start : STD_LOGIC;
    signal grp_theta_fu_368_ap_idle : STD_LOGIC;
    signal grp_theta_fu_368_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_368_A_ce0 : STD_LOGIC;
    signal grp_theta_fu_368_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_368_A_ce1 : STD_LOGIC;
    signal grp_theta_fu_368_A_we1 : STD_LOGIC;
    signal grp_theta_fu_368_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_chi_fu_373_ap_start : STD_LOGIC;
    signal grp_chi_fu_373_ap_done : STD_LOGIC;
    signal grp_chi_fu_373_ap_idle : STD_LOGIC;
    signal grp_chi_fu_373_ap_ready : STD_LOGIC;
    signal grp_chi_fu_373_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_373_A_ce0 : STD_LOGIC;
    signal grp_chi_fu_373_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_373_A_ce1 : STD_LOGIC;
    signal grp_chi_fu_373_A_we1 : STD_LOGIC;
    signal grp_chi_fu_373_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_i_i_i_reg_226 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_01_rec_i_i_i_reg_237 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_1_i_i_i_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_i_reg_261 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_0_i_reg_272 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal indexRound_assign_reg_284 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_300_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_x_0_i_phi_fu_311_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_y_0_i_phi_fu_323_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i_0_i2_phi_fu_345_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_pi_fu_363_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_theta_fu_368_ap_start_reg : STD_LOGIC := '0';
    signal grp_chi_fu_373_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln149_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln270_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_23_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln382_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln280_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln282_5_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ctx_sponge_byteIOInd_42_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln238_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln149_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln272_fu_613_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln382_fu_804_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_386_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln225_fu_402_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal partialBlock_fu_406_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln225_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln226_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln226_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal partialBlock_32_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln231_7_fu_446_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln234_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln234_7_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln234_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln234_fu_514_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln234_8_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln234_fu_521_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln271_fu_573_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln272_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln272_fu_591_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln272_s_fu_595_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln272_7_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_8_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln272_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln353_11_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln353_12_fu_676_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_23_fu_682_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln353_12_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln353_13_fu_699_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_24_fu_704_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln353_fu_690_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln353_21_fu_711_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln353_fu_723_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln6_fu_715_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln353_22_fu_729_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln353_6_fu_733_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln353_25_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_24_fu_751_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln353_fu_765_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln353_26_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln353_fu_775_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln353_fu_759_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln353_fu_781_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln281_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_823_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln282_6_fu_866_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln282_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln282_fu_877_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln281_fu_894_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln282_mid2_fu_887_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln282_fu_897_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component pi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component theta IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component chi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakP1600OnWordeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component KeccakP1600OnWordfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pi_tempA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    KeccakRhoOffsets_U : component KeccakP1600OnWordeOg
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRhoOffsets_address0,
        ce0 => KeccakRhoOffsets_ce0,
        q0 => KeccakRhoOffsets_q0);

    KeccakRoundConstants_U : component KeccakP1600OnWordfYi
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRoundConstants_address0,
        ce0 => KeccakRoundConstants_ce0,
        q0 => KeccakRoundConstants_q0);

    stateAsWords_U : component pi_tempA
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stateAsWords_address0,
        ce0 => stateAsWords_ce0,
        we0 => stateAsWords_we0,
        d0 => stateAsWords_d0,
        q0 => stateAsWords_q0,
        address1 => stateAsWords_address1,
        ce1 => stateAsWords_ce1,
        we1 => stateAsWords_we1,
        d1 => stateAsWords_d1,
        q1 => stateAsWords_q1);

    grp_pi_fu_363 : component pi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pi_fu_363_ap_start,
        ap_done => grp_pi_fu_363_ap_done,
        ap_idle => grp_pi_fu_363_ap_idle,
        ap_ready => grp_pi_fu_363_ap_ready,
        A_address0 => grp_pi_fu_363_A_address0,
        A_ce0 => grp_pi_fu_363_A_ce0,
        A_we0 => grp_pi_fu_363_A_we0,
        A_d0 => grp_pi_fu_363_A_d0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_pi_fu_363_A_address1,
        A_ce1 => grp_pi_fu_363_A_ce1,
        A_we1 => grp_pi_fu_363_A_we1,
        A_d1 => grp_pi_fu_363_A_d1,
        A_q1 => stateAsWords_q1);

    grp_theta_fu_368 : component theta
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_theta_fu_368_ap_start,
        ap_done => grp_theta_fu_368_ap_done,
        ap_idle => grp_theta_fu_368_ap_idle,
        ap_ready => grp_theta_fu_368_ap_ready,
        A_address0 => grp_theta_fu_368_A_address0,
        A_ce0 => grp_theta_fu_368_A_ce0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_theta_fu_368_A_address1,
        A_ce1 => grp_theta_fu_368_A_ce1,
        A_we1 => grp_theta_fu_368_A_we1,
        A_d1 => grp_theta_fu_368_A_d1,
        A_q1 => stateAsWords_q1);

    grp_chi_fu_373 : component chi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_chi_fu_373_ap_start,
        ap_done => grp_chi_fu_373_ap_done,
        ap_idle => grp_chi_fu_373_ap_idle,
        ap_ready => grp_chi_fu_373_ap_ready,
        A_address0 => grp_chi_fu_373_A_address0,
        A_ce0 => grp_chi_fu_373_A_ce0,
        A_q0 => stateAsWords_q0,
        A_address1 => grp_chi_fu_373_A_address1,
        A_ce1 => grp_chi_fu_373_A_ce1,
        A_we1 => grp_chi_fu_373_A_we1,
        A_d1 => grp_chi_fu_373_A_d1,
        A_q1 => stateAsWords_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_theta_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_theta_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln293_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((icmp_ln293_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_chi_fu_373_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_chi_fu_373_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_chi_fu_373_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_chi_fu_373_ap_ready = ap_const_logic_1)) then 
                    grp_chi_fu_373_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pi_fu_363_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pi_fu_363_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_pi_fu_363_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pi_fu_363_ap_ready = ap_const_logic_1)) then 
                    grp_pi_fu_363_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_theta_fu_368_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_theta_fu_368_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln293_fu_620_p2 = ap_const_lv1_0))) then 
                    grp_theta_fu_368_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_theta_fu_368_ap_ready = ap_const_logic_1)) then 
                    grp_theta_fu_368_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctx_sponge_byteIOInd_42_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln239_reg_975 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                ctx_sponge_byteIOInd_42_fu_112 <= ap_const_lv32_0;
            elsif (((icmp_ln233_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln239_fu_487_p2 = ap_const_lv1_0))) then 
                ctx_sponge_byteIOInd_42_fu_112 <= add_ln238_fu_482_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ctx_sponge_byteIOInd_42_fu_112 <= ctx_sponge_byteIOInd;
            end if; 
        end if;
    end process;

    i_0_i2_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_0_i2_reg_341 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_reg_1083 = ap_const_lv1_0))) then 
                i_0_i2_reg_341 <= select_ln280_6_reg_1097;
            end if; 
        end if;
    end process;

    i_0_i_i_i_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_0_i_i_i_reg_226 <= i_reg_952;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_i_reg_226 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_i_reg_261 <= i_33_reg_983;
            elsif (((icmp_ln239_fu_487_p2 = ap_const_lv1_1) and (icmp_ln233_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_261 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indexRound_assign_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indexRound_assign_reg_284 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indexRound_assign_reg_284 <= i_35_reg_1015;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvar_flatten7_reg_330 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_811_p2 = ap_const_lv1_0))) then 
                indvar_flatten7_reg_330 <= add_ln280_fu_817_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
                indvar_flatten_reg_296 <= add_ln352_reg_1024;
            elsif (((grp_theta_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                indvar_flatten_reg_296 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_i5_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_i5_reg_352 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_811_p2 = ap_const_lv1_0))) then 
                j_0_i5_reg_352 <= j_13_fu_860_p2;
            end if; 
        end if;
    end process;

    j_0_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_i_reg_272 <= j_reg_1001;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln269_fu_536_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_272 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    loop_1_i_i_i_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                loop_1_i_i_i_reg_249 <= loop_reg_965;
            elsif (((icmp_ln194_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_1_i_i_i_reg_249 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_01_rec_i_i_i_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                p_01_rec_i_i_i_reg_237 <= p_2_rec_i_i_i_fu_913_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_01_rec_i_i_i_reg_237 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    x_0_i_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
                x_0_i_reg_307 <= select_ln353_22_reg_1047;
            elsif (((grp_theta_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                x_0_i_reg_307 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
                y_0_i_reg_319 <= y_reg_1073;
            elsif (((grp_theta_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                y_0_i_reg_319 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln352_reg_1024 <= add_ln352_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln233_fu_460_p2 = ap_const_lv1_0))) then
                ctx_sponge_state_add_reg_970 <= zext_ln149_fu_477_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_33_reg_983 <= i_33_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_35_reg_1015 <= i_35_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_952 <= i_fu_450_p2;
                select_ln226_reg_941 <= select_ln226_fu_434_p3;
                trunc_ln234_reg_957 <= trunc_ln234_fu_456_p1;
                    zext_ln231_reg_947(31 downto 0) <= zext_ln231_fu_442_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln239_reg_975 <= icmp_ln239_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln280_reg_1083 <= icmp_ln280_fu_811_p2;
                icmp_ln280_reg_1083_pp2_iter1_reg <= icmp_ln280_reg_1083;
                select_ln280_6_reg_1097_pp2_iter1_reg <= select_ln280_6_reg_1097;
                select_ln280_reg_1092_pp2_iter1_reg <= select_ln280_reg_1092;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_fu_632_p2 = ap_const_lv1_0))) then
                icmp_ln35211_reg_1034 <= icmp_ln35211_fu_650_p2;
                select_ln353_21_reg_1039 <= select_ln353_21_fu_656_p3;
                x_11_reg_1029 <= x_11_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln352_reg_1020 <= icmp_ln352_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                icmp_ln353_reg_1057 <= icmp_ln353_fu_745_p2;
                stateAsWords_addr_15_reg_1062 <= zext_ln353_23_fu_739_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_reg_1001 <= j_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                loop_reg_965 <= loop_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_811_p2 = ap_const_lv1_0))) then
                select_ln280_6_reg_1097 <= select_ln280_6_fu_843_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_fu_811_p2 = ap_const_lv1_0))) then
                select_ln280_reg_1092 <= select_ln280_fu_835_p3;
                trunc_ln282_reg_1108 <= trunc_ln282_fu_856_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                select_ln353_22_reg_1047 <= select_ln353_22_fu_664_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                select_ln353_reg_1068 <= select_ln353_fu_787_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln269_fu_536_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_993(7 downto 3) <= shl_ln_fu_553_p3(7 downto 3);
                stateAsWords_addr_13_reg_988 <= zext_ln270_fu_548_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_reg_1083 = ap_const_lv1_0))) then
                trunc_ln282_6_reg_1118 <= trunc_ln282_6_fu_883_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then
                y_reg_1073 <= y_fu_794_p2;
            end if;
        end if;
    end process;
    zext_ln231_reg_947(63 downto 32) <= "00000000000000000000000000000000";
    shl_ln_reg_993(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_396_p2, ap_CS_fsm_state3, icmp_ln233_fu_460_p2, icmp_ln239_fu_487_p2, icmp_ln269_fu_536_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln271_fu_561_p2, icmp_ln293_fu_620_p2, ap_CS_fsm_state9, icmp_ln352_fu_632_p2, ap_enable_reg_pp1_iter0, icmp_ln280_fu_811_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state10, grp_theta_fu_368_ap_done, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, grp_pi_fu_363_ap_done, grp_chi_fu_373_ap_done, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln194_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln239_fu_487_p2 = ap_const_lv1_1) and (icmp_ln233_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((icmp_ln233_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln239_fu_487_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln269_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln271_fu_561_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln293_fu_620_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((grp_theta_fu_368_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln352_fu_632_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln352_fu_632_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_pi_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_chi_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln280_fu_811_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((icmp_ln280_fu_811_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    KeccakRhoOffsets_address0 <= zext_ln353_23_fu_739_p1(5 - 1 downto 0);

    KeccakRhoOffsets_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then 
            KeccakRhoOffsets_ce0 <= ap_const_logic_1;
        else 
            KeccakRhoOffsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    KeccakRoundConstants_address0 <= zext_ln382_fu_799_p1(5 - 1 downto 0);

    KeccakRoundConstants_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            KeccakRoundConstants_ce0 <= ap_const_logic_1;
        else 
            KeccakRoundConstants_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln226_fu_416_p2 <= std_logic_vector(unsigned(ctx_sponge_byteIOInd_42_fu_112) + unsigned(zext_ln225_fu_412_p1));
    add_ln234_fu_471_p2 <= std_logic_vector(unsigned(loop_1_i_i_i_reg_249) + unsigned(ctx_sponge_byteIOInd_42_fu_112));
    add_ln238_fu_482_p2 <= std_logic_vector(unsigned(ctx_sponge_byteIOInd_42_fu_112) + unsigned(select_ln226_reg_941));
    add_ln272_fu_577_p2 <= std_logic_vector(unsigned(shl_ln_reg_993) + unsigned(zext_ln271_fu_573_p1));
    add_ln280_fu_817_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_330) + unsigned(ap_const_lv8_1));
    add_ln282_fu_897_p2 <= std_logic_vector(unsigned(zext_ln281_fu_894_p1) + unsigned(shl_ln282_mid2_fu_887_p3));
    add_ln352_fu_638_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_300_p4) + unsigned(ap_const_lv5_1));
    add_ln353_12_fu_676_p2 <= std_logic_vector(unsigned(select_ln353_22_fu_664_p3) + unsigned(ap_const_lv3_3));
    add_ln353_13_fu_699_p2 <= std_logic_vector(unsigned(select_ln353_21_reg_1039) + unsigned(ap_const_lv3_3));
    add_ln353_6_fu_733_p2 <= std_logic_vector(unsigned(shl_ln6_fu_715_p3) + unsigned(zext_ln353_22_fu_729_p1));
    add_ln353_fu_723_p2 <= std_logic_vector(unsigned(zext_ln353_fu_690_p1) + unsigned(zext_ln353_21_fu_711_p1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state11_assign_proc : process(icmp_ln352_fu_632_p2)
    begin
        if ((icmp_ln352_fu_632_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(icmp_ln280_fu_811_p2)
    begin
        if ((icmp_ln280_fu_811_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln194_fu_396_p2)
    begin
        if ((((icmp_ln194_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_i2_phi_fu_345_p4_assign_proc : process(i_0_i2_reg_341, icmp_ln280_reg_1083, ap_CS_fsm_pp2_stage0, select_ln280_6_reg_1097, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln280_reg_1083 = ap_const_lv1_0))) then 
            ap_phi_mux_i_0_i2_phi_fu_345_p4 <= select_ln280_6_reg_1097;
        else 
            ap_phi_mux_i_0_i2_phi_fu_345_p4 <= i_0_i2_reg_341;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_300_p4_assign_proc : process(indvar_flatten_reg_296, icmp_ln352_reg_1020, ap_CS_fsm_pp1_stage0, add_ln352_reg_1024, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_300_p4 <= add_ln352_reg_1024;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_300_p4 <= indvar_flatten_reg_296;
        end if; 
    end process;


    ap_phi_mux_x_0_i_phi_fu_311_p4_assign_proc : process(x_0_i_reg_307, icmp_ln352_reg_1020, ap_CS_fsm_pp1_stage0, select_ln353_22_reg_1047, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_x_0_i_phi_fu_311_p4 <= select_ln353_22_reg_1047;
        else 
            ap_phi_mux_x_0_i_phi_fu_311_p4 <= x_0_i_reg_307;
        end if; 
    end process;


    ap_phi_mux_y_0_i_phi_fu_323_p4_assign_proc : process(y_0_i_reg_319, icmp_ln352_reg_1020, ap_CS_fsm_pp1_stage0, y_reg_1073, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln352_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_y_0_i_phi_fu_323_p4 <= y_reg_1073;
        else 
            ap_phi_mux_y_0_i_phi_fu_323_p4 <= y_0_i_reg_319;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln194_fu_396_p2)
    begin
        if (((icmp_ln194_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ctx_sponge_byteIOInd_42_fu_112;

    ctx_sponge_state_address0_assign_proc : process(ap_CS_fsm_state3, ctx_sponge_state_add_reg_970, ap_CS_fsm_state6, ap_enable_reg_pp2_iter2, ap_CS_fsm_state4, ap_block_pp2_stage0, zext_ln149_fu_477_p1, zext_ln272_fu_582_p1, zext_ln282_5_fu_903_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ctx_sponge_state_address0 <= zext_ln282_5_fu_903_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_sponge_state_address0 <= zext_ln272_fu_582_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_address0 <= ctx_sponge_state_add_reg_970;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_sponge_state_address0 <= zext_ln149_fu_477_p1(8 - 1 downto 0);
        else 
            ctx_sponge_state_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            ctx_sponge_state_ce0 <= ap_const_logic_1;
        else 
            ctx_sponge_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_sponge_state_d0_assign_proc : process(trunc_ln282_6_reg_1118, ap_enable_reg_pp2_iter2, ap_CS_fsm_state4, ap_block_pp2_stage0, xor_ln149_fu_529_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ctx_sponge_state_d0 <= trunc_ln282_6_reg_1118;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_sponge_state_d0 <= xor_ln149_fu_529_p2;
        else 
            ctx_sponge_state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    ctx_sponge_state_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln280_reg_1083_pp2_iter1_reg, ap_enable_reg_pp2_iter2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln280_reg_1083_pp2_iter1_reg = ap_const_lv1_0)))) then 
            ctx_sponge_state_we0 <= ap_const_logic_1;
        else 
            ctx_sponge_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_chi_fu_373_ap_start <= grp_chi_fu_373_ap_start_reg;
    grp_pi_fu_363_ap_start <= grp_pi_fu_363_ap_start_reg;
    grp_theta_fu_368_ap_start <= grp_theta_fu_368_ap_start_reg;
    i_33_fu_542_p2 <= std_logic_vector(unsigned(i_0_i_reg_261) + unsigned(ap_const_lv5_1));
    i_34_fu_823_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_i_0_i2_phi_fu_345_p4));
    i_35_fu_626_p2 <= std_logic_vector(unsigned(indexRound_assign_reg_284) + unsigned(ap_const_lv5_1));
    i_fu_450_p2 <= std_logic_vector(unsigned(zext_ln231_7_fu_446_p1) + unsigned(i_0_i_i_i_reg_226));
    icmp_ln194_fu_396_p2 <= "1" when (tmp_fu_386_p4 = ap_const_lv32_0) else "0";
    icmp_ln226_fu_422_p2 <= "1" when (unsigned(add_ln226_fu_416_p2) > unsigned(ap_const_lv32_A8)) else "0";
    icmp_ln233_fu_460_p2 <= "1" when (loop_1_i_i_i_reg_249 = select_ln226_reg_941) else "0";
    icmp_ln239_fu_487_p2 <= "1" when (add_ln238_fu_482_p2 = ap_const_lv32_A8) else "0";
    icmp_ln269_fu_536_p2 <= "1" when (i_0_i_reg_261 = ap_const_lv5_19) else "0";
    icmp_ln271_fu_561_p2 <= "1" when (j_0_i_reg_272 = ap_const_lv4_8) else "0";
    icmp_ln280_fu_811_p2 <= "1" when (indvar_flatten7_reg_330 = ap_const_lv8_C8) else "0";
    icmp_ln281_fu_829_p2 <= "1" when (j_0_i5_reg_352 = ap_const_lv4_8) else "0";
    icmp_ln293_fu_620_p2 <= "1" when (indexRound_assign_reg_284 = ap_const_lv5_18) else "0";
    icmp_ln35211_fu_650_p2 <= "1" when (ap_phi_mux_y_0_i_phi_fu_323_p4 = ap_const_lv3_5) else "0";
    icmp_ln352_fu_632_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_300_p4 = ap_const_lv5_19) else "0";
    icmp_ln353_11_fu_670_p2 <= "1" when (unsigned(select_ln353_22_fu_664_p3) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln353_12_fu_694_p2 <= "1" when (unsigned(select_ln353_21_reg_1039) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln353_fu_745_p2 <= "1" when (add_ln353_6_fu_733_p2 = ap_const_lv5_0) else "0";
    j_13_fu_860_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln280_fu_835_p3));
    j_fu_567_p2 <= std_logic_vector(unsigned(j_0_i_reg_272) + unsigned(ap_const_lv4_1));
    loop_fu_465_p2 <= std_logic_vector(unsigned(loop_1_i_i_i_reg_249) + unsigned(ap_const_lv32_1));
    lshr_ln282_fu_877_p2 <= std_logic_vector(shift_right(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln282_fu_873_p1(31-1 downto 0)))));
    lshr_ln353_fu_775_p2 <= std_logic_vector(shift_right(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln353_26_fu_771_p1(31-1 downto 0)))));
    or_ln272_fu_613_p2 <= (stateAsWords_q0 or shl_ln272_fu_607_p2);
    p_2_rec_i_i_i_fu_913_p2 <= std_logic_vector(unsigned(zext_ln231_reg_947) + unsigned(p_01_rec_i_i_i_reg_237));
    partialBlock_32_fu_428_p2 <= std_logic_vector(unsigned(ap_const_lv32_A8) - unsigned(ctx_sponge_byteIOInd_42_fu_112));
    partialBlock_fu_406_p2 <= std_logic_vector(signed(ap_const_lv2_2) - signed(trunc_ln225_fu_402_p1));
    select_ln226_fu_434_p3 <= 
        partialBlock_32_fu_428_p2 when (icmp_ln226_fu_422_p2(0) = '1') else 
        zext_ln225_fu_412_p1;
    select_ln234_fu_521_p3 <= 
        zext_ln234_fu_514_p1 when (xor_ln234_fu_502_p2(0) = '1') else 
        trunc_ln234_8_fu_518_p1;
    select_ln280_6_fu_843_p3 <= 
        i_34_fu_823_p2 when (icmp_ln281_fu_829_p2(0) = '1') else 
        ap_phi_mux_i_0_i2_phi_fu_345_p4;
    select_ln280_fu_835_p3 <= 
        ap_const_lv4_0 when (icmp_ln281_fu_829_p2(0) = '1') else 
        j_0_i5_reg_352;
    select_ln353_21_fu_656_p3 <= 
        ap_const_lv3_0 when (icmp_ln35211_fu_650_p2(0) = '1') else 
        ap_phi_mux_y_0_i_phi_fu_323_p4;
    select_ln353_22_fu_664_p3 <= 
        x_11_reg_1029 when (icmp_ln35211_reg_1034(0) = '1') else 
        x_0_i_reg_307;
    select_ln353_23_fu_682_p3 <= 
        select_ln353_22_fu_664_p3 when (icmp_ln353_11_fu_670_p2(0) = '1') else 
        add_ln353_12_fu_676_p2;
    select_ln353_24_fu_704_p3 <= 
        select_ln353_21_reg_1039 when (icmp_ln353_12_fu_694_p2(0) = '1') else 
        add_ln353_13_fu_699_p2;
    select_ln353_fu_787_p3 <= 
        stateAsWords_q0 when (icmp_ln353_reg_1057(0) = '1') else 
        xor_ln353_fu_781_p2;
    shl_ln272_fu_607_p2 <= std_logic_vector(shift_left(unsigned(zext_ln272_7_fu_587_p1),to_integer(unsigned('0' & zext_ln272_8_fu_603_p1(31-1 downto 0)))));
    shl_ln272_s_fu_595_p3 <= (trunc_ln272_fu_591_p1 & ap_const_lv3_0);
    shl_ln282_6_fu_866_p3 <= (trunc_ln282_reg_1108 & ap_const_lv3_0);
    shl_ln282_mid2_fu_887_p3 <= (select_ln280_6_reg_1097_pp2_iter1_reg & ap_const_lv3_0);
    shl_ln353_fu_759_p2 <= std_logic_vector(shift_left(unsigned(stateAsWords_q1),to_integer(unsigned('0' & zext_ln353_25_fu_755_p1(31-1 downto 0)))));
    shl_ln6_fu_715_p3 <= (select_ln353_24_fu_704_p3 & ap_const_lv2_0);
    shl_ln_fu_553_p3 <= (i_0_i_reg_261 & ap_const_lv3_0);

    stateAsWords_address0_assign_proc : process(ap_CS_fsm_state5, stateAsWords_addr_13_reg_988, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, stateAsWords_addr_15_reg_1062, ap_CS_fsm_state10, ap_enable_reg_pp1_iter1, grp_pi_fu_363_A_address0, grp_theta_fu_368_A_address0, grp_chi_fu_373_A_address0, ap_CS_fsm_state7, ap_block_pp1_stage0, ap_CS_fsm_state16, ap_CS_fsm_state18, zext_ln270_fu_548_p1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stateAsWords_address0 <= stateAsWords_addr_15_reg_1062;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            stateAsWords_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            stateAsWords_address0 <= stateAsWords_addr_13_reg_988;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stateAsWords_address0 <= zext_ln270_fu_548_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_address0 <= grp_chi_fu_373_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_address0 <= grp_theta_fu_368_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_address0 <= grp_pi_fu_363_A_address0;
        else 
            stateAsWords_address0 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_address1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state19, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state10, grp_pi_fu_363_A_address1, grp_theta_fu_368_A_address1, grp_chi_fu_373_A_address1, ap_CS_fsm_state20, ap_block_pp2_stage0, ap_CS_fsm_state16, ap_CS_fsm_state18, zext_ln353_23_fu_739_p1, ap_block_pp1_stage1, zext_ln280_fu_851_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            stateAsWords_address1 <= zext_ln280_fu_851_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            stateAsWords_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            stateAsWords_address1 <= zext_ln353_23_fu_739_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_address1 <= grp_chi_fu_373_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_address1 <= grp_theta_fu_368_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_address1 <= grp_pi_fu_363_A_address1;
        else 
            stateAsWords_address1 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state10, ap_enable_reg_pp1_iter1, grp_pi_fu_363_A_ce0, grp_theta_fu_368_A_ce0, grp_chi_fu_373_A_ce0, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            stateAsWords_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_ce0 <= grp_chi_fu_373_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_ce0 <= grp_theta_fu_368_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_ce0 <= grp_pi_fu_363_A_ce0;
        else 
            stateAsWords_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_ce1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state19, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state10, grp_pi_fu_363_A_ce1, grp_theta_fu_368_A_ce1, grp_chi_fu_373_A_ce1, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            stateAsWords_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_ce1 <= grp_chi_fu_373_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_ce1 <= grp_theta_fu_368_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_ce1 <= grp_pi_fu_363_A_ce1;
        else 
            stateAsWords_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp1_stage0, select_ln353_reg_1068, ap_enable_reg_pp1_iter1, grp_pi_fu_363_A_d0, ap_CS_fsm_state7, ap_block_pp1_stage0, ap_CS_fsm_state16, or_ln272_fu_613_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stateAsWords_d0 <= select_ln353_reg_1068;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            stateAsWords_d0 <= or_ln272_fu_613_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            stateAsWords_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_d0 <= grp_pi_fu_363_A_d0;
        else 
            stateAsWords_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_d1_assign_proc : process(ap_CS_fsm_state10, grp_pi_fu_363_A_d1, grp_theta_fu_368_A_d1, grp_chi_fu_373_A_d1, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state18, xor_ln382_fu_804_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            stateAsWords_d1 <= xor_ln382_fu_804_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_d1 <= grp_chi_fu_373_A_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_d1 <= grp_theta_fu_368_A_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_d1 <= grp_pi_fu_363_A_d1;
        else 
            stateAsWords_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_we0_assign_proc : process(icmp_ln269_fu_536_p2, ap_CS_fsm_state5, icmp_ln352_reg_1020, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, grp_pi_fu_363_A_we0, ap_CS_fsm_state7, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln352_reg_1020 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln269_fu_536_p2 = ap_const_lv1_0)))) then 
            stateAsWords_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_we0 <= grp_pi_fu_363_A_we0;
        else 
            stateAsWords_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_we1_assign_proc : process(ap_CS_fsm_state10, grp_pi_fu_363_A_we1, grp_theta_fu_368_A_we1, grp_chi_fu_373_A_we1, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            stateAsWords_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stateAsWords_we1 <= grp_chi_fu_373_A_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            stateAsWords_we1 <= grp_theta_fu_368_A_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            stateAsWords_we1 <= grp_pi_fu_363_A_we1;
        else 
            stateAsWords_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln353_fu_765_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln353_24_fu_751_p1));
    tmp_63_fu_507_p3 <= x(8 downto 8);
    tmp_fu_386_p4 <= i_0_i_i_i_reg_226(32 downto 1);
    trunc_ln225_fu_402_p1 <= i_0_i_i_i_reg_226(2 - 1 downto 0);
    trunc_ln234_7_fu_498_p1 <= loop_1_i_i_i_reg_249(1 - 1 downto 0);
    trunc_ln234_8_fu_518_p1 <= x(8 - 1 downto 0);
    trunc_ln234_fu_456_p1 <= p_01_rec_i_i_i_reg_237(1 - 1 downto 0);
    trunc_ln272_fu_591_p1 <= j_0_i_reg_272(3 - 1 downto 0);
    trunc_ln282_6_fu_883_p1 <= lshr_ln282_fu_877_p2(8 - 1 downto 0);
    trunc_ln282_fu_856_p1 <= select_ln280_fu_835_p3(3 - 1 downto 0);
    x_11_fu_644_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_0_i_phi_fu_311_p4) + unsigned(ap_const_lv3_1));
    xor_ln149_fu_529_p2 <= (select_ln234_fu_521_p3 xor ctx_sponge_state_q0);
    xor_ln234_fu_502_p2 <= (trunc_ln234_reg_957 xor trunc_ln234_7_fu_498_p1);
    xor_ln353_fu_781_p2 <= (shl_ln353_fu_759_p2 xor lshr_ln353_fu_775_p2);
    xor_ln382_fu_804_p2 <= (stateAsWords_q1 xor KeccakRoundConstants_q0);
    y_fu_794_p2 <= std_logic_vector(unsigned(select_ln353_21_reg_1039) + unsigned(ap_const_lv3_1));
    zext_ln149_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln234_fu_471_p2),64));
    zext_ln225_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(partialBlock_fu_406_p2),32));
    zext_ln231_7_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln226_fu_434_p3),33));
    zext_ln231_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln226_fu_434_p3),64));
    zext_ln234_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_507_p3),8));
    zext_ln270_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_261),64));
    zext_ln271_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_272),8));
    zext_ln272_7_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctx_sponge_state_q0),64));
    zext_ln272_8_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln272_s_fu_595_p3),64));
    zext_ln272_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln272_fu_577_p2),64));
    zext_ln280_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln280_6_fu_843_p3),64));
    zext_ln281_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln280_reg_1092_pp2_iter1_reg),8));
    zext_ln282_5_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln282_fu_897_p2),64));
    zext_ln282_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln282_6_fu_866_p3),64));
    zext_ln353_21_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln353_24_fu_704_p3),4));
    zext_ln353_22_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_fu_723_p2),5));
    zext_ln353_23_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_6_fu_733_p2),64));
    zext_ln353_24_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),7));
    zext_ln353_25_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),64));
    zext_ln353_26_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln353_fu_765_p2),64));
    zext_ln353_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln353_23_fu_682_p3),4));
    zext_ln382_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexRound_assign_reg_284),64));
end behav;
