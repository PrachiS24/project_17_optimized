-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of pi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_0_reg_246 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln361_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln361_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_fu_276_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_622 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln362_1_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_1_reg_627 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_2_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_2_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_5_fu_308_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln362_5_reg_647 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln362_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_3_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_3_reg_662 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_4_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_4_reg_672 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln363_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln363_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln363_reg_682_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln363_reg_682_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_6_fu_344_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_6_reg_686 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal shl_ln_fu_350_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_691 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state9_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state19_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal zext_ln364_12_fu_386_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln364_12_reg_709 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state10_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_state11_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal zext_ln364_10_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln364_10_reg_724 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln364_11_fu_416_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_11_reg_730 : STD_LOGIC_VECTOR (3 downto 0);
    signal tempA_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempA_load_reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tempA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempA_load_1_reg_750 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln364_fu_472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_reg_765 : STD_LOGIC_VECTOR (4 downto 0);
    signal tempA_load_2_reg_770 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempA_load_3_reg_775 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_369_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln364_1_reg_785 : STD_LOGIC_VECTOR (2 downto 0);
    signal tempA_load_4_reg_790 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal urem_ln364_2_reg_795 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal tempA_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tempA_ce0 : STD_LOGIC;
    signal tempA_we0 : STD_LOGIC;
    signal tempA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempA_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tempA_ce1 : STD_LOGIC;
    signal tempA_we1 : STD_LOGIC;
    signal tempA_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_x_0_phi_fu_250_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_x_1_phi_fu_262_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln364_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln364_5_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln364_2_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln364_3_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln364_4_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal zext_ln364_1_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal zext_ln364_6_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage4 : BOOLEAN;
    signal zext_ln364_7_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln364_8_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln364_9_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln362_6_fu_282_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln362_fu_286_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln362_1_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln362_2_fu_317_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln362_3_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_358_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_380_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln364_1_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln364_7_fu_436_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln364_3_fu_446_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln364_fu_460_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln364_1_fu_464_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln364_13_fu_456_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_4_fu_478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln364_1_fu_492_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln364_5_fu_503_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln364_14_fu_509_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln364_2_fu_495_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_6_fu_513_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln364_2_fu_524_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln364_9_fu_535_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln364_15_fu_541_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln364_3_fu_527_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_10_fu_545_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln364_3_fu_556_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln364_12_fu_566_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln364_16_fu_572_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln364_fu_560_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_13_fu_576_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln364_4_fu_587_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln364_15_fu_597_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_17_fu_603_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln364_4_fu_591_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln364_16_fu_607_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component crypto_sign_urem_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component crypto_sign_urem_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component crypto_sign_urem_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component pi_tempA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    tempA_U : component pi_tempA
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempA_address0,
        ce0 => tempA_ce0,
        we0 => tempA_we0,
        d0 => tempA_d0,
        q0 => tempA_q0,
        address1 => tempA_address1,
        ce1 => tempA_ce1,
        we1 => tempA_we1,
        d1 => tempA_d1,
        q1 => tempA_q1);

    crypto_sign_urem_bkb_U6 : component crypto_sign_urem_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_358_p0,
        din1 => ap_const_lv4_5,
        ce => ap_const_logic_1,
        dout => grp_fu_358_p2);

    crypto_sign_urem_cud_U7 : component crypto_sign_urem_cud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_369_p0,
        din1 => ap_const_lv4_5,
        ce => ap_const_logic_1,
        dout => grp_fu_369_p2);

    crypto_sign_urem_cud_U8 : component crypto_sign_urem_cud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_380_p0,
        din1 => ap_const_lv4_5,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p2);

    crypto_sign_urem_dEe_U9 : component crypto_sign_urem_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        din1 => grp_fu_395_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    crypto_sign_urem_dEe_U10 : component crypto_sign_urem_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_reg_246 <= x_reg_622;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_246 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_1_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_1_reg_258 <= ap_const_lv3_0;
            elsif (((icmp_ln363_reg_682 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                x_1_reg_258 <= x_6_reg_686;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                add_ln364_reg_765 <= add_ln364_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln361_reg_618 <= icmp_ln361_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln363_reg_682 <= icmp_ln363_fu_338_p2;
                icmp_ln363_reg_682_pp1_iter1_reg <= icmp_ln363_reg_682;
                icmp_ln363_reg_682_pp1_iter2_reg <= icmp_ln363_reg_682_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    shl_ln_reg_691(3 downto 1) <= shl_ln_fu_350_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                tempA_load_1_reg_750 <= tempA_q0;
                tempA_load_reg_745 <= tempA_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                tempA_load_2_reg_770 <= tempA_q1;
                tempA_load_3_reg_775 <= tempA_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then
                tempA_load_4_reg_790 <= tempA_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then
                urem_ln364_1_reg_785 <= grp_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then
                urem_ln364_2_reg_795 <= grp_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                x_6_reg_686 <= x_6_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                x_reg_622 <= x_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln361_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln362_1_reg_627(3 downto 0) <= zext_ln362_1_fu_292_p1(3 downto 0);
                    zext_ln362_2_reg_637(3 downto 0) <= zext_ln362_2_fu_303_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln362_3_reg_662(4 downto 0) <= zext_ln362_3_fu_323_p1(4 downto 0);
                    zext_ln362_5_reg_647(2 downto 0) <= zext_ln362_5_fu_308_p1(2 downto 0);
                    zext_ln362_reg_652(2 downto 0) <= zext_ln362_fu_312_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    zext_ln362_4_reg_672(4 downto 0) <= zext_ln362_4_fu_333_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln364_10_reg_724(2 downto 0) <= zext_ln364_10_fu_412_p1(2 downto 0);
                    zext_ln364_11_reg_730(2 downto 0) <= zext_ln364_11_fu_416_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln363_reg_682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001))) then
                    zext_ln364_12_reg_709(3 downto 1) <= zext_ln364_12_fu_386_p1(3 downto 1);
            end if;
        end if;
    end process;
    zext_ln362_1_reg_627(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln362_2_reg_637(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln362_5_reg_647(4 downto 3) <= "00";
    zext_ln362_reg_652(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln362_3_reg_662(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln362_4_reg_672(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_691(0) <= '0';
    zext_ln364_12_reg_709(0) <= '0';
    zext_ln364_12_reg_709(4) <= '0';
    zext_ln364_10_reg_724(4 downto 3) <= "00";
    zext_ln364_11_reg_730(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln361_fu_270_p2, ap_enable_reg_pp0_iter0, icmp_ln363_fu_338_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage2_subdone, ap_enable_reg_pp1_iter2, ap_block_pp0_stage1_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln361_fu_270_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln361_fu_270_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln363_fu_338_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln363_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln362_1_fu_292_p1, ap_CS_fsm_pp0_stage1, zext_ln362_fu_312_p1, zext_ln362_4_fu_333_p1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp1_stage1, zext_ln364_1_fu_488_p1, ap_block_pp1_stage3, zext_ln364_8_fu_582_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            A_address0 <= zext_ln364_8_fu_582_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            A_address0 <= zext_ln364_1_fu_488_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            A_address0 <= zext_ln362_4_fu_333_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_address0 <= zext_ln362_fu_312_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address0 <= zext_ln362_1_fu_292_p1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln362_2_fu_303_p1, ap_CS_fsm_pp0_stage1, zext_ln362_3_fu_323_p1, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp1_stage2, zext_ln364_6_fu_519_p1, ap_block_pp1_stage4, zext_ln364_7_fu_551_p1, zext_ln364_9_fu_613_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            A_address1 <= zext_ln364_9_fu_613_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            A_address1 <= zext_ln364_7_fu_551_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
            A_address1 <= zext_ln364_6_fu_519_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_address1 <= zext_ln362_3_fu_323_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address1 <= zext_ln362_2_fu_303_p1(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_d0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, tempA_load_reg_745, ap_enable_reg_pp1_iter1, tempA_load_3_reg_775, ap_enable_reg_pp1_iter2, ap_block_pp1_stage1, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            A_d0 <= tempA_load_3_reg_775;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            A_d0 <= tempA_load_reg_745;
        else 
            A_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_d1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter1, tempA_load_1_reg_750, tempA_load_2_reg_770, tempA_load_4_reg_790, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_block_pp1_stage2, ap_block_pp1_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            A_d1 <= tempA_load_4_reg_790;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            A_d1 <= tempA_load_2_reg_770;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
            A_d1 <= tempA_load_1_reg_750;
        else 
            A_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_we0_assign_proc : process(icmp_ln363_reg_682_pp1_iter1_reg, icmp_ln363_reg_682_pp1_iter2_reg, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001)) or ((icmp_ln363_reg_682_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln363_reg_682_pp1_iter1_reg, icmp_ln363_reg_682_pp1_iter2_reg, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((icmp_ln363_reg_682_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((icmp_ln363_reg_682_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln362_1_fu_297_p2 <= std_logic_vector(unsigned(zext_ln362_6_fu_282_p1) + unsigned(ap_const_lv4_A));
    add_ln362_2_fu_317_p2 <= std_logic_vector(unsigned(zext_ln362_5_fu_308_p1) + unsigned(ap_const_lv5_F));
    add_ln362_3_fu_328_p2 <= std_logic_vector(unsigned(zext_ln362_5_reg_647) + unsigned(ap_const_lv5_14));
    add_ln362_fu_286_p2 <= std_logic_vector(unsigned(zext_ln362_6_fu_282_p1) + unsigned(ap_const_lv4_5));
    add_ln364_10_fu_545_p2 <= std_logic_vector(unsigned(zext_ln364_15_fu_541_p1) + unsigned(shl_ln364_3_fu_527_p3));
    add_ln364_12_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(trunc_ln364_3_fu_556_p1));
    add_ln364_13_fu_576_p2 <= std_logic_vector(unsigned(zext_ln364_16_fu_572_p1) + unsigned(shl_ln364_fu_560_p2));
    add_ln364_15_fu_597_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(trunc_ln364_4_fu_587_p1));
    add_ln364_16_fu_607_p2 <= std_logic_vector(unsigned(zext_ln364_17_fu_603_p1) + unsigned(shl_ln364_4_fu_591_p2));
    add_ln364_1_fu_425_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) + unsigned(zext_ln364_11_fu_416_p1));
    add_ln364_3_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) + unsigned(zext_ln364_10_reg_724));
    add_ln364_4_fu_478_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(zext_ln364_10_reg_724));
    add_ln364_5_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(trunc_ln364_1_fu_492_p1));
    add_ln364_6_fu_513_p2 <= std_logic_vector(unsigned(zext_ln364_14_fu_509_p1) + unsigned(shl_ln364_2_fu_495_p3));
    add_ln364_7_fu_436_p2 <= std_logic_vector(signed(ap_const_lv4_A) + signed(zext_ln364_11_reg_730));
    add_ln364_9_fu_535_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(trunc_ln364_2_fu_524_p1));
    add_ln364_fu_472_p2 <= std_logic_vector(unsigned(shl_ln364_1_fu_464_p3) + unsigned(zext_ln364_13_fu_456_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(10);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln361_fu_270_p2)
    begin
        if ((icmp_ln361_fu_270_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln363_fu_338_p2)
    begin
        if ((icmp_ln363_fu_338_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_0_phi_fu_250_p4_assign_proc : process(x_0_reg_246, icmp_ln361_reg_618, ap_CS_fsm_pp0_stage0, x_reg_622, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_phi_fu_250_p4 <= x_reg_622;
        else 
            ap_phi_mux_x_0_phi_fu_250_p4 <= x_0_reg_246;
        end if; 
    end process;


    ap_phi_mux_x_1_phi_fu_262_p4_assign_proc : process(x_1_reg_258, icmp_ln363_reg_682, ap_CS_fsm_pp1_stage0, x_6_reg_686, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln363_reg_682 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_x_1_phi_fu_262_p4 <= x_6_reg_686;
        else 
            ap_phi_mux_x_1_phi_fu_262_p4 <= x_1_reg_258;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_358_p0 <= (ap_phi_mux_x_1_phi_fu_262_p4 & ap_const_lv1_0);
    grp_fu_369_p0 <= std_logic_vector(unsigned(ap_const_lv4_3) + unsigned(shl_ln_reg_691));
    grp_fu_380_p0 <= std_logic_vector(unsigned(ap_const_lv4_6) + unsigned(shl_ln_reg_691));
    grp_fu_395_p0 <= std_logic_vector(unsigned(ap_const_lv5_9) + unsigned(zext_ln364_12_fu_386_p1));
    grp_fu_395_p1 <= ap_const_lv5_5(4 - 1 downto 0);
    grp_fu_406_p0 <= std_logic_vector(unsigned(ap_const_lv5_C) + unsigned(zext_ln364_12_reg_709));
    grp_fu_406_p1 <= ap_const_lv5_5(4 - 1 downto 0);
    icmp_ln361_fu_270_p2 <= "1" when (ap_phi_mux_x_0_phi_fu_250_p4 = ap_const_lv3_5) else "0";
    icmp_ln363_fu_338_p2 <= "1" when (ap_phi_mux_x_1_phi_fu_262_p4 = ap_const_lv3_5) else "0";
    shl_ln364_1_fu_464_p3 <= (trunc_ln364_fu_460_p1 & ap_const_lv2_0);
    shl_ln364_2_fu_495_p3 <= (trunc_ln364_1_fu_492_p1 & ap_const_lv2_0);
    shl_ln364_3_fu_527_p3 <= (trunc_ln364_2_fu_524_p1 & ap_const_lv2_0);
    shl_ln364_4_fu_591_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_406_p2),to_integer(unsigned('0' & ap_const_lv5_2(5-1 downto 0)))));
    shl_ln364_fu_560_p2 <= std_logic_vector(shift_left(unsigned(grp_fu_395_p2),to_integer(unsigned('0' & ap_const_lv5_2(5-1 downto 0)))));
    shl_ln_fu_350_p3 <= (ap_phi_mux_x_1_phi_fu_262_p4 & ap_const_lv1_0);

    tempA_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln362_1_reg_627, ap_CS_fsm_pp0_stage1, zext_ln362_3_reg_662, zext_ln362_4_reg_672, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln364_5_fu_431_p1, ap_block_pp1_stage1, zext_ln364_3_fu_451_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            tempA_address0 <= zext_ln364_3_fu_451_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempA_address0 <= zext_ln364_5_fu_431_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            tempA_address0 <= zext_ln362_4_reg_672(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tempA_address0 <= zext_ln362_3_reg_662(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            tempA_address0 <= zext_ln362_1_reg_627(5 - 1 downto 0);
        else 
            tempA_address0 <= "XXXXX";
        end if; 
    end process;


    tempA_address1_assign_proc : process(ap_enable_reg_pp0_iter0, zext_ln362_2_reg_637, ap_CS_fsm_pp0_stage1, zext_ln362_reg_652, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln364_fu_420_p1, zext_ln364_2_fu_441_p1, ap_block_pp1_stage1, zext_ln364_4_fu_483_p1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            tempA_address1 <= zext_ln364_4_fu_483_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            tempA_address1 <= zext_ln364_2_fu_441_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempA_address1 <= zext_ln364_fu_420_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tempA_address1 <= zext_ln362_reg_652(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            tempA_address1 <= zext_ln362_2_reg_637(5 - 1 downto 0);
        else 
            tempA_address1 <= "XXXXX";
        end if; 
    end process;


    tempA_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter1, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            tempA_ce0 <= ap_const_logic_1;
        else 
            tempA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempA_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            tempA_ce1 <= ap_const_logic_1;
        else 
            tempA_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempA_d0_assign_proc : process(A_q0, A_q1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            tempA_d0 <= A_q1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            tempA_d0 <= A_q0;
        else 
            tempA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempA_d1_assign_proc : process(A_q0, A_q1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                tempA_d1 <= A_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                tempA_d1 <= A_q1;
            else 
                tempA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            tempA_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempA_we0_assign_proc : process(icmp_ln361_reg_618, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            tempA_we0 <= ap_const_logic_1;
        else 
            tempA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempA_we1_assign_proc : process(icmp_ln361_reg_618, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln361_reg_618 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            tempA_we1 <= ap_const_logic_1;
        else 
            tempA_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln364_1_fu_492_p1 <= urem_ln364_1_reg_785(3 - 1 downto 0);
    trunc_ln364_2_fu_524_p1 <= urem_ln364_2_reg_795(3 - 1 downto 0);
    trunc_ln364_3_fu_556_p1 <= grp_fu_395_p2(3 - 1 downto 0);
    trunc_ln364_4_fu_587_p1 <= grp_fu_406_p2(4 - 1 downto 0);
    trunc_ln364_fu_460_p1 <= grp_fu_358_p2(3 - 1 downto 0);
    x_6_fu_344_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_1_phi_fu_262_p4) + unsigned(ap_const_lv3_1));
    x_fu_276_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_0_phi_fu_250_p4) + unsigned(ap_const_lv3_1));
    zext_ln362_1_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_fu_286_p2),64));
    zext_ln362_2_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_1_fu_297_p2),64));
    zext_ln362_3_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_2_fu_317_p2),64));
    zext_ln362_4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln362_3_fu_328_p2),64));
    zext_ln362_5_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_246),5));
    zext_ln362_6_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x_0_phi_fu_250_p4),4));
    zext_ln362_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_246),64));
    zext_ln364_10_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_258),5));
    zext_ln364_11_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_258),4));
    zext_ln364_12_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_691),5));
    zext_ln364_13_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_358_p2),5));
    zext_ln364_14_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_5_fu_503_p2),5));
    zext_ln364_15_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_9_fu_535_p2),5));
    zext_ln364_16_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_12_fu_566_p2),5));
    zext_ln364_17_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_15_fu_597_p2),5));
    zext_ln364_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_reg_765),64));
    zext_ln364_2_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_7_fu_436_p2),64));
    zext_ln364_3_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_3_fu_446_p2),64));
    zext_ln364_4_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_4_fu_478_p2),64));
    zext_ln364_5_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_1_fu_425_p2),64));
    zext_ln364_6_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_6_fu_513_p2),64));
    zext_ln364_7_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_10_fu_545_p2),64));
    zext_ln364_8_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_13_fu_576_p2),64));
    zext_ln364_9_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln364_16_fu_607_p2),64));
    zext_ln364_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_258),64));
end behav;
