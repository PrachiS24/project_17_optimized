-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeccakP1600OnWords is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of KeccakP1600OnWords is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal KeccakRhoOffsets_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRhoOffsets_ce0 : STD_LOGIC;
    signal KeccakRhoOffsets_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal KeccakRoundConstants_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRoundConstants_ce0 : STD_LOGIC;
    signal KeccakRoundConstants_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_reg_125 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_0_i_reg_136 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_i_reg_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_183_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_377 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln352_3_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln352_3_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln352_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln352_reg_386 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal x_fu_201_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_391 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln352_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln352_reg_396 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln353_17_fu_213_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_17_reg_401 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_18_fu_221_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_18_reg_409 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln353_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln353_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_2_reg_424 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln353_fu_344_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln353_reg_430 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal y_fu_351_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_435 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_theta_fu_165_ap_ready : STD_LOGIC;
    signal grp_theta_fu_165_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal grp_pi_fu_159_ap_start : STD_LOGIC;
    signal grp_pi_fu_159_ap_done : STD_LOGIC;
    signal grp_pi_fu_159_ap_idle : STD_LOGIC;
    signal grp_pi_fu_159_ap_ready : STD_LOGIC;
    signal grp_pi_fu_159_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_159_A_ce0 : STD_LOGIC;
    signal grp_pi_fu_159_A_we0 : STD_LOGIC;
    signal grp_pi_fu_159_A_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pi_fu_159_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_pi_fu_159_A_ce1 : STD_LOGIC;
    signal grp_pi_fu_159_A_we1 : STD_LOGIC;
    signal grp_pi_fu_159_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_theta_fu_165_ap_start : STD_LOGIC;
    signal grp_theta_fu_165_ap_idle : STD_LOGIC;
    signal grp_theta_fu_165_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_165_A_ce0 : STD_LOGIC;
    signal grp_theta_fu_165_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_theta_fu_165_A_ce1 : STD_LOGIC;
    signal grp_theta_fu_165_A_we1 : STD_LOGIC;
    signal grp_theta_fu_165_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_chi_fu_171_ap_start : STD_LOGIC;
    signal grp_chi_fu_171_ap_done : STD_LOGIC;
    signal grp_chi_fu_171_ap_idle : STD_LOGIC;
    signal grp_chi_fu_171_ap_ready : STD_LOGIC;
    signal grp_chi_fu_171_A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_171_A_ce0 : STD_LOGIC;
    signal grp_chi_fu_171_A_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_chi_fu_171_A_ce1 : STD_LOGIC;
    signal grp_chi_fu_171_A_we1 : STD_LOGIC;
    signal grp_chi_fu_171_A_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indexRound_assign_reg_113 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_129_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_x_0_i_phi_fu_140_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_y_0_i_phi_fu_152_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pi_fu_159_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_theta_fu_165_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln293_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_chi_fu_171_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln353_17_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln382_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln382_fu_361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln353_9_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln353_10_fu_233_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_19_fu_239_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln353_10_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln353_11_fu_256_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln353_20_fu_261_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln353_fu_247_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln353_15_fu_268_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln353_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_272_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln353_16_fu_286_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln353_5_fu_290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln353_19_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln353_18_fu_308_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln353_fu_322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln353_20_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln353_fu_332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln353_fu_316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln353_fu_338_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component theta IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component chi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component KeccakP1600OnWordeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component KeccakP1600OnWordfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    KeccakRhoOffsets_U : component KeccakP1600OnWordeOg
    generic map (
        DataWidth => 6,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRhoOffsets_address0,
        ce0 => KeccakRhoOffsets_ce0,
        q0 => KeccakRhoOffsets_q0);

    KeccakRoundConstants_U : component KeccakP1600OnWordfYi
    generic map (
        DataWidth => 64,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => KeccakRoundConstants_address0,
        ce0 => KeccakRoundConstants_ce0,
        q0 => KeccakRoundConstants_q0);

    grp_pi_fu_159 : component pi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pi_fu_159_ap_start,
        ap_done => grp_pi_fu_159_ap_done,
        ap_idle => grp_pi_fu_159_ap_idle,
        ap_ready => grp_pi_fu_159_ap_ready,
        A_address0 => grp_pi_fu_159_A_address0,
        A_ce0 => grp_pi_fu_159_A_ce0,
        A_we0 => grp_pi_fu_159_A_we0,
        A_d0 => grp_pi_fu_159_A_d0,
        A_q0 => state_q0,
        A_address1 => grp_pi_fu_159_A_address1,
        A_ce1 => grp_pi_fu_159_A_ce1,
        A_we1 => grp_pi_fu_159_A_we1,
        A_d1 => grp_pi_fu_159_A_d1,
        A_q1 => state_q1);

    grp_theta_fu_165 : component theta
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_theta_fu_165_ap_start,
        ap_done => grp_theta_fu_165_ap_done,
        ap_idle => grp_theta_fu_165_ap_idle,
        ap_ready => grp_theta_fu_165_ap_ready,
        A_address0 => grp_theta_fu_165_A_address0,
        A_ce0 => grp_theta_fu_165_A_ce0,
        A_q0 => state_q0,
        A_address1 => grp_theta_fu_165_A_address1,
        A_ce1 => grp_theta_fu_165_A_ce1,
        A_we1 => grp_theta_fu_165_A_we1,
        A_d1 => grp_theta_fu_165_A_d1,
        A_q1 => state_q1);

    grp_chi_fu_171 : component chi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_chi_fu_171_ap_start,
        ap_done => grp_chi_fu_171_ap_done,
        ap_idle => grp_chi_fu_171_ap_idle,
        ap_ready => grp_chi_fu_171_ap_ready,
        A_address0 => grp_chi_fu_171_A_address0,
        A_ce0 => grp_chi_fu_171_A_ce0,
        A_q0 => state_q0,
        A_address1 => grp_chi_fu_171_A_address1,
        A_ce1 => grp_chi_fu_171_A_ce1,
        A_we1 => grp_chi_fu_171_A_we1,
        A_d1 => grp_chi_fu_171_A_d1,
        A_q1 => state_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_theta_fu_165_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_theta_fu_165_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_chi_fu_171_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_chi_fu_171_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_chi_fu_171_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_chi_fu_171_ap_ready = ap_const_logic_1)) then 
                    grp_chi_fu_171_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pi_fu_159_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pi_fu_159_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_pi_fu_159_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pi_fu_159_ap_ready = ap_const_logic_1)) then 
                    grp_pi_fu_159_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_theta_fu_165_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_theta_fu_165_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln293_fu_177_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_theta_fu_165_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_theta_fu_165_ap_ready = ap_const_logic_1)) then 
                    grp_theta_fu_165_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indexRound_assign_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indexRound_assign_reg_113 <= i_reg_377;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indexRound_assign_reg_113 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_125 <= add_ln352_reg_386;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_theta_fu_165_ap_done = ap_const_logic_1))) then 
                indvar_flatten_reg_125 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    x_0_i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_i_reg_136 <= select_ln353_18_reg_409;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_theta_fu_165_ap_done = ap_const_logic_1))) then 
                x_0_i_reg_136 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                y_0_i_reg_148 <= y_reg_435;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_theta_fu_165_ap_done = ap_const_logic_1))) then 
                y_0_i_reg_148 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln352_reg_386 <= add_ln352_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_377 <= i_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln352_3_reg_382 <= icmp_ln352_3_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln352_3_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln352_reg_396 <= icmp_ln352_fu_207_p2;
                select_ln353_17_reg_401 <= select_ln353_17_fu_213_p3;
                x_reg_391 <= x_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln353_reg_419 <= icmp_ln353_fu_302_p2;
                state_addr_2_reg_424 <= zext_ln353_17_fu_296_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln353_18_reg_409 <= select_ln353_18_fu_221_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln353_reg_430 <= select_ln353_fu_344_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                y_reg_435 <= y_fu_351_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln352_3_fu_189_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state3, grp_theta_fu_165_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, grp_pi_fu_159_ap_done, grp_chi_fu_171_ap_done, ap_CS_fsm_state9, icmp_ln293_fu_177_p2, ap_CS_fsm_state11, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_177_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_theta_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln352_3_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln352_3_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_pi_fu_159_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_chi_fu_171_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    KeccakRhoOffsets_address0 <= zext_ln353_17_fu_296_p1(5 - 1 downto 0);

    KeccakRhoOffsets_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            KeccakRhoOffsets_ce0 <= ap_const_logic_1;
        else 
            KeccakRhoOffsets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    KeccakRoundConstants_address0 <= zext_ln382_fu_356_p1(5 - 1 downto 0);

    KeccakRoundConstants_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            KeccakRoundConstants_ce0 <= ap_const_logic_1;
        else 
            KeccakRoundConstants_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln352_fu_195_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_129_p4) + unsigned(ap_const_lv5_1));
    add_ln353_10_fu_233_p2 <= std_logic_vector(unsigned(select_ln353_18_fu_221_p3) + unsigned(ap_const_lv3_3));
    add_ln353_11_fu_256_p2 <= std_logic_vector(unsigned(select_ln353_17_reg_401) + unsigned(ap_const_lv3_3));
    add_ln353_5_fu_290_p2 <= std_logic_vector(unsigned(shl_ln_fu_272_p3) + unsigned(zext_ln353_16_fu_286_p1));
    add_ln353_fu_280_p2 <= std_logic_vector(unsigned(zext_ln353_fu_247_p1) + unsigned(zext_ln353_15_fu_268_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln352_3_fu_189_p2)
    begin
        if ((icmp_ln352_3_fu_189_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln293_fu_177_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_177_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_129_p4_assign_proc : process(indvar_flatten_reg_125, icmp_ln352_3_reg_382, ap_CS_fsm_pp0_stage0, add_ln352_reg_386, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_129_p4 <= add_ln352_reg_386;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_129_p4 <= indvar_flatten_reg_125;
        end if; 
    end process;


    ap_phi_mux_x_0_i_phi_fu_140_p4_assign_proc : process(x_0_i_reg_136, icmp_ln352_3_reg_382, ap_CS_fsm_pp0_stage0, select_ln353_18_reg_409, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_i_phi_fu_140_p4 <= select_ln353_18_reg_409;
        else 
            ap_phi_mux_x_0_i_phi_fu_140_p4 <= x_0_i_reg_136;
        end if; 
    end process;


    ap_phi_mux_y_0_i_phi_fu_152_p4_assign_proc : process(y_0_i_reg_148, icmp_ln352_3_reg_382, ap_CS_fsm_pp0_stage0, y_reg_435, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_y_0_i_phi_fu_152_p4 <= y_reg_435;
        else 
            ap_phi_mux_y_0_i_phi_fu_152_p4 <= y_0_i_reg_148;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln293_fu_177_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_177_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_chi_fu_171_ap_start <= grp_chi_fu_171_ap_start_reg;
    grp_pi_fu_159_ap_start <= grp_pi_fu_159_ap_start_reg;
    grp_theta_fu_165_ap_start <= grp_theta_fu_165_ap_start_reg;
    i_fu_183_p2 <= std_logic_vector(unsigned(indexRound_assign_reg_113) + unsigned(ap_const_lv5_1));
    icmp_ln293_fu_177_p2 <= "1" when (indexRound_assign_reg_113 = ap_const_lv5_18) else "0";
    icmp_ln352_3_fu_189_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_129_p4 = ap_const_lv5_19) else "0";
    icmp_ln352_fu_207_p2 <= "1" when (ap_phi_mux_y_0_i_phi_fu_152_p4 = ap_const_lv3_5) else "0";
    icmp_ln353_10_fu_251_p2 <= "1" when (unsigned(select_ln353_17_reg_401) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln353_9_fu_227_p2 <= "1" when (unsigned(select_ln353_18_fu_221_p3) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln353_fu_302_p2 <= "1" when (add_ln353_5_fu_290_p2 = ap_const_lv5_0) else "0";
    lshr_ln353_fu_332_p2 <= std_logic_vector(shift_right(unsigned(state_q1),to_integer(unsigned('0' & zext_ln353_20_fu_328_p1(31-1 downto 0)))));
    select_ln353_17_fu_213_p3 <= 
        ap_const_lv3_0 when (icmp_ln352_fu_207_p2(0) = '1') else 
        ap_phi_mux_y_0_i_phi_fu_152_p4;
    select_ln353_18_fu_221_p3 <= 
        x_reg_391 when (icmp_ln352_reg_396(0) = '1') else 
        x_0_i_reg_136;
    select_ln353_19_fu_239_p3 <= 
        select_ln353_18_fu_221_p3 when (icmp_ln353_9_fu_227_p2(0) = '1') else 
        add_ln353_10_fu_233_p2;
    select_ln353_20_fu_261_p3 <= 
        select_ln353_17_reg_401 when (icmp_ln353_10_fu_251_p2(0) = '1') else 
        add_ln353_11_fu_256_p2;
    select_ln353_fu_344_p3 <= 
        state_q0 when (icmp_ln353_reg_419(0) = '1') else 
        xor_ln353_fu_338_p2;
    shl_ln353_fu_316_p2 <= std_logic_vector(shift_left(unsigned(state_q1),to_integer(unsigned('0' & zext_ln353_19_fu_312_p1(31-1 downto 0)))));
    shl_ln_fu_272_p3 <= (select_ln353_20_fu_261_p3 & ap_const_lv2_0);

    state_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, state_addr_2_reg_424, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, grp_pi_fu_159_A_address0, grp_theta_fu_165_A_address0, grp_chi_fu_171_A_address0, ap_CS_fsm_state13, ap_block_pp0_stage0, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            state_address0 <= state_addr_2_reg_424;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            state_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address0 <= grp_chi_fu_171_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= grp_theta_fu_165_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address0 <= grp_pi_fu_159_A_address0;
        else 
            state_address0 <= "XXXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state12, ap_CS_fsm_state3, grp_pi_fu_159_A_address1, grp_theta_fu_165_A_address1, grp_chi_fu_171_A_address1, ap_CS_fsm_state9, ap_CS_fsm_state11, zext_ln353_17_fu_296_p1, ap_block_pp0_stage1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            state_address1 <= zext_ln353_17_fu_296_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_address1 <= grp_chi_fu_171_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= grp_theta_fu_165_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_address1 <= grp_pi_fu_159_A_address1;
        else 
            state_address1 <= "XXXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, grp_pi_fu_159_A_ce0, grp_theta_fu_165_A_ce0, grp_chi_fu_171_A_ce0, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            state_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_ce0 <= grp_chi_fu_171_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_ce0 <= grp_theta_fu_165_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_ce0 <= grp_pi_fu_159_A_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_state12, ap_CS_fsm_state3, grp_pi_fu_159_A_ce1, grp_theta_fu_165_A_ce1, grp_chi_fu_171_A_ce1, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            state_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_ce1 <= grp_chi_fu_171_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_ce1 <= grp_theta_fu_165_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_ce1 <= grp_pi_fu_159_A_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, select_ln353_reg_430, ap_enable_reg_pp0_iter1, grp_pi_fu_159_A_d0, ap_CS_fsm_state13, ap_block_pp0_stage0, ap_CS_fsm_state9, xor_ln382_fu_361_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_d0 <= xor_ln382_fu_361_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            state_d0 <= select_ln353_reg_430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d0 <= grp_pi_fu_159_A_d0;
        else 
            state_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state3, grp_pi_fu_159_A_d1, grp_theta_fu_165_A_d1, grp_chi_fu_171_A_d1, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_d1 <= grp_chi_fu_171_A_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d1 <= grp_theta_fu_165_A_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_d1 <= grp_pi_fu_159_A_d1;
        else 
            state_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(icmp_ln352_3_reg_382, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_pi_fu_159_A_we0, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln352_3_reg_382 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            state_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_we0 <= grp_pi_fu_159_A_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state3, grp_pi_fu_159_A_we1, grp_theta_fu_165_A_we1, grp_chi_fu_171_A_we1, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_we1 <= grp_chi_fu_171_A_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_we1 <= grp_theta_fu_165_A_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_we1 <= grp_pi_fu_159_A_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln353_fu_322_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln353_18_fu_308_p1));
    x_fu_201_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_0_i_phi_fu_140_p4) + unsigned(ap_const_lv3_1));
    xor_ln353_fu_338_p2 <= (shl_ln353_fu_316_p2 xor lshr_ln353_fu_332_p2);
    xor_ln382_fu_361_p2 <= (state_q1 xor KeccakRoundConstants_q0);
    y_fu_351_p2 <= std_logic_vector(unsigned(select_ln353_17_reg_401) + unsigned(ap_const_lv3_1));
    zext_ln353_15_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln353_20_fu_261_p3),4));
    zext_ln353_16_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_fu_280_p2),5));
    zext_ln353_17_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln353_5_fu_290_p2),64));
    zext_ln353_18_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),7));
    zext_ln353_19_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(KeccakRhoOffsets_q0),64));
    zext_ln353_20_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln353_fu_322_p2),64));
    zext_ln353_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln353_19_fu_239_p3),4));
    zext_ln382_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indexRound_assign_reg_113),64));
end behav;
