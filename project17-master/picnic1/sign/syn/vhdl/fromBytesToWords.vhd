-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fromBytesToWords is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stateAsWords_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    stateAsWords_ce0 : OUT STD_LOGIC;
    stateAsWords_we0 : OUT STD_LOGIC;
    stateAsWords_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    stateAsWords_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fromBytesToWords is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln269_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_104_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_186 : STD_LOGIC_VECTOR (4 downto 0);
    signal stateAsWords_addr_reg_191 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln272_1_fu_115_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln272_1_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_129_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln271_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_75 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_0_reg_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln270_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln272_fu_175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_fu_135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln272_fu_139_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln272_fu_153_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_157_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln272_1_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln272_2_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln272_fu_169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_75 <= i_reg_186;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_75 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_86 <= j_reg_204;
            elsif (((icmp_ln269_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_86 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_186 <= i_fu_104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_204 <= j_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln272_1_reg_196(7 downto 3) <= shl_ln272_1_fu_115_p3(7 downto 3);
                stateAsWords_addr_reg_191 <= zext_ln270_fu_110_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    shl_ln272_1_reg_196(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln269_fu_98_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln271_fu_123_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln269_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln271_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln272_fu_139_p2 <= std_logic_vector(unsigned(shl_ln272_1_reg_196) + unsigned(zext_ln271_fu_135_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln269_fu_98_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln269_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln269_fu_98_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln269_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_104_p2 <= std_logic_vector(unsigned(i_0_reg_75) + unsigned(ap_const_lv5_1));
    icmp_ln269_fu_98_p2 <= "1" when (i_0_reg_75 = ap_const_lv5_19) else "0";
    icmp_ln271_fu_123_p2 <= "1" when (j_0_reg_86 = ap_const_lv4_8) else "0";
    j_fu_129_p2 <= std_logic_vector(unsigned(j_0_reg_86) + unsigned(ap_const_lv4_1));
    or_ln272_fu_175_p2 <= (stateAsWords_q0 or shl_ln272_fu_169_p2);
    shl_ln272_1_fu_115_p3 <= (i_0_reg_75 & ap_const_lv3_0);
    shl_ln272_fu_169_p2 <= std_logic_vector(shift_left(unsigned(zext_ln272_1_fu_149_p1),to_integer(unsigned('0' & zext_ln272_2_fu_165_p1(31-1 downto 0)))));
    shl_ln_fu_157_p3 <= (trunc_ln272_fu_153_p1 & ap_const_lv3_0);

    stateAsWords_address0_assign_proc : process(ap_CS_fsm_state2, stateAsWords_addr_reg_191, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln270_fu_110_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stateAsWords_address0 <= stateAsWords_addr_reg_191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stateAsWords_address0 <= zext_ln270_fu_110_p1(5 - 1 downto 0);
        else 
            stateAsWords_address0 <= "XXXXX";
        end if; 
    end process;


    stateAsWords_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stateAsWords_ce0 <= ap_const_logic_1;
        else 
            stateAsWords_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stateAsWords_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, or_ln272_fu_175_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stateAsWords_d0 <= or_ln272_fu_175_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stateAsWords_d0 <= ap_const_lv64_0;
        else 
            stateAsWords_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stateAsWords_we0_assign_proc : process(icmp_ln269_fu_98_p2, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln269_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            stateAsWords_we0 <= ap_const_logic_1;
        else 
            stateAsWords_we0 <= ap_const_logic_0;
        end if; 
    end process;

    state_address0 <= zext_ln272_fu_144_p1(8 - 1 downto 0);

    state_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln272_fu_153_p1 <= j_0_reg_86(3 - 1 downto 0);
    zext_ln270_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_75),64));
    zext_ln271_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_86),8));
    zext_ln272_1_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_q0),64));
    zext_ln272_2_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_157_p3),64));
    zext_ln272_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln272_fu_139_p2),64));
end behav;
