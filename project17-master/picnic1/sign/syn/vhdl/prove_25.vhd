-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity prove_25 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    proof_0_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    proof_0_seed1_ce0 : OUT STD_LOGIC;
    proof_0_seed1_we0 : OUT STD_LOGIC;
    proof_0_seed1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    proof_seed1_offset1 : IN STD_LOGIC_VECTOR (7 downto 0);
    proof_0_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    proof_0_seed2_ce0 : OUT STD_LOGIC;
    proof_0_seed2_we0 : OUT STD_LOGIC;
    proof_0_seed2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    proof_0_inputShare_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    proof_0_inputShare_ce0 : OUT STD_LOGIC;
    proof_0_inputShare_we0 : OUT STD_LOGIC;
    proof_0_inputShare_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    proof_0_communicatedBits_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    proof_0_communicatedBits_ce0 : OUT STD_LOGIC;
    proof_0_communicatedBits_we0 : OUT STD_LOGIC;
    proof_0_communicatedBits_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    proof_0_view3Commitment_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    proof_0_view3Commitment_ce0 : OUT STD_LOGIC;
    proof_0_view3Commitment_we0 : OUT STD_LOGIC;
    proof_0_view3Commitment_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    challenge : IN STD_LOGIC_VECTOR (1 downto 0);
    seeds_seed_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    seeds_seed_ce0 : OUT STD_LOGIC;
    seeds_seed_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    views_inputShare_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    views_inputShare_ce0 : OUT STD_LOGIC;
    views_inputShare_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    views_communicatedBits_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    views_communicatedBits_ce0 : OUT STD_LOGIC;
    views_communicatedBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    commitments_hashes_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    commitments_hashes_ce0 : OUT STD_LOGIC;
    commitments_hashes_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of prove_25 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_4B : STD_LOGIC_VECTOR (14 downto 0) := "000000001001011";
    constant ap_const_lv15_10 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv17_4B : STD_LOGIC_VECTOR (16 downto 0) := "00000000001001011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln720_fu_431_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln720_reg_1006 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln724_1_fu_447_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln724_1_reg_1016 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln724_fu_451_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln724_reg_1021 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln692_1_fu_465_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln692_1_reg_1026 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln692_fu_469_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln692_reg_1031 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln692_fu_475_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln692_reg_1036 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln692_1_fu_491_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln692_1_reg_1041 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln695_fu_497_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln695_reg_1047 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_cast_fu_509_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_cast_reg_1053 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_cast_fu_517_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_cast_reg_1059 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln689_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln689_reg_1064 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln697_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln697_reg_1068 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_14_fu_543_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_14_reg_1075 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln707_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_17_fu_583_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_17_reg_1088 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln710_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_16_fu_609_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_16_reg_1101 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln702_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_15_fu_635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_15_reg_1114 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln694_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln717_fu_655_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln717_reg_1124 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln717_fu_658_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln717_reg_1130 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln717_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln717_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_13_fu_700_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_13_reg_1142 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln699_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_fu_754_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_reg_1155 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln691_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_18_fu_808_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal loop_18_reg_1168 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln720_fu_822_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln720_reg_1173 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln719_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln724_1_fu_869_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln724_1_reg_1183 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln724_1_fu_994_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln724_1_reg_1188 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal loop_19_fu_887_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_19_reg_1196 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln724_2_fu_901_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln724_2_reg_1201 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln723_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_cast_fu_943_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_cast_reg_1211 : STD_LOGIC_VECTOR (15 downto 0);
    signal loop_20_fu_961_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_20_reg_1219 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln728_2_fu_975_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln728_2_reg_1224 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln727_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_4_reg_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal loop_5_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal loop_3_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal loop_1_reg_346 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal loop_2_reg_358 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal loop_0_reg_370 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal loop_6_reg_382 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal loop_7_reg_393 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal loop_8_reg_404 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln708_3_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_2_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln711_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_3_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln695_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln711_2_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln700_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln700_2_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln703_2_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln692_1_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln692_5_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln695_2_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln720_5_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln720_4_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln724_2_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln724_5_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln728_4_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln728_3_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_423_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_439_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln724_fu_451_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_457_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln692_fu_419_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_479_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln692_2_fu_487_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln720_1_fu_435_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln708_fu_549_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln708_1_fu_553_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln708_1_fu_563_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln708_fu_567_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln711_fu_589_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln711_1_fu_593_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln703_fu_615_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_2_fu_619_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln695_fu_641_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln695_2_fu_645_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_fu_664_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln711_1_fu_680_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln711_fu_684_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln700_fu_706_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln700_1_fu_710_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln700_1_fu_720_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln700_fu_724_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln703_1_fu_734_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_1_fu_738_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln692_3_fu_760_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln692_1_fu_764_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln692_4_fu_774_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln692_fu_778_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln695_1_fu_788_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln695_1_fu_792_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln720_3_fu_818_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln720_2_fu_814_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln720_1_fu_827_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln724_fu_837_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln724_fu_848_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln724_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln724_fu_853_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln724_fu_857_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln724_2_fu_865_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln724_4_fu_897_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln724_3_fu_893_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln724_3_fu_906_p2 : STD_LOGIC_VECTOR (16 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln724_3_fu_906_p2 : signal is "no";
    signal add_ln728_fu_916_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln728_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln728_fu_927_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln728_fu_934_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln728_1_fu_938_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln728_2_fu_971_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln728_1_fu_967_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln728_3_fu_980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln724_1_fu_994_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln724_fu_451_p00 : STD_LOGIC_VECTOR (14 downto 0);

    component crypto_sign_mul_mbdk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    crypto_sign_mul_mbdk_U174 : component crypto_sign_mul_mbdk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => add_ln724_1_reg_1183,
        din1 => mul_ln724_1_fu_994_p1,
        dout => mul_ln724_1_fu_994_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    loop_0_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln689_fu_525_p2 = ap_const_lv1_1))) then 
                loop_0_reg_370 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                loop_0_reg_370 <= loop_reg_1155;
            end if; 
        end if;
    end process;

    loop_1_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln691_fu_748_p2 = ap_const_lv1_1))) then 
                loop_1_reg_346 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                loop_1_reg_346 <= loop_15_reg_1114;
            end if; 
        end if;
    end process;

    loop_2_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln697_fu_531_p2 = ap_const_lv1_1) and (icmp_ln689_fu_525_p2 = ap_const_lv1_0))) then 
                loop_2_reg_358 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                loop_2_reg_358 <= loop_13_reg_1142;
            end if; 
        end if;
    end process;

    loop_3_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln699_fu_694_p2 = ap_const_lv1_1))) then 
                loop_3_reg_334 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_3_reg_334 <= loop_16_reg_1101;
            end if; 
        end if;
    end process;

    loop_4_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln697_fu_531_p2 = ap_const_lv1_0) and (icmp_ln689_fu_525_p2 = ap_const_lv1_0))) then 
                loop_4_reg_310 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                loop_4_reg_310 <= loop_14_reg_1075;
            end if; 
        end if;
    end process;

    loop_5_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln707_fu_537_p2 = ap_const_lv1_1))) then 
                loop_5_reg_322 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                loop_5_reg_322 <= loop_17_reg_1088;
            end if; 
        end if;
    end process;

    loop_6_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((((icmp_ln717_fu_674_p2 = ap_const_lv1_1) and (icmp_ln694_fu_629_p2 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_1)) or ((icmp_ln717_fu_674_p2 = ap_const_lv1_1) and (icmp_ln702_fu_603_p2 = ap_const_lv1_1) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) or ((icmp_ln717_fu_674_p2 = ap_const_lv1_1) and (icmp_ln710_fu_577_p2 = ap_const_lv1_1) and (icmp_ln697_reg_1068 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_0))))) then 
                loop_6_reg_382 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                loop_6_reg_382 <= loop_18_reg_1168;
            end if; 
        end if;
    end process;

    loop_7_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                loop_7_reg_393 <= loop_19_reg_1196;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                loop_7_reg_393 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    loop_8_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln723_fu_881_p2 = ap_const_lv1_1))) then 
                loop_8_reg_404 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                loop_8_reg_404 <= loop_20_reg_1219;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add_ln695_reg_1047(14 downto 4) <= add_ln695_fu_497_p2(14 downto 4);
                icmp_ln689_reg_1064 <= icmp_ln689_fu_525_p2;
                mul_ln724_reg_1021 <= mul_ln724_fu_451_p2;
                sext_ln692_reg_1036 <= sext_ln692_fu_475_p1;
                    sub_ln692_1_reg_1041(14 downto 4) <= sub_ln692_1_fu_491_p2(14 downto 4);
                sub_ln692_reg_1031 <= sub_ln692_fu_469_p2;
                    tmp_27_cast_reg_1053(14 downto 4) <= tmp_27_cast_fu_509_p3(14 downto 4);
                    tmp_29_cast_reg_1059(12 downto 2) <= tmp_29_cast_fu_517_p3(12 downto 2);
                    zext_ln692_1_reg_1026(12 downto 5) <= zext_ln692_1_fu_465_p1(12 downto 5);
                    zext_ln720_reg_1006(11 downto 4) <= zext_ln720_fu_431_p1(11 downto 4);
                    zext_ln724_1_reg_1016(9 downto 2) <= zext_ln724_1_fu_447_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((((icmp_ln694_fu_629_p2 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_1)) or ((icmp_ln702_fu_603_p2 = ap_const_lv1_1) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) or ((icmp_ln710_fu_577_p2 = ap_const_lv1_1) and (icmp_ln697_reg_1068 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_0))))) then
                add_ln717_reg_1130 <= add_ln717_fu_658_p2;
                icmp_ln717_reg_1135 <= icmp_ln717_fu_674_p2;
                    zext_ln717_reg_1124(1 downto 0) <= zext_ln717_fu_655_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln717_reg_1135 = ap_const_lv1_1) and (icmp_ln719_fu_802_p2 = ap_const_lv1_0))) then
                add_ln720_reg_1173 <= add_ln720_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln719_fu_802_p2 = ap_const_lv1_1) or (icmp_ln717_reg_1135 = ap_const_lv1_0)))) then
                add_ln724_1_reg_1183 <= add_ln724_1_fu_869_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln723_fu_881_p2 = ap_const_lv1_0))) then
                add_ln724_2_reg_1201 <= add_ln724_2_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln727_fu_955_p2 = ap_const_lv1_0))) then
                add_ln728_2_reg_1224 <= add_ln728_2_fu_975_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln689_fu_525_p2 = ap_const_lv1_0))) then
                icmp_ln697_reg_1068 <= icmp_ln697_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                loop_13_reg_1142 <= loop_13_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                loop_14_reg_1075 <= loop_14_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln689_reg_1064 = ap_const_lv1_1))) then
                loop_15_reg_1114 <= loop_15_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) then
                loop_16_reg_1101 <= loop_16_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln697_reg_1068 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) then
                loop_17_reg_1088 <= loop_17_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln717_reg_1135 = ap_const_lv1_1))) then
                loop_18_reg_1168 <= loop_18_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                loop_19_reg_1196 <= loop_19_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                loop_20_reg_1219 <= loop_20_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                loop_reg_1155 <= loop_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul_ln724_1_reg_1188 <= mul_ln724_1_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln723_fu_881_p2 = ap_const_lv1_1))) then
                    tmp_31_cast_reg_1211(15 downto 5) <= tmp_31_cast_fu_943_p3(15 downto 5);
            end if;
        end if;
    end process;
    zext_ln720_reg_1006(3 downto 0) <= "0000";
    zext_ln720_reg_1006(12) <= '0';
    zext_ln724_1_reg_1016(1 downto 0) <= "00";
    zext_ln724_1_reg_1016(10) <= '0';
    zext_ln692_1_reg_1026(4 downto 0) <= "00000";
    zext_ln692_1_reg_1026(13) <= '0';
    sub_ln692_1_reg_1041(3 downto 0) <= "0000";
    add_ln695_reg_1047(3 downto 0) <= "0000";
    tmp_27_cast_reg_1053(3 downto 0) <= "0000";
    tmp_29_cast_reg_1059(1 downto 0) <= "00";
    zext_ln717_reg_1124(2) <= '0';
    tmp_31_cast_reg_1211(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln689_fu_525_p2, icmp_ln689_reg_1064, icmp_ln697_fu_531_p2, icmp_ln697_reg_1068, ap_CS_fsm_state2, icmp_ln707_fu_537_p2, ap_CS_fsm_state4, icmp_ln710_fu_577_p2, icmp_ln702_fu_603_p2, icmp_ln694_fu_629_p2, icmp_ln717_reg_1135, ap_CS_fsm_state6, icmp_ln699_fu_694_p2, ap_CS_fsm_state9, icmp_ln691_fu_748_p2, ap_CS_fsm_state12, icmp_ln719_fu_802_p2, ap_CS_fsm_state15, icmp_ln723_fu_881_p2, ap_CS_fsm_state17, icmp_ln727_fu_955_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln689_fu_525_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln697_fu_531_p2 = ap_const_lv1_1) and (icmp_ln689_fu_525_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln697_fu_531_p2 = ap_const_lv1_0) and (icmp_ln689_fu_525_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln707_fu_537_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((((icmp_ln694_fu_629_p2 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_1)) or ((icmp_ln702_fu_603_p2 = ap_const_lv1_1) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) or ((icmp_ln710_fu_577_p2 = ap_const_lv1_1) and (icmp_ln697_reg_1068 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln694_fu_629_p2 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln702_fu_603_p2 = ap_const_lv1_0) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln699_fu_694_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln691_fu_748_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln719_fu_802_p2 = ap_const_lv1_1) or (icmp_ln717_reg_1135 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln723_fu_881_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln727_fu_955_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln692_1_fu_764_p2 <= std_logic_vector(unsigned(sub_ln692_1_reg_1041) + unsigned(zext_ln692_3_fu_760_p1));
    add_ln692_fu_778_p2 <= std_logic_vector(unsigned(zext_ln720_reg_1006) + unsigned(zext_ln692_4_fu_774_p1));
    add_ln695_1_fu_792_p2 <= std_logic_vector(unsigned(zext_ln720_reg_1006) + unsigned(zext_ln695_1_fu_788_p1));
    add_ln695_2_fu_645_p2 <= std_logic_vector(unsigned(add_ln695_reg_1047) + unsigned(zext_ln695_fu_641_p1));
    add_ln695_fu_497_p2 <= std_logic_vector(unsigned(sub_ln692_1_fu_491_p2) + unsigned(ap_const_lv15_10));
    add_ln700_1_fu_710_p2 <= std_logic_vector(unsigned(add_ln695_reg_1047) + unsigned(zext_ln700_fu_706_p1));
    add_ln700_fu_724_p2 <= std_logic_vector(unsigned(zext_ln720_reg_1006) + unsigned(zext_ln700_1_fu_720_p1));
    add_ln703_1_fu_738_p2 <= std_logic_vector(unsigned(zext_ln720_reg_1006) + unsigned(zext_ln703_1_fu_734_p1));
    add_ln703_2_fu_619_p2 <= std_logic_vector(unsigned(tmp_27_cast_reg_1053) + unsigned(zext_ln703_fu_615_p1));
    add_ln703_fu_503_p2 <= std_logic_vector(signed(sub_ln692_fu_469_p2) + signed(ap_const_lv11_2));
    add_ln708_1_fu_553_p2 <= std_logic_vector(unsigned(tmp_27_cast_reg_1053) + unsigned(zext_ln708_fu_549_p1));
    add_ln708_fu_567_p2 <= std_logic_vector(unsigned(zext_ln720_reg_1006) + unsigned(zext_ln708_1_fu_563_p1));
    add_ln711_1_fu_593_p2 <= std_logic_vector(unsigned(sub_ln692_1_reg_1041) + unsigned(zext_ln711_fu_589_p1));
    add_ln711_fu_684_p2 <= std_logic_vector(unsigned(zext_ln720_reg_1006) + unsigned(zext_ln711_1_fu_680_p1));
    add_ln717_fu_658_p2 <= std_logic_vector(unsigned(zext_ln717_fu_655_p1) + unsigned(ap_const_lv3_7));
    add_ln720_1_fu_827_p2 <= std_logic_vector(unsigned(tmp_29_cast_reg_1059) + unsigned(zext_ln720_2_fu_814_p1));
    add_ln720_fu_822_p2 <= std_logic_vector(unsigned(zext_ln724_1_reg_1016) + unsigned(zext_ln720_3_fu_818_p1));
    add_ln724_1_fu_869_p2 <= std_logic_vector(unsigned(zext_ln724_2_fu_865_p1) + unsigned(sext_ln692_reg_1036));
    add_ln724_2_fu_901_p2 <= std_logic_vector(unsigned(mul_ln724_reg_1021) + unsigned(zext_ln724_4_fu_897_p1));
    add_ln724_3_fu_906_p2 <= std_logic_vector(signed(mul_ln724_1_reg_1188) + signed(zext_ln724_3_fu_893_p1));
    add_ln724_fu_837_p2 <= std_logic_vector(unsigned(zext_ln717_reg_1124) + unsigned(ap_const_lv3_1));
    add_ln728_1_fu_938_p2 <= std_logic_vector(unsigned(zext_ln728_fu_934_p1) + unsigned(sub_ln692_reg_1031));
    add_ln728_2_fu_975_p2 <= std_logic_vector(unsigned(zext_ln692_1_reg_1026) + unsigned(zext_ln728_2_fu_971_p1));
    add_ln728_3_fu_980_p2 <= std_logic_vector(unsigned(tmp_31_cast_reg_1211) + unsigned(zext_ln728_1_fu_967_p1));
    add_ln728_fu_916_p2 <= std_logic_vector(unsigned(zext_ln717_reg_1124) + unsigned(ap_const_lv3_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, icmp_ln727_fu_955_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln727_fu_955_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, icmp_ln727_fu_955_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln727_fu_955_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    commitments_hashes_address0 <= zext_ln728_4_fu_985_p1(15 - 1 downto 0);

    commitments_hashes_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            commitments_hashes_ce0 <= ap_const_logic_1;
        else 
            commitments_hashes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln689_fu_525_p2 <= "1" when (challenge = ap_const_lv2_0) else "0";
    icmp_ln691_fu_748_p2 <= "1" when (loop_0_reg_370 = ap_const_lv5_10) else "0";
    icmp_ln694_fu_629_p2 <= "1" when (loop_1_reg_346 = ap_const_lv5_10) else "0";
    icmp_ln697_fu_531_p2 <= "1" when (challenge = ap_const_lv2_1) else "0";
    icmp_ln699_fu_694_p2 <= "1" when (loop_2_reg_358 = ap_const_lv5_10) else "0";
    icmp_ln702_fu_603_p2 <= "1" when (loop_3_reg_334 = ap_const_lv5_10) else "0";
    icmp_ln707_fu_537_p2 <= "1" when (loop_4_reg_310 = ap_const_lv5_10) else "0";
    icmp_ln710_fu_577_p2 <= "1" when (loop_5_reg_322 = ap_const_lv5_10) else "0";
    icmp_ln717_fu_674_p2 <= "1" when (tmp_18_fu_664_p4 = ap_const_lv2_0) else "0";
    icmp_ln719_fu_802_p2 <= "1" when (loop_6_reg_382 = ap_const_lv3_4) else "0";
    icmp_ln723_fu_881_p2 <= "1" when (loop_7_reg_393 = ap_const_lv7_4B) else "0";
    icmp_ln724_fu_842_p2 <= "1" when (unsigned(add_ln724_fu_837_p2) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln727_fu_955_p2 <= "1" when (loop_8_reg_404 = ap_const_lv6_20) else "0";
    icmp_ln728_fu_921_p2 <= "1" when (unsigned(add_ln728_fu_916_p2) < unsigned(ap_const_lv3_3)) else "0";
    loop_13_fu_700_p2 <= std_logic_vector(unsigned(loop_2_reg_358) + unsigned(ap_const_lv5_1));
    loop_14_fu_543_p2 <= std_logic_vector(unsigned(loop_4_reg_310) + unsigned(ap_const_lv5_1));
    loop_15_fu_635_p2 <= std_logic_vector(unsigned(loop_1_reg_346) + unsigned(ap_const_lv5_1));
    loop_16_fu_609_p2 <= std_logic_vector(unsigned(loop_3_reg_334) + unsigned(ap_const_lv5_1));
    loop_17_fu_583_p2 <= std_logic_vector(unsigned(loop_5_reg_322) + unsigned(ap_const_lv5_1));
    loop_18_fu_808_p2 <= std_logic_vector(unsigned(loop_6_reg_382) + unsigned(ap_const_lv3_1));
    loop_19_fu_887_p2 <= std_logic_vector(unsigned(loop_7_reg_393) + unsigned(ap_const_lv7_1));
    loop_20_fu_961_p2 <= std_logic_vector(unsigned(loop_8_reg_404) + unsigned(ap_const_lv6_1));
    loop_fu_754_p2 <= std_logic_vector(unsigned(loop_0_reg_370) + unsigned(ap_const_lv5_1));
    mul_ln724_1_fu_994_p1 <= ap_const_lv17_4B(8 - 1 downto 0);
    mul_ln724_fu_451_p0 <= mul_ln724_fu_451_p00(8 - 1 downto 0);
    mul_ln724_fu_451_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(proof_seed1_offset1),15));
    mul_ln724_fu_451_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln724_fu_451_p0) * unsigned(ap_const_lv15_4B), 15));
    proof_0_communicatedBits_address0 <= zext_ln724_5_fu_951_p1(15 - 1 downto 0);

    proof_0_communicatedBits_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            proof_0_communicatedBits_ce0 <= ap_const_logic_1;
        else 
            proof_0_communicatedBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_communicatedBits_d0 <= views_communicatedBits_q0;

    proof_0_communicatedBits_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            proof_0_communicatedBits_we0 <= ap_const_logic_1;
        else 
            proof_0_communicatedBits_we0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_inputShare_address0 <= zext_ln720_4_fu_874_p1(10 - 1 downto 0);

    proof_0_inputShare_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            proof_0_inputShare_ce0 <= ap_const_logic_1;
        else 
            proof_0_inputShare_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_inputShare_d0 <= views_inputShare_q0;

    proof_0_inputShare_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            proof_0_inputShare_we0 <= ap_const_logic_1;
        else 
            proof_0_inputShare_we0 <= ap_const_logic_0;
        end if; 
    end process;


    proof_0_seed1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln708_2_fu_572_p1, zext_ln700_2_fu_729_p1, zext_ln692_5_fu_783_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            proof_0_seed1_address0 <= zext_ln692_5_fu_783_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            proof_0_seed1_address0 <= zext_ln700_2_fu_729_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            proof_0_seed1_address0 <= zext_ln708_2_fu_572_p1(12 - 1 downto 0);
        else 
            proof_0_seed1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    proof_0_seed1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            proof_0_seed1_ce0 <= ap_const_logic_1;
        else 
            proof_0_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_seed1_d0 <= seeds_seed_q0;

    proof_0_seed1_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            proof_0_seed1_we0 <= ap_const_logic_1;
        else 
            proof_0_seed1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    proof_0_seed2_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, zext_ln711_2_fu_689_p1, zext_ln703_2_fu_743_p1, zext_ln695_2_fu_797_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            proof_0_seed2_address0 <= zext_ln695_2_fu_797_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            proof_0_seed2_address0 <= zext_ln703_2_fu_743_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            proof_0_seed2_address0 <= zext_ln711_2_fu_689_p1(12 - 1 downto 0);
        else 
            proof_0_seed2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    proof_0_seed2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            proof_0_seed2_ce0 <= ap_const_logic_1;
        else 
            proof_0_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_seed2_d0 <= seeds_seed_q0;

    proof_0_seed2_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            proof_0_seed2_we0 <= ap_const_logic_1;
        else 
            proof_0_seed2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_view3Commitment_address0 <= zext_ln728_3_fu_990_p1(13 - 1 downto 0);

    proof_0_view3Commitment_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            proof_0_view3Commitment_ce0 <= ap_const_logic_1;
        else 
            proof_0_view3Commitment_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    proof_0_view3Commitment_d0 <= commitments_hashes_q0;

    proof_0_view3Commitment_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            proof_0_view3Commitment_we0 <= ap_const_logic_1;
        else 
            proof_0_view3Commitment_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seeds_seed_address0_assign_proc : process(icmp_ln689_reg_1064, icmp_ln697_reg_1068, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln710_fu_577_p2, icmp_ln702_fu_603_p2, icmp_ln694_fu_629_p2, ap_CS_fsm_state6, ap_CS_fsm_state9, zext_ln708_3_fu_558_p1, sext_ln711_fu_598_p1, zext_ln703_3_fu_624_p1, sext_ln695_fu_650_p1, sext_ln700_fu_715_p1, sext_ln692_1_fu_769_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seeds_seed_address0 <= sext_ln692_1_fu_769_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            seeds_seed_address0 <= sext_ln700_fu_715_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln694_fu_629_p2 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_1))) then 
            seeds_seed_address0 <= sext_ln695_fu_650_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln702_fu_603_p2 = ap_const_lv1_0) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) then 
            seeds_seed_address0 <= zext_ln703_3_fu_624_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln710_fu_577_p2 = ap_const_lv1_0) and (icmp_ln697_reg_1068 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_0))) then 
            seeds_seed_address0 <= sext_ln711_fu_598_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seeds_seed_address0 <= zext_ln708_3_fu_558_p1(14 - 1 downto 0);
        else 
            seeds_seed_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    seeds_seed_ce0_assign_proc : process(icmp_ln689_reg_1064, icmp_ln697_reg_1068, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln710_fu_577_p2, icmp_ln702_fu_603_p2, icmp_ln694_fu_629_p2, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln694_fu_629_p2 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln702_fu_603_p2 = ap_const_lv1_0) and (icmp_ln697_reg_1068 = ap_const_lv1_1) and (icmp_ln689_reg_1064 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln710_fu_577_p2 = ap_const_lv1_0) and (icmp_ln697_reg_1068 = ap_const_lv1_0) and (icmp_ln689_reg_1064 = ap_const_lv1_0)))) then 
            seeds_seed_ce0 <= ap_const_logic_1;
        else 
            seeds_seed_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln724_fu_857_p3 <= 
        add_ln724_fu_837_p2 when (icmp_ln724_fu_842_p2(0) = '1') else 
        sext_ln724_fu_853_p1;
    select_ln728_fu_927_p3 <= 
        add_ln728_fu_916_p2 when (icmp_ln728_fu_921_p2(0) = '1') else 
        add_ln717_reg_1130;
        sext_ln692_1_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln692_1_fu_764_p2),64));

        sext_ln692_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln692_fu_469_p2),12));

        sext_ln695_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln695_2_fu_645_p2),64));

        sext_ln700_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_1_fu_710_p2),64));

        sext_ln711_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln711_1_fu_593_p2),64));

        sext_ln724_2_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln724_3_fu_906_p2),64));

        sext_ln724_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln724_fu_848_p2),3));

    sub_ln692_1_fu_491_p2 <= std_logic_vector(unsigned(zext_ln692_2_fu_487_p1) - unsigned(zext_ln720_1_fu_435_p1));
    sub_ln692_fu_469_p2 <= std_logic_vector(unsigned(zext_ln724_1_fu_447_p1) - unsigned(zext_ln692_fu_419_p1));
    tmp_16_fu_457_p3 <= (proof_seed1_offset1 & ap_const_lv5_0);
    tmp_17_fu_479_p3 <= (proof_seed1_offset1 & ap_const_lv6_0);
    tmp_18_fu_664_p4 <= add_ln717_fu_658_p2(2 downto 1);
    tmp_27_cast_fu_509_p3 <= (add_ln703_fu_503_p2 & ap_const_lv4_0);
    tmp_29_cast_fu_517_p3 <= (add_ln703_fu_503_p2 & ap_const_lv2_0);
    tmp_31_cast_fu_943_p3 <= (add_ln728_1_fu_938_p2 & ap_const_lv5_0);
    tmp_fu_423_p3 <= (proof_seed1_offset1 & ap_const_lv4_0);
    tmp_s_fu_439_p3 <= (proof_seed1_offset1 & ap_const_lv2_0);
    views_communicatedBits_address0 <= sext_ln724_2_fu_911_p1(16 - 1 downto 0);

    views_communicatedBits_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            views_communicatedBits_ce0 <= ap_const_logic_1;
        else 
            views_communicatedBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    views_inputShare_address0 <= zext_ln720_5_fu_832_p1(12 - 1 downto 0);

    views_inputShare_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            views_inputShare_ce0 <= ap_const_logic_1;
        else 
            views_inputShare_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln724_fu_848_p2 <= (challenge xor ap_const_lv2_2);
    zext_ln692_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_457_p3),14));
    zext_ln692_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_479_p3),15));
    zext_ln692_3_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_370),15));
    zext_ln692_4_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_370),13));
    zext_ln692_5_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln692_fu_778_p2),64));
    zext_ln692_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(proof_seed1_offset1),11));
    zext_ln695_1_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_346),13));
    zext_ln695_2_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln695_1_fu_792_p2),64));
    zext_ln695_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_346),15));
    zext_ln700_1_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_358),13));
    zext_ln700_2_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln700_fu_724_p2),64));
    zext_ln700_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_358),15));
    zext_ln703_1_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_334),13));
    zext_ln703_2_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_1_fu_738_p2),64));
    zext_ln703_3_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_2_fu_619_p2),64));
    zext_ln703_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_334),15));
    zext_ln708_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_310),13));
    zext_ln708_2_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln708_fu_567_p2),64));
    zext_ln708_3_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln708_1_fu_553_p2),64));
    zext_ln708_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_310),15));
    zext_ln711_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_322),13));
    zext_ln711_2_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln711_fu_684_p2),64));
    zext_ln711_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_322),15));
    zext_ln717_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(challenge),3));
    zext_ln720_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_423_p3),15));
    zext_ln720_2_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_6_reg_382),13));
    zext_ln720_3_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_6_reg_382),11));
    zext_ln720_4_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln720_reg_1173),64));
    zext_ln720_5_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln720_1_fu_827_p2),64));
    zext_ln720_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_423_p3),13));
    zext_ln724_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_439_p3),11));
    zext_ln724_2_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln724_fu_857_p3),12));
    zext_ln724_3_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_7_reg_393),17));
    zext_ln724_4_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_7_reg_393),15));
    zext_ln724_5_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln724_2_reg_1201),64));
    zext_ln728_1_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_8_reg_404),16));
    zext_ln728_2_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_8_reg_404),14));
    zext_ln728_3_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln728_2_reg_1224),64));
    zext_ln728_4_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln728_3_fu_980_p2),64));
    zext_ln728_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln728_fu_927_p3),11));
end behav;
