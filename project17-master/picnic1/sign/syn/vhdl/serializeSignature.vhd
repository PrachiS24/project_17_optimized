-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity serializeSignature is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_0_proofs_seed1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed1_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_seed2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sig_0_proofs_seed2_ce0 : OUT STD_LOGIC;
    sig_0_proofs_seed2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_inputS_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sig_0_proofs_inputS_ce0 : OUT STD_LOGIC;
    sig_0_proofs_inputS_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sig_0_proofs_commun_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sig_0_proofs_commun_ce0 : OUT STD_LOGIC;
    sig_0_proofs_commun_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_proofs_view3C_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_0_proofs_view3C_ce0 : OUT STD_LOGIC;
    sig_0_proofs_view3C_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_challengeBits_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    sig_0_challengeBits_ce0 : OUT STD_LOGIC;
    sig_0_challengeBits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_0_salt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    sig_0_salt_ce0 : OUT STD_LOGIC;
    sig_0_salt_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sigBytes_ce0 : OUT STD_LOGIC;
    sigBytes_we0 : OUT STD_LOGIC;
    sigBytes_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sigBytes_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of serializeSignature is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv8_8B : STD_LOGIC_VECTOR (7 downto 0) := "10001011";
    constant ap_const_lv8_9B : STD_LOGIC_VECTOR (7 downto 0) := "10011011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv15_4B : STD_LOGIC_VECTOR (14 downto 0) := "000000001001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_57 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001010111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv7_57 : STD_LOGIC_VECTOR (6 downto 0) := "1010111";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_77 : STD_LOGIC_VECTOR (7 downto 0) := "01110111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_E2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln1870_fu_474_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln1870_reg_1112 : STD_LOGIC_VECTOR (16 downto 0);
    signal loop_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_reg_1126 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1869_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_7_fu_515_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_7_reg_1139 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1874_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1878_fu_550_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1878_reg_1149 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln1884_fu_564_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1884_reg_1154 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1878_fu_576_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1878_reg_1160 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_1168 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1878_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln386_fu_673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln386_reg_1178 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln1884_fu_681_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1884_reg_1183 : STD_LOGIC_VECTOR (16 downto 0);
    signal loop_8_fu_692_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal loop_8_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1883_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_9_fu_742_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_9_reg_1207 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1894_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_10_fu_793_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_10_reg_1220 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln1899_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_11_fu_847_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_11_reg_1233 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln1904_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1905_2_fu_885_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1905_2_reg_1243 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1913_fu_911_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1913_reg_1251 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1909_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_17_fu_921_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_reg_1267 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln1911_fu_990_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1911_reg_1272 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_reg_1279 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_reg_1284 : STD_LOGIC_VECTOR (7 downto 0);
    signal loop_12_fu_1014_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal loop_12_reg_1289 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1917_1_fu_1066_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1917_1_reg_1294 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln1919_1_fu_1089_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1919_1_reg_1299 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1922_fu_1106_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal loop_0_reg_342 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal loop_1_reg_354 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_01_rec_reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal round_assign_reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_390 : STD_LOGIC_VECTOR (14 downto 0);
    signal loop_2_reg_402 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal loop_3_reg_414 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal loop_4_reg_426 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal loop_5_reg_438 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal loop_6_reg_449 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_sum5_pn_reg_461 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1870_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1870_2_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1875_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1875_3_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1884_5_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1884_3_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1895_4_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1895_3_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1900_4_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1900_3_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1905_4_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1905_3_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1912_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1913_2_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1915_2_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1917_2_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln1919_2_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1913_fu_952_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1870_1_fu_495_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1870_fu_499_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1875_1_fu_526_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1875_fu_530_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1875_2_fu_536_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1875_1_fu_540_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_556_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_568_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln4_fu_592_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln386_fu_613_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitNumber_assign_fu_617_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln54_fu_625_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_3_fu_631_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln54_2_fu_645_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_4_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln54_2_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln386_2_fu_641_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_fu_661_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal challenge_fu_665_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1878_1_fu_677_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1884_4_fu_698_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1884_3_fu_702_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln1884_1_fu_712_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1884_2_fu_716_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1884_2_fu_722_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1884_1_fu_726_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1895_fu_748_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1895_fu_752_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1895_1_fu_763_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1895_1_fu_767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1895_2_fu_773_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1895_2_fu_777_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1900_fu_799_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1900_fu_803_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1900_1_fu_813_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1900_1_fu_817_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1900_fu_823_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1900_2_fu_827_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1900_2_fu_831_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1905_fu_853_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1905_fu_857_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1905_1_fu_867_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1905_1_fu_871_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1905_fu_877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1905_2_fu_881_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1909_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_895_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln7_fu_929_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_15_fu_939_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1913_fu_957_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1913_1_fu_961_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1913_1_fu_966_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1913_2_fu_970_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln1915_fu_1020_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1915_fu_1025_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1915_fu_1029_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1915_1_fu_1034_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1915_1_fu_1038_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln1917_fu_1048_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1917_fu_1053_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1917_fu_1057_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1917_1_fu_1062_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln1919_fu_1071_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1919_fu_1076_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1919_fu_1080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1919_1_fu_1085_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1922_fu_1102_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1928_fu_607_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1878_fu_580_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= add_ln1928_fu_607_p2;
                end if; 
            end if;
        end if;
    end process;


    loop_0_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_0_reg_342 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                loop_0_reg_342 <= loop_reg_1126;
            end if; 
        end if;
    end process;

    loop_1_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1869_fu_478_p2 = ap_const_lv1_1))) then 
                loop_1_reg_354 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                loop_1_reg_354 <= loop_7_reg_1139;
            end if; 
        end if;
    end process;

    loop_2_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                loop_2_reg_402 <= loop_8_reg_1194;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                loop_2_reg_402 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    loop_3_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1883_fu_686_p2 = ap_const_lv1_1))) then 
                loop_3_reg_414 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                loop_3_reg_414 <= loop_9_reg_1207;
            end if; 
        end if;
    end process;

    loop_4_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1894_fu_736_p2 = ap_const_lv1_1))) then 
                loop_4_reg_426 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                loop_4_reg_426 <= loop_10_reg_1220;
            end if; 
        end if;
    end process;

    loop_5_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1899_fu_787_p2 = ap_const_lv1_1))) then 
                loop_5_reg_438 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                loop_5_reg_438 <= loop_11_reg_1233;
            end if; 
        end if;
    end process;

    loop_6_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1909_fu_905_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1904_fu_841_p2 = ap_const_lv1_1))) then 
                loop_6_reg_449 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                loop_6_reg_449 <= loop_12_reg_1289;
            end if; 
        end if;
    end process;

    p_01_rec_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1874_fu_509_p2 = ap_const_lv1_1))) then 
                p_01_rec_reg_366 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                p_01_rec_reg_366 <= add_ln1922_fu_1106_p2;
            end if; 
        end if;
    end process;

    p_sum5_pn_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_17_fu_921_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                p_sum5_pn_reg_461(4) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1904_fu_841_p2 = ap_const_lv1_1) and (icmp_ln1909_fu_905_p2 = ap_const_lv1_0))) then 
                p_sum5_pn_reg_461(4) <= '0';
            end if; 
        end if;
    end process;

    phi_mul_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1874_fu_509_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_390 <= ap_const_lv15_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                phi_mul_reg_390 <= add_ln1878_reg_1149;
            end if; 
        end if;
    end process;

    round_assign_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1874_fu_509_p2 = ap_const_lv1_1))) then 
                round_assign_reg_378 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                round_assign_reg_378 <= i_reg_1168;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln1878_reg_1149 <= add_ln1878_fu_550_p2;
                i_reg_1168 <= i_fu_586_p2;
                    zext_ln1878_reg_1160(12 downto 5) <= zext_ln1878_fu_576_p1(12 downto 5);
                    zext_ln1884_reg_1154(11 downto 4) <= zext_ln1884_fu_564_p1(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln1884_reg_1183 <= add_ln1884_fu_681_p2;
                    zext_ln386_reg_1178(1 downto 0) <= zext_ln386_fu_673_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1904_fu_841_p2 = ap_const_lv1_0))) then
                add_ln1905_2_reg_1243 <= add_ln1905_2_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1909_fu_905_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1904_fu_841_p2 = ap_const_lv1_1))) then
                add_ln1913_reg_1251 <= add_ln1913_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln1917_1_reg_1294 <= add_ln1917_1_fu_1066_p2;
                add_ln1919_1_reg_1299 <= add_ln1919_1_fu_1089_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                loop_10_reg_1220 <= loop_10_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                loop_11_reg_1233 <= loop_11_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                loop_12_reg_1289 <= loop_12_fu_1014_p2;
                trunc_ln1911_reg_1272 <= trunc_ln1911_fu_990_p1;
                trunc_ln1_reg_1284 <= sig_0_proofs_inputS_q0(31 downto 24);
                trunc_ln9_reg_1267 <= sig_0_proofs_inputS_q0(15 downto 8);
                trunc_ln_reg_1279 <= sig_0_proofs_inputS_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                loop_7_reg_1139 <= loop_7_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                loop_8_reg_1194 <= loop_8_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                loop_9_reg_1207 <= loop_9_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                loop_reg_1126 <= loop_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln1870_reg_1112 <= trunc_ln1870_fu_474_p1;
            end if;
        end if;
    end process;
    zext_ln1884_reg_1154(3 downto 0) <= "0000";
    zext_ln1884_reg_1154(12) <= '0';
    zext_ln1878_reg_1160(4 downto 0) <= "00000";
    zext_ln1878_reg_1160(13) <= '0';
    zext_ln386_reg_1178(2) <= '0';
    p_sum5_pn_reg_461(3 downto 0) <= "1011";
    p_sum5_pn_reg_461(7 downto 5) <= "100";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln1869_fu_478_p2, ap_CS_fsm_state4, icmp_ln1874_fu_509_p2, ap_CS_fsm_state6, icmp_ln1878_fu_580_p2, ap_CS_fsm_state8, icmp_ln1883_fu_686_p2, ap_CS_fsm_state10, icmp_ln1894_fu_736_p2, ap_CS_fsm_state12, icmp_ln1899_fu_787_p2, ap_CS_fsm_state14, icmp_ln1904_fu_841_p2, icmp_ln1909_fu_905_p2, ap_CS_fsm_state16, tmp_17_fu_921_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln1869_fu_478_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln1874_fu_509_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1878_fu_580_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln1883_fu_686_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln1894_fu_736_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln1899_fu_787_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln1909_fu_905_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1904_fu_841_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln1904_fu_841_p2 = ap_const_lv1_1) and (icmp_ln1909_fu_905_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((tmp_17_fu_921_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1870_fu_499_p2 <= std_logic_vector(unsigned(zext_ln1870_1_fu_495_p1) + unsigned(trunc_ln1870_reg_1112));
    add_ln1875_1_fu_540_p2 <= std_logic_vector(unsigned(zext_ln1875_2_fu_536_p1) + unsigned(trunc_ln1870_reg_1112));
    add_ln1875_fu_530_p2 <= std_logic_vector(unsigned(zext_ln1875_1_fu_526_p1) + unsigned(ap_const_lv7_37));
    add_ln1878_fu_550_p2 <= std_logic_vector(unsigned(phi_mul_reg_390) + unsigned(ap_const_lv15_4B));
    add_ln1884_1_fu_726_p2 <= std_logic_vector(unsigned(add_ln1884_reg_1183) + unsigned(zext_ln1884_2_fu_722_p1));
    add_ln1884_2_fu_716_p2 <= std_logic_vector(unsigned(zext_ln1884_1_fu_712_p1) + unsigned(ap_const_lv7_57));
    add_ln1884_3_fu_702_p2 <= std_logic_vector(unsigned(zext_ln1878_reg_1160) + unsigned(zext_ln1884_4_fu_698_p1));
    add_ln1884_fu_681_p2 <= std_logic_vector(unsigned(trunc_ln1870_reg_1112) + unsigned(zext_ln1878_1_fu_677_p1));
    add_ln1895_1_fu_767_p2 <= std_logic_vector(unsigned(zext_ln1895_1_fu_763_p1) + unsigned(ap_const_lv8_77));
    add_ln1895_2_fu_777_p2 <= std_logic_vector(unsigned(add_ln1884_reg_1183) + unsigned(zext_ln1895_2_fu_773_p1));
    add_ln1895_fu_752_p2 <= std_logic_vector(unsigned(phi_mul_reg_390) + unsigned(zext_ln1895_fu_748_p1));
    add_ln1900_1_fu_817_p2 <= std_logic_vector(unsigned(zext_ln1900_1_fu_813_p1) + unsigned(ap_const_lv7_42));
    add_ln1900_2_fu_831_p2 <= std_logic_vector(unsigned(add_ln1884_reg_1183) + unsigned(zext_ln1900_2_fu_827_p1));
    add_ln1900_fu_803_p2 <= std_logic_vector(unsigned(zext_ln1884_reg_1154) + unsigned(zext_ln1900_fu_799_p1));
    add_ln1905_1_fu_871_p2 <= std_logic_vector(unsigned(zext_ln1905_1_fu_867_p1) + unsigned(ap_const_lv7_52));
    add_ln1905_2_fu_885_p2 <= std_logic_vector(unsigned(add_ln1884_reg_1183) + unsigned(zext_ln1905_2_fu_881_p1));
    add_ln1905_fu_857_p2 <= std_logic_vector(unsigned(zext_ln1884_reg_1154) + unsigned(zext_ln1905_fu_853_p1));
    add_ln1909_fu_890_p2 <= std_logic_vector(unsigned(zext_ln386_reg_1178) + unsigned(ap_const_lv3_7));
    add_ln1913_1_fu_961_p2 <= std_logic_vector(unsigned(add_ln1913_reg_1251) + unsigned(zext_ln1913_fu_957_p1));
    add_ln1913_2_fu_970_p2 <= std_logic_vector(unsigned(zext_ln1913_1_fu_966_p1) + unsigned(trunc_ln1870_reg_1112));
    add_ln1913_fu_911_p2 <= std_logic_vector(unsigned(p_01_rec_reg_366) + unsigned(ap_const_lv16_E2));
    add_ln1915_1_fu_1038_p2 <= std_logic_vector(unsigned(zext_ln1915_1_fu_1034_p1) + unsigned(trunc_ln1870_reg_1112));
    add_ln1915_fu_1029_p2 <= std_logic_vector(unsigned(add_ln1913_reg_1251) + unsigned(zext_ln1915_fu_1025_p1));
    add_ln1917_1_fu_1066_p2 <= std_logic_vector(unsigned(zext_ln1917_1_fu_1062_p1) + unsigned(trunc_ln1870_reg_1112));
    add_ln1917_fu_1057_p2 <= std_logic_vector(unsigned(add_ln1913_reg_1251) + unsigned(zext_ln1917_fu_1053_p1));
    add_ln1919_1_fu_1089_p2 <= std_logic_vector(unsigned(zext_ln1919_1_fu_1085_p1) + unsigned(trunc_ln1870_reg_1112));
    add_ln1919_fu_1080_p2 <= std_logic_vector(unsigned(add_ln1913_reg_1251) + unsigned(zext_ln1919_fu_1076_p1));
    add_ln1922_fu_1106_p2 <= std_logic_vector(unsigned(zext_ln1922_fu_1102_p1) + unsigned(p_01_rec_reg_366));
    add_ln1928_fu_607_p2 <= std_logic_vector(unsigned(p_01_rec_reg_366) + unsigned(ap_const_lv16_57));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln1878_fu_580_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1878_fu_580_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln1878_fu_580_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1878_fu_580_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state6, icmp_ln1878_fu_580_p2, add_ln1928_fu_607_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln1878_fu_580_p2 = ap_const_lv1_1))) then 
            ap_return <= add_ln1928_fu_607_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitNumber_assign_fu_617_p3 <= (trunc_ln386_fu_613_p1 & ap_const_lv1_0);
    challenge_fu_665_p3 <= (trunc_ln386_2_fu_641_p1 & trunc_ln54_fu_661_p1);
    i_fu_586_p2 <= std_logic_vector(unsigned(round_assign_reg_378) + unsigned(ap_const_lv8_1));
    icmp_ln1869_fu_478_p2 <= "1" when (loop_0_reg_342 = ap_const_lv6_37) else "0";
    icmp_ln1874_fu_509_p2 <= "1" when (loop_1_reg_354 = ap_const_lv6_20) else "0";
    icmp_ln1878_fu_580_p2 <= "1" when (round_assign_reg_378 = ap_const_lv8_DB) else "0";
    icmp_ln1883_fu_686_p2 <= "1" when (loop_2_reg_402 = ap_const_lv6_20) else "0";
    icmp_ln1894_fu_736_p2 <= "1" when (loop_3_reg_414 = ap_const_lv7_4B) else "0";
    icmp_ln1899_fu_787_p2 <= "1" when (loop_4_reg_426 = ap_const_lv5_10) else "0";
    icmp_ln1904_fu_841_p2 <= "1" when (loop_5_reg_438 = ap_const_lv5_10) else "0";
    icmp_ln1909_fu_905_p2 <= "1" when (tmp_16_fu_895_p4 = ap_const_lv2_0) else "0";
    loop_10_fu_793_p2 <= std_logic_vector(unsigned(loop_4_reg_426) + unsigned(ap_const_lv5_1));
    loop_11_fu_847_p2 <= std_logic_vector(unsigned(loop_5_reg_438) + unsigned(ap_const_lv5_1));
    loop_12_fu_1014_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(loop_6_reg_449));
    loop_7_fu_515_p2 <= std_logic_vector(unsigned(loop_1_reg_354) + unsigned(ap_const_lv6_1));
    loop_8_fu_692_p2 <= std_logic_vector(unsigned(loop_2_reg_402) + unsigned(ap_const_lv6_1));
    loop_9_fu_742_p2 <= std_logic_vector(unsigned(loop_3_reg_414) + unsigned(ap_const_lv7_1));
    loop_fu_484_p2 <= std_logic_vector(unsigned(loop_0_reg_342) + unsigned(ap_const_lv6_1));
    lshr_ln54_2_fu_655_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_4_fu_651_p1(8-1 downto 0)))));
    lshr_ln54_fu_635_p2 <= std_logic_vector(shift_right(unsigned(sig_0_challengeBits_q0),to_integer(unsigned('0' & zext_ln54_3_fu_631_p1(8-1 downto 0)))));
    or_ln1915_fu_1020_p2 <= (trunc_ln1911_reg_1272 or ap_const_lv4_1);
    or_ln1917_fu_1048_p2 <= (trunc_ln1911_reg_1272 or ap_const_lv4_2);
    or_ln1919_fu_1071_p2 <= (trunc_ln1911_reg_1272 or ap_const_lv4_3);
        sext_ln1900_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1900_1_fu_817_p2),8));

        sext_ln1905_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1905_1_fu_871_p2),8));


    sigBytes_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state20, zext_ln1870_2_fu_504_p1, zext_ln1875_3_fu_545_p1, zext_ln1884_3_fu_731_p1, zext_ln1895_3_fu_782_p1, zext_ln1900_3_fu_836_p1, zext_ln1905_3_fu_917_p1, zext_ln1913_2_fu_975_p1, zext_ln1915_2_fu_1043_p1, zext_ln1917_2_fu_1094_p1, ap_CS_fsm_state19, zext_ln1919_2_fu_1098_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sigBytes_address0 <= zext_ln1919_2_fu_1098_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sigBytes_address0 <= zext_ln1917_2_fu_1094_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sigBytes_address0 <= zext_ln1915_2_fu_1043_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sigBytes_address0 <= zext_ln1913_2_fu_975_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sigBytes_address0 <= zext_ln1905_3_fu_917_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sigBytes_address0 <= zext_ln1900_3_fu_836_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sigBytes_address0 <= zext_ln1895_3_fu_782_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sigBytes_address0 <= zext_ln1884_3_fu_731_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sigBytes_address0 <= zext_ln1875_3_fu_545_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sigBytes_address0 <= zext_ln1870_2_fu_504_p1(16 - 1 downto 0);
        else 
            sigBytes_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sigBytes_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            sigBytes_ce0 <= ap_const_logic_1;
        else 
            sigBytes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sigBytes_d0_assign_proc : process(sig_0_proofs_seed1_q0, sig_0_proofs_seed2_q0, sig_0_proofs_commun_q0, sig_0_proofs_view3C_q0, sig_0_challengeBits_q0, sig_0_salt_q0, trunc_ln9_reg_1267, ap_CS_fsm_state17, trunc_ln_reg_1279, trunc_ln1_reg_1284, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state19, trunc_ln1913_fu_952_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sigBytes_d0 <= trunc_ln1_reg_1284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sigBytes_d0 <= trunc_ln_reg_1279;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sigBytes_d0 <= trunc_ln9_reg_1267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sigBytes_d0 <= trunc_ln1913_fu_952_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sigBytes_d0 <= sig_0_proofs_seed2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sigBytes_d0 <= sig_0_proofs_seed1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sigBytes_d0 <= sig_0_proofs_commun_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sigBytes_d0 <= sig_0_proofs_view3C_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sigBytes_d0 <= sig_0_salt_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sigBytes_d0 <= sig_0_challengeBits_q0;
        else 
            sigBytes_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sigBytes_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            sigBytes_we0 <= ap_const_logic_1;
        else 
            sigBytes_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_0_challengeBits_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, zext_ln1870_fu_490_p1, zext_ln54_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_0_challengeBits_address0 <= zext_ln54_fu_602_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sig_0_challengeBits_address0 <= zext_ln1870_fu_490_p1(6 - 1 downto 0);
        else 
            sig_0_challengeBits_address0 <= "XXXXXX";
        end if; 
    end process;


    sig_0_challengeBits_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sig_0_challengeBits_ce0 <= ap_const_logic_1;
        else 
            sig_0_challengeBits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_commun_address0 <= zext_ln1895_4_fu_758_p1(15 - 1 downto 0);

    sig_0_proofs_commun_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_0_proofs_commun_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_commun_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_inputS_address0 <= zext_ln1912_fu_947_p1(10 - 1 downto 0);

    sig_0_proofs_inputS_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_inputS_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed1_address0 <= zext_ln1900_4_fu_808_p1(12 - 1 downto 0);

    sig_0_proofs_seed1_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_seed2_address0 <= zext_ln1905_4_fu_862_p1(12 - 1 downto 0);

    sig_0_proofs_seed2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_seed2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_proofs_view3C_address0 <= zext_ln1884_5_fu_707_p1(13 - 1 downto 0);

    sig_0_proofs_view3C_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_1;
        else 
            sig_0_proofs_view3C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sig_0_salt_address0 <= zext_ln1875_fu_521_p1(5 - 1 downto 0);

    sig_0_salt_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sig_0_salt_ce0 <= ap_const_logic_1;
        else 
            sig_0_salt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_15_fu_939_p3 <= (round_assign_reg_378 & trunc_ln7_fu_929_p4);
    tmp_16_fu_895_p4 <= add_ln1909_fu_890_p2(2 downto 1);
    tmp_17_fu_921_p3 <= loop_6_reg_449(4 downto 4);
    tmp_fu_556_p3 <= (round_assign_reg_378 & ap_const_lv4_0);
    tmp_s_fu_568_p3 <= (round_assign_reg_378 & ap_const_lv5_0);
    trunc_ln1870_fu_474_p1 <= sigBytes_offset(17 - 1 downto 0);
    trunc_ln1911_fu_990_p1 <= loop_6_reg_449(4 - 1 downto 0);
    trunc_ln1913_fu_952_p1 <= sig_0_proofs_inputS_q0(8 - 1 downto 0);
    trunc_ln386_2_fu_641_p1 <= lshr_ln54_fu_635_p2(1 - 1 downto 0);
    trunc_ln386_fu_613_p1 <= round_assign_reg_378(2 - 1 downto 0);
    trunc_ln4_fu_592_p4 <= round_assign_reg_378(7 downto 2);
    trunc_ln54_fu_661_p1 <= lshr_ln54_2_fu_655_p2(1 - 1 downto 0);
    trunc_ln7_fu_929_p4 <= loop_6_reg_449(3 downto 2);
    xor_ln54_2_fu_645_p2 <= (bitNumber_assign_fu_617_p3 xor ap_const_lv3_7);
    xor_ln54_fu_625_p2 <= (bitNumber_assign_fu_617_p3 xor ap_const_lv3_6);
    zext_ln1870_1_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_342),17));
    zext_ln1870_2_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1870_fu_499_p2),64));
    zext_ln1870_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_0_reg_342),64));
    zext_ln1875_1_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_354),7));
    zext_ln1875_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1875_fu_530_p2),17));
    zext_ln1875_3_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1875_1_fu_540_p2),64));
    zext_ln1875_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_1_reg_354),64));
    zext_ln1878_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_01_rec_reg_366),17));
    zext_ln1878_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_568_p3),14));
    zext_ln1884_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_402),7));
    zext_ln1884_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1884_2_fu_716_p2),17));
    zext_ln1884_3_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1884_1_fu_726_p2),64));
    zext_ln1884_4_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_2_reg_402),14));
    zext_ln1884_5_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1884_3_fu_702_p2),64));
    zext_ln1884_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_556_p3),13));
    zext_ln1895_1_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_414),8));
    zext_ln1895_2_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1895_1_fu_767_p2),17));
    zext_ln1895_3_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1895_2_fu_777_p2),64));
    zext_ln1895_4_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1895_fu_752_p2),64));
    zext_ln1895_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_3_reg_414),15));
    zext_ln1900_1_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_426),7));
    zext_ln1900_2_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1900_fu_823_p1),17));
    zext_ln1900_3_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1900_2_fu_831_p2),64));
    zext_ln1900_4_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1900_fu_803_p2),64));
    zext_ln1900_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_4_reg_426),13));
    zext_ln1905_1_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_438),7));
    zext_ln1905_2_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1905_fu_877_p1),17));
    zext_ln1905_3_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1905_2_reg_1243),64));
    zext_ln1905_4_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1905_fu_857_p2),64));
    zext_ln1905_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_5_reg_438),13));
    zext_ln1912_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_939_p3),64));
    zext_ln1913_1_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1913_1_fu_961_p2),17));
    zext_ln1913_2_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1913_2_fu_970_p2),64));
    zext_ln1913_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_6_reg_449),16));
    zext_ln1915_1_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1915_fu_1029_p2),17));
    zext_ln1915_2_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1915_1_fu_1038_p2),64));
    zext_ln1915_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1915_fu_1020_p2),16));
    zext_ln1917_1_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1917_fu_1057_p2),17));
    zext_ln1917_2_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1917_1_reg_1294),64));
    zext_ln1917_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1917_fu_1048_p2),16));
    zext_ln1919_1_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1919_fu_1080_p2),17));
    zext_ln1919_2_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1919_1_reg_1299),64));
    zext_ln1919_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1919_fu_1071_p2),16));
    zext_ln1922_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum5_pn_reg_461),16));
    zext_ln386_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(challenge_fu_665_p3),3));
    zext_ln54_3_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_625_p2),8));
    zext_ln54_4_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_2_fu_645_p2),8));
    zext_ln54_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_fu_592_p4),64));
end behav;
