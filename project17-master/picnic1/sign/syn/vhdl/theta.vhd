-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity theta is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of theta is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_0_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_209 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_2_reg_220 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_231 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln336_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_3_fu_248_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_3_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln337_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln337_reg_573 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_fu_259_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_reg_578 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln339_5_fu_263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln339_5_reg_584 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_load_reg_599 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal A_load_5_reg_604 : STD_LOGIC_VECTOR (63 downto 0);
    signal A_load_2_reg_619 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal A_load_3_reg_624 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln341_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal x_fu_339_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_638 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln343_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln343_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln343_fu_443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln343_reg_657 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln345_fu_461_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_reg_662 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_1_fu_469_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_1_reg_670 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal D_load_reg_683 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state10_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal A_addr_5_reg_688 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_fu_553_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_694 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal C_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce0 : STD_LOGIC;
    signal C_we0 : STD_LOGIC;
    signal C_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_ce1 : STD_LOGIC;
    signal C_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal D_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal D_ce0 : STD_LOGIC;
    signal D_we0 : STD_LOGIC;
    signal D_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_x_0_phi_fu_190_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal x_1_reg_197 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_213_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_x_2_phi_fu_224_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_y_1_phi_fu_235_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln339_1_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_2_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln339_3_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_4_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln342_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_1_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_2_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln345_1_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal add_ln339_fu_267_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln339_1_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln339_2_fu_288_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln339_3_fu_298_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln339_1_fu_312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln339_2_fu_317_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln339_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln342_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln342_1_fu_351_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln342_fu_357_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln341_fu_329_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln342_1_fu_370_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln342_2_fu_382_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln342_1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln342_fu_388_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln342_1_fu_392_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln342_fu_405_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_2_fu_409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_417_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln344_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_5_fu_449_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln345_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln345_2_fu_487_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_2_fu_492_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln345_1_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln345_3_fu_508_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln345_3_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln345_2_fu_499_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln345_3_fu_520_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln345_1_fu_532_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_524_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln345_4_fu_538_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln345_fu_542_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component theta_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component theta_D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    C_U : component theta_C
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_address0,
        ce0 => C_ce0,
        we0 => C_we0,
        d0 => C_d0,
        q0 => C_q0,
        address1 => C_address1,
        ce1 => C_ce1,
        q1 => C_q1);

    D_U : component theta_D
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => D_address0,
        ce0 => D_ce0,
        we0 => D_we0,
        d0 => D_d0,
        q0 => D_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln341_fu_333_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln341_fu_333_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln341_fu_333_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_209 <= ap_const_lv5_0;
            elsif (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_209 <= add_ln343_reg_657;
            end if; 
        end if;
    end process;

    x_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_0_reg_186 <= x_3_reg_568;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_reg_186 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_1_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x_1_reg_197 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_1_reg_197 <= x_reg_638;
            end if; 
        end if;
    end process;

    x_2_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln341_fu_333_p2 = ap_const_lv1_1))) then 
                x_2_reg_220 <= ap_const_lv3_0;
            elsif (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                x_2_reg_220 <= select_ln345_1_reg_670;
            end if; 
        end if;
    end process;

    y_1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln341_fu_333_p2 = ap_const_lv1_1))) then 
                y_1_reg_231 <= ap_const_lv3_0;
            elsif (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                y_1_reg_231 <= y_reg_694;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                A_addr_5_reg_688 <= zext_ln345_1_fu_548_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln336_reg_564 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                A_load_2_reg_619 <= A_q0;
                A_load_3_reg_624 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln336_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                A_load_5_reg_604 <= A_q1;
                A_load_reg_599 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                D_load_reg_683 <= D_q0;
                y_reg_694 <= y_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln343_reg_657 <= add_ln343_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln336_reg_564 <= icmp_ln336_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln343_reg_653 <= icmp_ln343_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln343_fu_437_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln345_1_reg_670 <= select_ln345_1_fu_469_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln343_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln345_reg_662 <= select_ln345_fu_461_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                x_3_reg_568 <= x_3_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                x_reg_638 <= x_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln337_reg_573(2 downto 0) <= zext_ln337_fu_254_p1(2 downto 0);
                    zext_ln339_5_reg_584(2 downto 0) <= zext_ln339_5_fu_263_p1(2 downto 0);
                    zext_ln339_reg_578(2 downto 0) <= zext_ln339_fu_259_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln337_reg_573(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln339_reg_578(4 downto 3) <= "00";
    zext_ln339_5_reg_584(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln336_fu_242_p2, ap_enable_reg_pp0_iter0, icmp_ln341_fu_333_p2, ap_CS_fsm_state7, icmp_ln343_fu_437_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln336_fu_242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln336_fu_242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln341_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln343_fu_437_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln343_fu_437_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln337_fu_254_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp0_stage0, zext_ln339_2_fu_283_p1, ap_block_pp0_stage1, zext_ln339_4_fu_303_p1, ap_block_pp0_stage2, zext_ln345_1_fu_548_p1, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            A_address0 <= zext_ln345_1_fu_548_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            A_address0 <= zext_ln339_4_fu_303_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_address0 <= zext_ln339_2_fu_283_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address0 <= zext_ln337_fu_254_p1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage0, A_addr_5_reg_688, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln339_1_fu_273_p1, ap_block_pp0_stage1, zext_ln339_3_fu_293_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            A_address1 <= A_addr_5_reg_688;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_address1 <= zext_ln339_3_fu_293_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address1 <= zext_ln339_1_fu_273_p1(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d1 <= (D_load_reg_683 xor A_q0);

    A_we1_assign_proc : process(icmp_ln343_reg_653, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln337_reg_573, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln342_fu_365_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            C_address0 <= zext_ln342_fu_365_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            C_address0 <= zext_ln337_reg_573(3 - 1 downto 0);
        else 
            C_address0 <= "XXX";
        end if; 
    end process;

    C_address1 <= zext_ln342_1_fu_400_p1(3 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= (xor_ln339_fu_308_p2 xor xor_ln339_2_fu_317_p2);

    C_we0_assign_proc : process(icmp_ln336_reg_564, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln336_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8, ap_block_pp1_stage0, zext_ln342_2_fu_432_p1, zext_ln345_fu_477_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            D_address0 <= zext_ln345_fu_477_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            D_address0 <= zext_ln342_2_fu_432_p1(3 - 1 downto 0);
        else 
            D_address0 <= "XXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_d0 <= (or_ln_fu_417_p3 xor C_q1);

    D_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            D_we0 <= ap_const_logic_1;
        else 
            D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln339_1_fu_278_p2 <= std_logic_vector(unsigned(zext_ln339_5_reg_584) + unsigned(ap_const_lv4_A));
    add_ln339_2_fu_288_p2 <= std_logic_vector(unsigned(zext_ln339_reg_578) + unsigned(ap_const_lv5_F));
    add_ln339_3_fu_298_p2 <= std_logic_vector(unsigned(zext_ln339_reg_578) + unsigned(ap_const_lv5_14));
    add_ln339_fu_267_p2 <= std_logic_vector(unsigned(zext_ln339_5_fu_263_p1) + unsigned(ap_const_lv4_5));
    add_ln342_1_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(zext_ln341_fu_329_p1));
    add_ln342_2_fu_382_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(x_1_reg_197));
    add_ln343_fu_443_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_213_p4) + unsigned(ap_const_lv5_1));
    add_ln345_1_fu_532_p2 <= std_logic_vector(unsigned(zext_ln345_2_fu_499_p1) + unsigned(zext_ln345_3_fu_520_p1));
    add_ln345_2_fu_487_p2 <= std_logic_vector(unsigned(select_ln345_1_reg_670) + unsigned(ap_const_lv3_3));
    add_ln345_3_fu_508_p2 <= std_logic_vector(unsigned(select_ln345_reg_662) + unsigned(ap_const_lv3_3));
    add_ln345_fu_542_p2 <= std_logic_vector(unsigned(shl_ln_fu_524_p3) + unsigned(zext_ln345_4_fu_538_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln336_fu_242_p2)
    begin
        if ((icmp_ln336_fu_242_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln343_fu_437_p2)
    begin
        if ((icmp_ln343_fu_437_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_213_p4_assign_proc : process(indvar_flatten_reg_209, icmp_ln343_reg_653, ap_CS_fsm_pp1_stage0, add_ln343_reg_657, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_213_p4 <= add_ln343_reg_657;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_213_p4 <= indvar_flatten_reg_209;
        end if; 
    end process;


    ap_phi_mux_x_0_phi_fu_190_p4_assign_proc : process(x_0_reg_186, icmp_ln336_reg_564, ap_CS_fsm_pp0_stage0, x_3_reg_568, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln336_reg_564 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_x_0_phi_fu_190_p4 <= x_3_reg_568;
        else 
            ap_phi_mux_x_0_phi_fu_190_p4 <= x_0_reg_186;
        end if; 
    end process;


    ap_phi_mux_x_2_phi_fu_224_p4_assign_proc : process(x_2_reg_220, icmp_ln343_reg_653, ap_CS_fsm_pp1_stage0, select_ln345_1_reg_670, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_x_2_phi_fu_224_p4 <= select_ln345_1_reg_670;
        else 
            ap_phi_mux_x_2_phi_fu_224_p4 <= x_2_reg_220;
        end if; 
    end process;


    ap_phi_mux_y_1_phi_fu_235_p4_assign_proc : process(y_1_reg_231, icmp_ln343_reg_653, ap_CS_fsm_pp1_stage0, y_reg_694, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln343_reg_653 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_y_1_phi_fu_235_p4 <= y_reg_694;
        else 
            ap_phi_mux_y_1_phi_fu_235_p4 <= y_1_reg_231;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln336_fu_242_p2 <= "1" when (ap_phi_mux_x_0_phi_fu_190_p4 = ap_const_lv3_5) else "0";
    icmp_ln341_fu_333_p2 <= "1" when (x_1_reg_197 = ap_const_lv3_5) else "0";
    icmp_ln342_1_fu_376_p2 <= "1" when (unsigned(add_ln342_1_fu_370_p2) < unsigned(ap_const_lv4_5)) else "0";
    icmp_ln342_fu_345_p2 <= "1" when (unsigned(x_fu_339_p2) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln343_fu_437_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_213_p4 = ap_const_lv5_19) else "0";
    icmp_ln344_fu_455_p2 <= "1" when (ap_phi_mux_y_1_phi_fu_235_p4 = ap_const_lv3_5) else "0";
    icmp_ln345_1_fu_503_p2 <= "1" when (unsigned(select_ln345_reg_662) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln345_fu_482_p2 <= "1" when (unsigned(select_ln345_1_reg_670) < unsigned(ap_const_lv3_5)) else "0";
    or_ln_fu_417_p3 <= (trunc_ln342_fu_405_p1 & tmp_2_fu_409_p3);
    select_ln342_1_fu_392_p3 <= 
        add_ln342_1_fu_370_p2 when (icmp_ln342_1_fu_376_p2(0) = '1') else 
        sext_ln342_fu_388_p1;
    select_ln342_fu_357_p3 <= 
        x_fu_339_p2 when (icmp_ln342_fu_345_p2(0) = '1') else 
        xor_ln342_1_fu_351_p2;
    select_ln345_1_fu_469_p3 <= 
        x_5_fu_449_p2 when (icmp_ln344_fu_455_p2(0) = '1') else 
        ap_phi_mux_x_2_phi_fu_224_p4;
    select_ln345_2_fu_492_p3 <= 
        select_ln345_1_reg_670 when (icmp_ln345_fu_482_p2(0) = '1') else 
        add_ln345_2_fu_487_p2;
    select_ln345_3_fu_513_p3 <= 
        select_ln345_reg_662 when (icmp_ln345_1_fu_503_p2(0) = '1') else 
        add_ln345_3_fu_508_p2;
    select_ln345_fu_461_p3 <= 
        ap_const_lv3_0 when (icmp_ln344_fu_455_p2(0) = '1') else 
        ap_phi_mux_y_1_phi_fu_235_p4;
        sext_ln342_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln342_2_fu_382_p2),4));

    shl_ln_fu_524_p3 <= (select_ln345_3_fu_513_p3 & ap_const_lv2_0);
    tmp_2_fu_409_p3 <= C_q0(63 downto 63);
    trunc_ln342_fu_405_p1 <= C_q0(63 - 1 downto 0);
    x_3_fu_248_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_0_phi_fu_190_p4) + unsigned(ap_const_lv3_1));
    x_5_fu_449_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_2_phi_fu_224_p4) + unsigned(ap_const_lv3_1));
    x_fu_339_p2 <= std_logic_vector(unsigned(x_1_reg_197) + unsigned(ap_const_lv3_1));
    xor_ln339_1_fu_312_p2 <= (A_q0 xor A_load_3_reg_624);
    xor_ln339_2_fu_317_p2 <= (xor_ln339_1_fu_312_p2 xor A_load_2_reg_619);
    xor_ln339_fu_308_p2 <= (A_load_reg_599 xor A_load_5_reg_604);
    xor_ln342_1_fu_351_p2 <= (x_1_reg_197 xor ap_const_lv3_4);
    y_fu_553_p2 <= std_logic_vector(unsigned(select_ln345_reg_662) + unsigned(ap_const_lv3_1));
    zext_ln337_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x_0_phi_fu_190_p4),64));
    zext_ln339_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_fu_267_p2),64));
    zext_ln339_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_1_fu_278_p2),64));
    zext_ln339_3_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_2_fu_288_p2),64));
    zext_ln339_4_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_3_fu_298_p2),64));
    zext_ln339_5_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x_0_phi_fu_190_p4),4));
    zext_ln339_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_x_0_phi_fu_190_p4),5));
    zext_ln341_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_197),4));
    zext_ln342_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln342_1_fu_392_p3),64));
    zext_ln342_2_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_197),64));
    zext_ln342_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln342_fu_357_p3),64));
    zext_ln345_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln345_fu_542_p2),64));
    zext_ln345_2_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln345_2_fu_492_p3),4));
    zext_ln345_3_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln345_3_fu_513_p3),4));
    zext_ln345_4_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln345_1_fu_532_p2),5));
    zext_ln345_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln345_1_fu_469_p3),64));
end behav;
