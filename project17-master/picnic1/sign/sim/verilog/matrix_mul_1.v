// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mul_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        state_offset,
        matrix_offset
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_state5 = 11'd8;
parameter    ap_ST_fsm_state6 = 11'd16;
parameter    ap_ST_fsm_state7 = 11'd32;
parameter    ap_ST_fsm_state8 = 11'd64;
parameter    ap_ST_fsm_state9 = 11'd128;
parameter    ap_ST_fsm_state10 = 11'd256;
parameter    ap_ST_fsm_state11 = 11'd512;
parameter    ap_ST_fsm_state12 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] output_r_address0;
output   output_r_ce0;
output  [3:0] output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
input  [5:0] state_offset;
input  [13:0] matrix_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] output_r_address0;
reg output_r_ce0;
reg[3:0] output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] temp_matrix2_address0;
reg    temp_matrix2_ce0;
wire   [31:0] temp_matrix2_q0;
reg   [2:0] j_0_reg_229;
wire   [4:0] trunc_ln127_fu_277_p1;
reg   [4:0] trunc_ln127_reg_930;
wire   [0:0] icmp_ln124_fu_281_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] i_fu_287_p2;
reg   [7:0] i_reg_940;
wire   [2:0] trunc_ln124_fu_293_p1;
reg   [2:0] trunc_ln124_reg_945;
wire   [8:0] shl_ln_fu_301_p3;
reg   [8:0] shl_ln_reg_950;
wire   [0:0] icmp_ln125_fu_309_p2;
reg   [0:0] icmp_ln125_reg_955;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] j_fu_315_p2;
reg   [2:0] j_reg_959;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] prod_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln85_fu_375_p2;
wire   [2:0] i_11_fu_381_p2;
reg   [2:0] i_11_reg_987;
reg   [1:0] tmp_38_reg_992;
reg   [5:0] temp_addr_2_reg_998;
wire   [31:0] x_7_fu_412_p2;
wire    ap_CS_fsm_state8;
wire   [4:0] start_pos_fu_624_p3;
reg   [4:0] start_pos_reg_1008;
wire    ap_CS_fsm_state9;
wire   [4:0] or_ln66_6_fu_632_p2;
reg   [4:0] or_ln66_6_reg_1014;
wire   [7:0] or_ln66_fu_768_p2;
reg   [7:0] or_ln66_reg_1020;
wire   [2:0] loop_fu_896_p2;
reg   [2:0] loop_reg_1028;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln133_fu_890_p2;
wire   [4:0] add_ln134_fu_911_p2;
reg   [4:0] add_ln134_reg_1038;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [5:0] prod_address0;
reg    prod_ce0;
reg    prod_we0;
wire   [31:0] prod_d0;
reg   [5:0] temp_address0;
reg    temp_ce0;
reg   [3:0] temp_we0;
wire   [31:0] temp_d0;
wire   [31:0] temp_q0;
reg   [7:0] bitNumber_assign_reg_217;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_phi_mux_j_0_phi_fu_233_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] x_0_i_reg_241;
reg   [2:0] i_0_i_reg_251;
reg   [2:0] loop_0_reg_262;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln127_2_fu_343_p1;
wire   [63:0] zext_ln127_3_fu_353_p1;
wire   [63:0] zext_ln127_fu_358_p1;
wire   [63:0] zext_ln85_fu_370_p1;
wire   [63:0] zext_ln66_fu_407_p1;
wire   [63:0] zext_ln134_fu_902_p1;
wire   [63:0] zext_ln134_2_fu_916_p1;
wire    ap_CS_fsm_state5;
wire   [3:0] shl_ln66_17_fu_883_p2;
reg   [4:0] grp_fu_273_p0;
reg   [4:0] grp_fu_273_p1;
wire   [6:0] trunc_ln126_fu_297_p1;
wire   [8:0] zext_ln125_fu_321_p1;
wire   [8:0] add_ln126_fu_325_p2;
wire   [4:0] zext_ln127_1_fu_334_p1;
wire   [4:0] add_ln127_fu_338_p2;
wire   [13:0] zext_ln126_fu_330_p1;
wire   [13:0] add_ln127_1_fu_348_p2;
wire   [2:0] adjSize_fu_397_p4;
wire   [30:0] lshr_ln_fu_418_p4;
wire   [31:0] zext_ln93_fu_428_p1;
wire   [31:0] y_fu_458_p2;
wire   [29:0] lshr_ln1_fu_464_p4;
wire   [23:0] trunc_ln93_3_fu_448_p4;
wire   [23:0] trunc_ln93_1_fu_444_p1;
wire   [31:0] zext_ln94_fu_474_p1;
wire   [31:0] y_1_fu_502_p2;
wire   [27:0] lshr_ln2_fu_508_p4;
wire   [23:0] trunc_ln94_1_fu_492_p4;
wire   [23:0] xor_ln94_fu_486_p2;
wire   [31:0] zext_ln95_fu_518_p1;
wire   [23:0] trunc_ln95_1_fu_536_p4;
wire   [23:0] xor_ln95_fu_530_p2;
wire   [31:0] y_2_fu_546_p2;
wire   [23:0] trunc_ln_fu_558_p4;
wire   [23:0] xor_ln95_2_fu_552_p2;
wire   [23:0] y_3_fu_576_p2;
wire   [0:0] trunc_ln93_fu_432_p1;
wire   [0:0] tmp_34_fu_478_p3;
wire   [0:0] xor_ln98_fu_590_p2;
wire   [0:0] tmp_fu_436_p3;
wire   [0:0] tmp_36_fu_568_p3;
wire   [0:0] tmp_37_fu_582_p3;
wire   [0:0] xor_ln98_2_fu_602_p2;
wire   [0:0] tmp_35_fu_522_p3;
wire   [0:0] xor_ln98_3_fu_608_p2;
wire   [0:0] xor_ln98_1_fu_596_p2;
wire   [0:0] xor_ln98_4_fu_614_p2;
wire   [5:0] zext_ln66_38_fu_639_p1;
wire   [5:0] zext_ln66_39_fu_643_p1;
wire   [0:0] grp_fu_273_p2;
wire   [5:0] sub_ln66_fu_657_p2;
wire   [5:0] sub_ln66_9_fu_669_p2;
reg   [31:0] tmp_39_fu_647_p4;
wire   [5:0] xor_ln66_12_fu_663_p2;
wire   [5:0] select_ln66_fu_675_p3;
wire   [5:0] select_ln66_22_fu_691_p3;
wire   [5:0] sub_ln66_10_fu_699_p2;
wire   [31:0] select_ln66_21_fu_683_p3;
wire   [31:0] zext_ln66_40_fu_705_p1;
wire   [31:0] zext_ln66_41_fu_709_p1;
wire   [31:0] lshr_ln66_fu_713_p2;
wire   [31:0] lshr_ln66_9_fu_719_p2;
wire   [31:0] and_ln66_12_fu_725_p2;
wire   [2:0] xor_ln66_fu_735_p2;
wire   [7:0] zext_ln66_1_fu_740_p1;
wire   [7:0] shl_ln66_fu_744_p2;
wire   [7:0] zext_ln98_fu_620_p1;
wire   [7:0] trunc_ln66_fu_731_p1;
wire   [7:0] xor_ln66_3_fu_750_p2;
wire   [7:0] and_ln66_fu_762_p2;
wire   [7:0] shl_ln66_7_fu_756_p2;
wire   [5:0] zext_ln66_42_fu_774_p1;
wire   [5:0] zext_ln66_43_fu_777_p1;
wire   [5:0] xor_ln66_13_fu_783_p2;
wire   [5:0] select_ln66_23_fu_789_p3;
wire   [5:0] select_ln66_25_fu_805_p3;
wire   [5:0] select_ln66_24_fu_797_p3;
wire   [5:0] xor_ln66_14_fu_813_p2;
wire   [31:0] zext_ln66_44_fu_780_p1;
wire   [31:0] zext_ln66_45_fu_819_p1;
wire   [31:0] shl_ln66_15_fu_831_p2;
reg   [31:0] tmp_40_fu_837_p4;
wire   [31:0] zext_ln66_46_fu_823_p1;
wire   [31:0] zext_ln66_47_fu_827_p1;
wire   [31:0] shl_ln66_16_fu_855_p2;
wire   [31:0] lshr_ln66_10_fu_861_p2;
wire   [31:0] select_ln66_26_fu_847_p3;
wire   [31:0] and_ln66_13_fu_867_p2;
wire   [3:0] zext_ln66_48_fu_880_p1;
wire   [4:0] zext_ln134_1_fu_907_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrix_mul_1_tempXh4 #(
    .DataWidth( 32 ),
    .AddressRange( 10240 ),
    .AddressWidth( 14 ))
temp_matrix2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_matrix2_address0),
    .ce0(temp_matrix2_ce0),
    .q0(temp_matrix2_q0)
);

matrix_mul_prod #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
prod_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(prod_address0),
    .ce0(prod_ce0),
    .we0(prod_we0),
    .d0(prod_d0),
    .q0(prod_q0)
);

matrix_mul_temp #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln124_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln124_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bitNumber_assign_reg_217 <= i_reg_940;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bitNumber_assign_reg_217 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_i_reg_251 <= i_11_reg_987;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_251 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_229 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln125_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_229 <= j_reg_959;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        loop_0_reg_262 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        loop_0_reg_262 <= loop_reg_1028;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        x_0_i_reg_241 <= x_7_fu_412_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_0_i_reg_241 <= prod_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln133_fu_890_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        add_ln134_reg_1038 <= add_ln134_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_11_reg_987 <= i_11_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_940 <= i_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln125_reg_955 <= icmp_ln125_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_959 <= j_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        loop_reg_1028 <= loop_fu_896_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        or_ln66_6_reg_1014[4 : 3] <= or_ln66_6_fu_632_p2[4 : 3];
        or_ln66_reg_1020 <= or_ln66_fu_768_p2;
        start_pos_reg_1008[4 : 3] <= start_pos_fu_624_p3[4 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_950[8 : 2] <= shl_ln_fu_301_p3[8 : 2];
        trunc_ln124_reg_945 <= trunc_ln124_fu_293_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln85_fu_375_p2 == 1'd1))) begin
        temp_addr_2_reg_998[2 : 0] <= zext_ln66_fu_407_p1[2 : 0];
        tmp_38_reg_992 <= {{bitNumber_assign_reg_217[4:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln127_reg_930 <= trunc_ln127_fu_277_p1;
    end
end

always @ (*) begin
    if ((icmp_ln125_fu_309_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (icmp_ln133_fu_890_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_955 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_233_p4 = j_reg_959;
    end else begin
        ap_phi_mux_j_0_phi_fu_233_p4 = j_0_reg_229;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln133_fu_890_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_273_p0 = start_pos_reg_1008;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_273_p0 = start_pos_fu_624_p3;
    end else begin
        grp_fu_273_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_273_p1 = or_ln66_6_reg_1014;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_273_p1 = or_ln66_6_fu_632_p2;
    end else begin
        grp_fu_273_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_address0 = zext_ln134_2_fu_916_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_address0 = zext_ln127_2_fu_343_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_we0 = 4'd15;
    end else begin
        output_r_we0 = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        prod_address0 = zext_ln85_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        prod_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        prod_address0 = zext_ln127_fu_358_p1;
    end else begin
        prod_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln125_reg_955 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_address0 = zext_ln134_fu_902_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_address0 = temp_addr_2_reg_998;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_address0 = zext_ln66_fu_407_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_matrix2_ce0 = 1'b1;
    end else begin
        temp_matrix2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_we0 = shl_ln66_17_fu_883_p2;
    end else begin
        temp_we0 = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln124_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln125_fu_309_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln125_fu_309_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln85_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln133_fu_890_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln126_fu_325_p2 = (shl_ln_reg_950 + zext_ln125_fu_321_p1);

assign add_ln127_1_fu_348_p2 = (zext_ln126_fu_330_p1 + matrix_offset);

assign add_ln127_fu_338_p2 = (zext_ln127_1_fu_334_p1 + trunc_ln127_reg_930);

assign add_ln134_fu_911_p2 = (zext_ln134_1_fu_907_p1 + trunc_ln127_reg_930);

assign adjSize_fu_397_p4 = {{bitNumber_assign_reg_217[7:5]}};

assign and_ln66_12_fu_725_p2 = (lshr_ln66_fu_713_p2 & lshr_ln66_9_fu_719_p2);

assign and_ln66_13_fu_867_p2 = (shl_ln66_16_fu_855_p2 & lshr_ln66_10_fu_861_p2);

assign and_ln66_fu_762_p2 = (xor_ln66_3_fu_750_p2 & trunc_ln66_fu_731_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_273_p2 = ((grp_fu_273_p0 > grp_fu_273_p1) ? 1'b1 : 1'b0);

assign i_11_fu_381_p2 = (i_0_i_reg_251 + 3'd1);

assign i_fu_287_p2 = (bitNumber_assign_reg_217 + 8'd1);

assign icmp_ln124_fu_281_p2 = ((bitNumber_assign_reg_217 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_309_p2 = ((ap_phi_mux_j_0_phi_fu_233_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln133_fu_890_p2 = ((loop_0_reg_262 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_375_p2 = ((i_0_i_reg_251 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_315_p2 = (ap_phi_mux_j_0_phi_fu_233_p4 + 3'd1);

assign loop_fu_896_p2 = (loop_0_reg_262 + 3'd1);

assign lshr_ln1_fu_464_p4 = {{y_fu_458_p2[31:2]}};

assign lshr_ln2_fu_508_p4 = {{y_1_fu_502_p2[31:4]}};

assign lshr_ln66_10_fu_861_p2 = 32'd4294967295 >> zext_ln66_47_fu_827_p1;

assign lshr_ln66_9_fu_719_p2 = 32'd4294967295 >> zext_ln66_41_fu_709_p1;

assign lshr_ln66_fu_713_p2 = select_ln66_21_fu_683_p3 >> zext_ln66_40_fu_705_p1;

assign lshr_ln_fu_418_p4 = {{x_0_i_reg_241[31:1]}};

assign or_ln66_6_fu_632_p2 = (start_pos_fu_624_p3 | 5'd7);

assign or_ln66_fu_768_p2 = (shl_ln66_7_fu_756_p2 | and_ln66_fu_762_p2);

assign output_r_d0 = temp_q0;

assign prod_d0 = (temp_matrix2_q0 & output_r_q0);

assign select_ln66_21_fu_683_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? tmp_39_fu_647_p4 : temp_q0);

assign select_ln66_22_fu_691_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? xor_ln66_12_fu_663_p2 : zext_ln66_38_fu_639_p1);

assign select_ln66_23_fu_789_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? zext_ln66_42_fu_774_p1 : zext_ln66_43_fu_777_p1);

assign select_ln66_24_fu_797_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? zext_ln66_43_fu_777_p1 : zext_ln66_42_fu_774_p1);

assign select_ln66_25_fu_805_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? xor_ln66_13_fu_783_p2 : zext_ln66_42_fu_774_p1);

assign select_ln66_26_fu_847_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? tmp_40_fu_837_p4 : shl_ln66_15_fu_831_p2);

assign select_ln66_fu_675_p3 = ((grp_fu_273_p2[0:0] === 1'b1) ? sub_ln66_fu_657_p2 : sub_ln66_9_fu_669_p2);

assign shl_ln66_15_fu_831_p2 = zext_ln66_44_fu_780_p1 << zext_ln66_45_fu_819_p1;

assign shl_ln66_16_fu_855_p2 = 32'd4294967295 << zext_ln66_46_fu_823_p1;

assign shl_ln66_17_fu_883_p2 = 4'd1 << zext_ln66_48_fu_880_p1;

assign shl_ln66_7_fu_756_p2 = zext_ln98_fu_620_p1 << zext_ln66_1_fu_740_p1;

assign shl_ln66_fu_744_p2 = 8'd1 << zext_ln66_1_fu_740_p1;

assign shl_ln_fu_301_p3 = {{trunc_ln126_fu_297_p1}, {2'd0}};

assign start_pos_fu_624_p3 = {{tmp_38_reg_992}, {3'd0}};

assign sub_ln66_10_fu_699_p2 = (6'd31 - select_ln66_fu_675_p3);

assign sub_ln66_9_fu_669_p2 = (zext_ln66_39_fu_643_p1 - zext_ln66_38_fu_639_p1);

assign sub_ln66_fu_657_p2 = (zext_ln66_38_fu_639_p1 - zext_ln66_39_fu_643_p1);

assign temp_d0 = (select_ln66_26_fu_847_p3 & and_ln66_13_fu_867_p2);

assign temp_matrix2_address0 = zext_ln127_3_fu_353_p1;

assign tmp_34_fu_478_p3 = y_fu_458_p2[32'd2];

assign tmp_35_fu_522_p3 = y_1_fu_502_p2[32'd4];

assign tmp_36_fu_568_p3 = y_2_fu_546_p2[32'd8];

assign tmp_37_fu_582_p3 = y_3_fu_576_p2[32'd16];

integer ap_tvar_int_0;

always @ (temp_q0) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_39_fu_647_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_39_fu_647_p4[ap_tvar_int_0] = temp_q0[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln66_15_fu_831_p2) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_40_fu_837_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_40_fu_837_p4[ap_tvar_int_1] = shl_ln66_15_fu_831_p2[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_436_p3 = x_0_i_reg_241[32'd1];

assign trunc_ln124_fu_293_p1 = bitNumber_assign_reg_217[2:0];

assign trunc_ln126_fu_297_p1 = bitNumber_assign_reg_217[6:0];

assign trunc_ln127_fu_277_p1 = state_offset[4:0];

assign trunc_ln66_fu_731_p1 = and_ln66_12_fu_725_p2[7:0];

assign trunc_ln93_1_fu_444_p1 = x_0_i_reg_241[23:0];

assign trunc_ln93_3_fu_448_p4 = {{x_0_i_reg_241[24:1]}};

assign trunc_ln93_fu_432_p1 = x_0_i_reg_241[0:0];

assign trunc_ln94_1_fu_492_p4 = {{y_fu_458_p2[25:2]}};

assign trunc_ln95_1_fu_536_p4 = {{y_1_fu_502_p2[27:4]}};

assign trunc_ln_fu_558_p4 = {{y_2_fu_546_p2[31:8]}};

assign x_7_fu_412_p2 = (x_0_i_reg_241 ^ prod_q0);

assign xor_ln66_12_fu_663_p2 = (zext_ln66_38_fu_639_p1 ^ 6'd31);

assign xor_ln66_13_fu_783_p2 = (zext_ln66_42_fu_774_p1 ^ 6'd31);

assign xor_ln66_14_fu_813_p2 = (select_ln66_23_fu_789_p3 ^ 6'd31);

assign xor_ln66_3_fu_750_p2 = (shl_ln66_fu_744_p2 ^ 8'd255);

assign xor_ln66_fu_735_p2 = (trunc_ln124_reg_945 ^ 3'd7);

assign xor_ln94_fu_486_p2 = (trunc_ln93_3_fu_448_p4 ^ trunc_ln93_1_fu_444_p1);

assign xor_ln95_2_fu_552_p2 = (xor_ln95_fu_530_p2 ^ trunc_ln95_1_fu_536_p4);

assign xor_ln95_fu_530_p2 = (xor_ln94_fu_486_p2 ^ trunc_ln94_1_fu_492_p4);

assign xor_ln98_1_fu_596_p2 = (xor_ln98_fu_590_p2 ^ tmp_fu_436_p3);

assign xor_ln98_2_fu_602_p2 = (tmp_37_fu_582_p3 ^ tmp_36_fu_568_p3);

assign xor_ln98_3_fu_608_p2 = (xor_ln98_2_fu_602_p2 ^ tmp_35_fu_522_p3);

assign xor_ln98_4_fu_614_p2 = (xor_ln98_3_fu_608_p2 ^ xor_ln98_1_fu_596_p2);

assign xor_ln98_fu_590_p2 = (trunc_ln93_fu_432_p1 ^ tmp_34_fu_478_p3);

assign y_1_fu_502_p2 = (zext_ln94_fu_474_p1 ^ y_fu_458_p2);

assign y_2_fu_546_p2 = (zext_ln95_fu_518_p1 ^ y_1_fu_502_p2);

assign y_3_fu_576_p2 = (xor_ln95_2_fu_552_p2 ^ trunc_ln_fu_558_p4);

assign y_fu_458_p2 = (zext_ln93_fu_428_p1 ^ x_0_i_reg_241);

assign zext_ln125_fu_321_p1 = ap_phi_mux_j_0_phi_fu_233_p4;

assign zext_ln126_fu_330_p1 = add_ln126_fu_325_p2;

assign zext_ln127_1_fu_334_p1 = ap_phi_mux_j_0_phi_fu_233_p4;

assign zext_ln127_2_fu_343_p1 = add_ln127_fu_338_p2;

assign zext_ln127_3_fu_353_p1 = add_ln127_1_fu_348_p2;

assign zext_ln127_fu_358_p1 = j_0_reg_229;

assign zext_ln134_1_fu_907_p1 = loop_0_reg_262;

assign zext_ln134_2_fu_916_p1 = add_ln134_reg_1038;

assign zext_ln134_fu_902_p1 = loop_0_reg_262;

assign zext_ln66_1_fu_740_p1 = xor_ln66_fu_735_p2;

assign zext_ln66_38_fu_639_p1 = start_pos_fu_624_p3;

assign zext_ln66_39_fu_643_p1 = or_ln66_6_fu_632_p2;

assign zext_ln66_40_fu_705_p1 = select_ln66_22_fu_691_p3;

assign zext_ln66_41_fu_709_p1 = sub_ln66_10_fu_699_p2;

assign zext_ln66_42_fu_774_p1 = start_pos_reg_1008;

assign zext_ln66_43_fu_777_p1 = or_ln66_6_reg_1014;

assign zext_ln66_44_fu_780_p1 = or_ln66_reg_1020;

assign zext_ln66_45_fu_819_p1 = select_ln66_25_fu_805_p3;

assign zext_ln66_46_fu_823_p1 = select_ln66_24_fu_797_p3;

assign zext_ln66_47_fu_827_p1 = xor_ln66_14_fu_813_p2;

assign zext_ln66_48_fu_880_p1 = tmp_38_reg_992;

assign zext_ln66_fu_407_p1 = adjSize_fu_397_p4;

assign zext_ln85_fu_370_p1 = i_0_i_reg_251;

assign zext_ln93_fu_428_p1 = lshr_ln_fu_418_p4;

assign zext_ln94_fu_474_p1 = lshr_ln1_fu_464_p4;

assign zext_ln95_fu_518_p1 = lshr_ln2_fu_508_p4;

assign zext_ln98_fu_620_p1 = xor_ln98_4_fu_614_p2;

always @ (posedge ap_clk) begin
    shl_ln_reg_950[1:0] <= 2'b00;
    temp_addr_2_reg_998[5:3] <= 3'b000;
    start_pos_reg_1008[2:0] <= 3'b000;
    or_ln66_6_reg_1014[2:0] <= 3'b111;
end

endmodule //matrix_mul_1
