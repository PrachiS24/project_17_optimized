// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module picnic_sign (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sk_data_address0,
        sk_data_ce0,
        sk_data_q0,
        sk_data_address1,
        sk_data_ce1,
        sk_data_q1,
        sk_pk_plaintext_address0,
        sk_pk_plaintext_ce0,
        sk_pk_plaintext_q0,
        sk_pk_plaintext_address1,
        sk_pk_plaintext_ce1,
        sk_pk_plaintext_q1,
        sk_pk_ciphertext_address0,
        sk_pk_ciphertext_ce0,
        sk_pk_ciphertext_q0,
        sk_pk_ciphertext_address1,
        sk_pk_ciphertext_ce1,
        sk_pk_ciphertext_q1,
        message_address0,
        message_ce0,
        message_q0,
        message_len,
        signature_address0,
        signature_ce0,
        signature_we0,
        signature_d0,
        signature_offset,
        viewOutputs_address0,
        viewOutputs_ce0,
        viewOutputs_we0,
        viewOutputs_d0,
        viewOutputs_q0,
        viewOutputs_address1,
        viewOutputs_ce1,
        viewOutputs_q1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] sk_data_address0;
output   sk_data_ce0;
input  [7:0] sk_data_q0;
output  [4:0] sk_data_address1;
output   sk_data_ce1;
input  [7:0] sk_data_q1;
output  [4:0] sk_pk_plaintext_address0;
output   sk_pk_plaintext_ce0;
input  [7:0] sk_pk_plaintext_q0;
output  [4:0] sk_pk_plaintext_address1;
output   sk_pk_plaintext_ce1;
input  [7:0] sk_pk_plaintext_q1;
output  [4:0] sk_pk_ciphertext_address0;
output   sk_pk_ciphertext_ce0;
input  [7:0] sk_pk_ciphertext_q0;
output  [4:0] sk_pk_ciphertext_address1;
output   sk_pk_ciphertext_ce1;
input  [7:0] sk_pk_ciphertext_q1;
output  [11:0] message_address0;
output   message_ce0;
input  [7:0] message_q0;
input  [63:0] message_len;
output  [15:0] signature_address0;
output   signature_ce0;
output   signature_we0;
output  [7:0] signature_d0;
input  [63:0] signature_offset;
output  [13:0] viewOutputs_address0;
output   viewOutputs_ce0;
output   viewOutputs_we0;
output  [31:0] viewOutputs_d0;
input  [31:0] viewOutputs_q0;
output  [13:0] viewOutputs_address1;
output   viewOutputs_ce1;
input  [31:0] viewOutputs_q1;
output  [31:0] ap_return_0;
output  [63:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] sk_data_address0;
reg sk_data_ce0;
reg[4:0] sk_data_address1;
reg sk_data_ce1;
reg[4:0] sk_pk_plaintext_address0;
reg sk_pk_plaintext_ce0;
reg[4:0] sk_pk_plaintext_address1;
reg sk_pk_plaintext_ce1;
reg[4:0] sk_pk_ciphertext_address0;
reg sk_pk_ciphertext_ce0;
reg[4:0] sk_pk_ciphertext_address1;
reg sk_pk_ciphertext_ce1;
reg[31:0] ap_return_0;
reg[63:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] add_ln269_fu_434_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln269_1_fu_451_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] add_ln269_2_fu_468_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_fu_485_p3;
wire   [4:0] trunc_ln270_fu_500_p1;
reg   [4:0] trunc_ln270_reg_662;
reg   [2:0] trunc_ln271_1_reg_673;
wire   [5:0] loop_fu_527_p2;
reg   [5:0] loop_reg_698;
reg   [7:0] sk_pk_ciphertext_loa_reg_703;
wire    ap_CS_fsm_state6;
reg   [7:0] sk_pk_ciphertext_loa_1_reg_708;
reg   [7:0] sk_pk_plaintext_load_reg_723;
reg   [7:0] sk_pk_plaintext_load_1_reg_728;
reg   [7:0] sk_data_load_reg_743;
reg   [7:0] sk_data_load_1_reg_748;
wire   [0:0] grp_sign_picnic1_fu_390_ap_return;
reg   [0:0] ret2_reg_763;
wire    ap_CS_fsm_state8;
wire    grp_sign_picnic1_fu_390_ap_ready;
wire    grp_sign_picnic1_fu_390_ap_done;
reg   [11:0] sig_0_proofs_seed1_address0;
reg    sig_0_proofs_seed1_ce0;
reg    sig_0_proofs_seed1_we0;
wire   [7:0] sig_0_proofs_seed1_q0;
reg   [11:0] sig_0_proofs_seed2_address0;
reg    sig_0_proofs_seed2_ce0;
reg    sig_0_proofs_seed2_we0;
wire   [7:0] sig_0_proofs_seed2_q0;
reg   [9:0] sig_0_proofs_inputS_address0;
reg    sig_0_proofs_inputS_ce0;
reg    sig_0_proofs_inputS_we0;
wire   [31:0] sig_0_proofs_inputS_q0;
reg   [14:0] sig_0_proofs_commun_address0;
reg    sig_0_proofs_commun_ce0;
reg    sig_0_proofs_commun_we0;
wire   [7:0] sig_0_proofs_commun_q0;
reg   [12:0] sig_0_proofs_view3C_address0;
reg    sig_0_proofs_view3C_ce0;
reg    sig_0_proofs_view3C_we0;
wire   [7:0] sig_0_proofs_view3C_q0;
reg   [5:0] sig_0_challengeBits_address0;
reg    sig_0_challengeBits_ce0;
reg    sig_0_challengeBits_we0;
wire   [7:0] sig_0_challengeBits_q0;
reg   [4:0] sig_0_salt_address0;
reg    sig_0_salt_ce0;
reg    sig_0_salt_we0;
wire   [7:0] sig_0_salt_q0;
reg   [2:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [31:0] temp_d0;
wire   [31:0] temp_q0;
reg   [2:0] temp2_address0;
reg    temp2_ce0;
reg    temp2_we0;
reg   [31:0] temp2_d0;
wire   [31:0] temp2_q0;
reg   [2:0] temp3_address0;
reg    temp3_ce0;
reg    temp3_we0;
reg   [31:0] temp3_d0;
wire   [31:0] temp3_q0;
wire    grp_sign_picnic1_fu_390_ap_start;
wire    grp_sign_picnic1_fu_390_ap_idle;
wire   [2:0] grp_sign_picnic1_fu_390_privateKey_address0;
wire    grp_sign_picnic1_fu_390_privateKey_ce0;
wire   [2:0] grp_sign_picnic1_fu_390_pubKey_address0;
wire    grp_sign_picnic1_fu_390_pubKey_ce0;
wire   [2:0] grp_sign_picnic1_fu_390_plaintext_address0;
wire    grp_sign_picnic1_fu_390_plaintext_ce0;
wire   [11:0] grp_sign_picnic1_fu_390_message_address0;
wire    grp_sign_picnic1_fu_390_message_ce0;
wire   [11:0] grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0;
wire   [7:0] grp_sign_picnic1_fu_390_sig_0_proofs_seed1_d0;
wire   [11:0] grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0;
wire   [7:0] grp_sign_picnic1_fu_390_sig_0_proofs_seed2_d0;
wire   [9:0] grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0;
wire   [31:0] grp_sign_picnic1_fu_390_sig_0_proofs_inputS_d0;
wire   [14:0] grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0;
wire   [7:0] grp_sign_picnic1_fu_390_sig_0_proofs_commun_d0;
wire   [12:0] grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0;
wire   [7:0] grp_sign_picnic1_fu_390_sig_0_proofs_view3C_d0;
wire   [5:0] grp_sign_picnic1_fu_390_sig_0_challengeBits_address0;
wire    grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_challengeBits_we0;
wire   [7:0] grp_sign_picnic1_fu_390_sig_0_challengeBits_d0;
wire   [4:0] grp_sign_picnic1_fu_390_sig_0_salt_address0;
wire    grp_sign_picnic1_fu_390_sig_0_salt_ce0;
wire    grp_sign_picnic1_fu_390_sig_0_salt_we0;
wire   [7:0] grp_sign_picnic1_fu_390_sig_0_salt_d0;
wire   [13:0] grp_sign_picnic1_fu_390_viewOutputs_address0;
wire    grp_sign_picnic1_fu_390_viewOutputs_ce0;
wire    grp_sign_picnic1_fu_390_viewOutputs_we0;
wire   [31:0] grp_sign_picnic1_fu_390_viewOutputs_d0;
wire   [13:0] grp_sign_picnic1_fu_390_viewOutputs_address1;
wire    grp_sign_picnic1_fu_390_viewOutputs_ce1;
wire    grp_serializeSignature_fu_419_ap_start;
wire    grp_serializeSignature_fu_419_ap_done;
wire    grp_serializeSignature_fu_419_ap_idle;
wire    grp_serializeSignature_fu_419_ap_ready;
wire   [11:0] grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0;
wire    grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0;
wire   [11:0] grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0;
wire    grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0;
wire   [9:0] grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0;
wire    grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0;
wire   [14:0] grp_serializeSignature_fu_419_sig_0_proofs_commun_address0;
wire    grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0;
wire   [12:0] grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0;
wire    grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0;
wire   [5:0] grp_serializeSignature_fu_419_sig_0_challengeBits_address0;
wire    grp_serializeSignature_fu_419_sig_0_challengeBits_ce0;
wire   [4:0] grp_serializeSignature_fu_419_sig_0_salt_address0;
wire    grp_serializeSignature_fu_419_sig_0_salt_ce0;
wire   [15:0] grp_serializeSignature_fu_419_sigBytes_address0;
wire    grp_serializeSignature_fu_419_sigBytes_ce0;
wire    grp_serializeSignature_fu_419_sigBytes_we0;
wire   [7:0] grp_serializeSignature_fu_419_sigBytes_d0;
wire   [15:0] grp_serializeSignature_fu_419_ap_return;
reg   [2:0] phi_ln269_reg_323;
wire   [0:0] icmp_ln269_fu_445_p2;
reg   [2:0] phi_ln269_1_reg_334;
wire   [0:0] icmp_ln269_1_fu_462_p2;
reg   [2:0] phi_ln269_2_reg_345;
wire   [0:0] icmp_ln269_2_fu_479_p2;
reg   [5:0] loop_0_reg_356;
wire    ap_CS_fsm_state7;
reg   [15:0] ap_phi_mux_signature_len_write_s_phi_fu_371_p4;
reg   [15:0] signature_len_write_s_reg_367;
wire    ap_CS_fsm_state10;
reg    ap_block_state10_on_subcall_done;
reg   [0:0] ap_phi_mux_p_0_phi_fu_382_p4;
reg   [0:0] p_0_reg_378;
reg    grp_sign_picnic1_fu_390_ap_start_reg;
reg    grp_serializeSignature_fu_419_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln269_fu_440_p1;
wire   [63:0] zext_ln269_1_fu_457_p1;
wire   [63:0] zext_ln269_2_fu_474_p1;
wire   [63:0] zext_ln271_fu_493_p1;
wire   [63:0] zext_ln271_1_fu_510_p1;
wire   [63:0] zext_ln271_2_fu_538_p1;
wire   [63:0] zext_ln271_3_fu_550_p1;
wire   [63:0] zext_ln271_4_fu_568_p1;
wire   [31:0] or_ln271_5_fu_557_p5;
wire   [31:0] or_ln272_2_fu_574_p5;
wire   [31:0] or_ln273_2_fu_585_p5;
wire   [4:0] or_ln271_fu_504_p2;
wire   [4:0] or_ln271_1_fu_533_p2;
wire   [4:0] or_ln271_2_fu_545_p2;
wire   [31:0] select_ln249_fu_600_p3;
wire   [63:0] zext_ln249_fu_596_p1;
reg   [31:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 grp_sign_picnic1_fu_390_ap_start_reg = 1'b0;
#0 grp_serializeSignature_fu_419_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 64'd0;
end

picnic_sign_sig_0bCo #(
    .DataWidth( 8 ),
    .AddressRange( 3504 ),
    .AddressWidth( 12 ))
sig_0_proofs_seed1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_proofs_seed1_address0),
    .ce0(sig_0_proofs_seed1_ce0),
    .we0(sig_0_proofs_seed1_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_proofs_seed1_d0),
    .q0(sig_0_proofs_seed1_q0)
);

picnic_sign_sig_0bCo #(
    .DataWidth( 8 ),
    .AddressRange( 3504 ),
    .AddressWidth( 12 ))
sig_0_proofs_seed2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_proofs_seed2_address0),
    .ce0(sig_0_proofs_seed2_ce0),
    .we0(sig_0_proofs_seed2_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_proofs_seed2_d0),
    .q0(sig_0_proofs_seed2_q0)
);

picnic_sign_sig_0bEo #(
    .DataWidth( 32 ),
    .AddressRange( 876 ),
    .AddressWidth( 10 ))
sig_0_proofs_inputS_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_proofs_inputS_address0),
    .ce0(sig_0_proofs_inputS_ce0),
    .we0(sig_0_proofs_inputS_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_proofs_inputS_d0),
    .q0(sig_0_proofs_inputS_q0)
);

picnic_sign_sig_0bFp #(
    .DataWidth( 8 ),
    .AddressRange( 16425 ),
    .AddressWidth( 15 ))
sig_0_proofs_commun_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_proofs_commun_address0),
    .ce0(sig_0_proofs_commun_ce0),
    .we0(sig_0_proofs_commun_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_proofs_commun_d0),
    .q0(sig_0_proofs_commun_q0)
);

picnic_sign_sig_0bGp #(
    .DataWidth( 8 ),
    .AddressRange( 7008 ),
    .AddressWidth( 13 ))
sig_0_proofs_view3C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_proofs_view3C_address0),
    .ce0(sig_0_proofs_view3C_ce0),
    .we0(sig_0_proofs_view3C_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_proofs_view3C_d0),
    .q0(sig_0_proofs_view3C_q0)
);

picnic_sign_sig_0bHp #(
    .DataWidth( 8 ),
    .AddressRange( 55 ),
    .AddressWidth( 6 ))
sig_0_challengeBits_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_challengeBits_address0),
    .ce0(sig_0_challengeBits_ce0),
    .we0(sig_0_challengeBits_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_challengeBits_d0),
    .q0(sig_0_challengeBits_q0)
);

H3_2_hash #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
sig_0_salt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sig_0_salt_address0),
    .ce0(sig_0_salt_ce0),
    .we0(sig_0_salt_we0),
    .d0(grp_sign_picnic1_fu_390_sig_0_salt_d0),
    .q0(sig_0_salt_q0)
);

picnic_sign_temp #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

picnic_sign_temp #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_address0),
    .ce0(temp2_ce0),
    .we0(temp2_we0),
    .d0(temp2_d0),
    .q0(temp2_q0)
);

picnic_sign_temp #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp3_address0),
    .ce0(temp3_ce0),
    .we0(temp3_we0),
    .d0(temp3_d0),
    .q0(temp3_q0)
);

sign_picnic1 grp_sign_picnic1_fu_390(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sign_picnic1_fu_390_ap_start),
    .ap_done(grp_sign_picnic1_fu_390_ap_done),
    .ap_idle(grp_sign_picnic1_fu_390_ap_idle),
    .ap_ready(grp_sign_picnic1_fu_390_ap_ready),
    .privateKey_address0(grp_sign_picnic1_fu_390_privateKey_address0),
    .privateKey_ce0(grp_sign_picnic1_fu_390_privateKey_ce0),
    .privateKey_q0(temp3_q0),
    .pubKey_address0(grp_sign_picnic1_fu_390_pubKey_address0),
    .pubKey_ce0(grp_sign_picnic1_fu_390_pubKey_ce0),
    .pubKey_q0(temp_q0),
    .plaintext_address0(grp_sign_picnic1_fu_390_plaintext_address0),
    .plaintext_ce0(grp_sign_picnic1_fu_390_plaintext_ce0),
    .plaintext_q0(temp2_q0),
    .message_address0(grp_sign_picnic1_fu_390_message_address0),
    .message_ce0(grp_sign_picnic1_fu_390_message_ce0),
    .message_q0(message_q0),
    .messageByteLength(message_len),
    .sig_0_proofs_seed1_address0(grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0),
    .sig_0_proofs_seed1_ce0(grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0),
    .sig_0_proofs_seed1_we0(grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0),
    .sig_0_proofs_seed1_d0(grp_sign_picnic1_fu_390_sig_0_proofs_seed1_d0),
    .sig_0_proofs_seed2_address0(grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0),
    .sig_0_proofs_seed2_ce0(grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0),
    .sig_0_proofs_seed2_we0(grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0),
    .sig_0_proofs_seed2_d0(grp_sign_picnic1_fu_390_sig_0_proofs_seed2_d0),
    .sig_0_proofs_inputS_address0(grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0),
    .sig_0_proofs_inputS_ce0(grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0),
    .sig_0_proofs_inputS_we0(grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0),
    .sig_0_proofs_inputS_d0(grp_sign_picnic1_fu_390_sig_0_proofs_inputS_d0),
    .sig_0_proofs_commun_address0(grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0),
    .sig_0_proofs_commun_ce0(grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0),
    .sig_0_proofs_commun_we0(grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0),
    .sig_0_proofs_commun_d0(grp_sign_picnic1_fu_390_sig_0_proofs_commun_d0),
    .sig_0_proofs_view3C_address0(grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0),
    .sig_0_proofs_view3C_ce0(grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0),
    .sig_0_proofs_view3C_we0(grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0),
    .sig_0_proofs_view3C_d0(grp_sign_picnic1_fu_390_sig_0_proofs_view3C_d0),
    .sig_0_challengeBits_address0(grp_sign_picnic1_fu_390_sig_0_challengeBits_address0),
    .sig_0_challengeBits_ce0(grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0),
    .sig_0_challengeBits_we0(grp_sign_picnic1_fu_390_sig_0_challengeBits_we0),
    .sig_0_challengeBits_d0(grp_sign_picnic1_fu_390_sig_0_challengeBits_d0),
    .sig_0_challengeBits_q0(sig_0_challengeBits_q0),
    .sig_0_salt_address0(grp_sign_picnic1_fu_390_sig_0_salt_address0),
    .sig_0_salt_ce0(grp_sign_picnic1_fu_390_sig_0_salt_ce0),
    .sig_0_salt_we0(grp_sign_picnic1_fu_390_sig_0_salt_we0),
    .sig_0_salt_d0(grp_sign_picnic1_fu_390_sig_0_salt_d0),
    .sig_0_salt_q0(sig_0_salt_q0),
    .viewOutputs_address0(grp_sign_picnic1_fu_390_viewOutputs_address0),
    .viewOutputs_ce0(grp_sign_picnic1_fu_390_viewOutputs_ce0),
    .viewOutputs_we0(grp_sign_picnic1_fu_390_viewOutputs_we0),
    .viewOutputs_d0(grp_sign_picnic1_fu_390_viewOutputs_d0),
    .viewOutputs_q0(viewOutputs_q0),
    .viewOutputs_address1(grp_sign_picnic1_fu_390_viewOutputs_address1),
    .viewOutputs_ce1(grp_sign_picnic1_fu_390_viewOutputs_ce1),
    .viewOutputs_q1(viewOutputs_q1),
    .ap_return(grp_sign_picnic1_fu_390_ap_return)
);

serializeSignature grp_serializeSignature_fu_419(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_serializeSignature_fu_419_ap_start),
    .ap_done(grp_serializeSignature_fu_419_ap_done),
    .ap_idle(grp_serializeSignature_fu_419_ap_idle),
    .ap_ready(grp_serializeSignature_fu_419_ap_ready),
    .sig_0_proofs_seed1_address0(grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0),
    .sig_0_proofs_seed1_ce0(grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0),
    .sig_0_proofs_seed1_q0(sig_0_proofs_seed1_q0),
    .sig_0_proofs_seed2_address0(grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0),
    .sig_0_proofs_seed2_ce0(grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0),
    .sig_0_proofs_seed2_q0(sig_0_proofs_seed2_q0),
    .sig_0_proofs_inputS_address0(grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0),
    .sig_0_proofs_inputS_ce0(grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0),
    .sig_0_proofs_inputS_q0(sig_0_proofs_inputS_q0),
    .sig_0_proofs_commun_address0(grp_serializeSignature_fu_419_sig_0_proofs_commun_address0),
    .sig_0_proofs_commun_ce0(grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0),
    .sig_0_proofs_commun_q0(sig_0_proofs_commun_q0),
    .sig_0_proofs_view3C_address0(grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0),
    .sig_0_proofs_view3C_ce0(grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0),
    .sig_0_proofs_view3C_q0(sig_0_proofs_view3C_q0),
    .sig_0_challengeBits_address0(grp_serializeSignature_fu_419_sig_0_challengeBits_address0),
    .sig_0_challengeBits_ce0(grp_serializeSignature_fu_419_sig_0_challengeBits_ce0),
    .sig_0_challengeBits_q0(sig_0_challengeBits_q0),
    .sig_0_salt_address0(grp_serializeSignature_fu_419_sig_0_salt_address0),
    .sig_0_salt_ce0(grp_serializeSignature_fu_419_sig_0_salt_ce0),
    .sig_0_salt_q0(sig_0_salt_q0),
    .sigBytes_address0(grp_serializeSignature_fu_419_sigBytes_address0),
    .sigBytes_ce0(grp_serializeSignature_fu_419_sigBytes_ce0),
    .sigBytes_we0(grp_serializeSignature_fu_419_sigBytes_we0),
    .sigBytes_d0(grp_serializeSignature_fu_419_sigBytes_d0),
    .sigBytes_offset(signature_offset),
    .ap_return(grp_serializeSignature_fu_419_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_return_0_preg <= select_ln249_fu_600_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
        ap_return_1_preg[12] <= 1'b0;
        ap_return_1_preg[13] <= 1'b0;
        ap_return_1_preg[14] <= 1'b0;
        ap_return_1_preg[15] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                        ap_return_1_preg[15 : 0] <= zext_ln249_fu_596_p1[15 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_serializeSignature_fu_419_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_serializeSignature_fu_419_ap_start_reg <= 1'b1;
        end else if ((grp_serializeSignature_fu_419_ap_ready == 1'b1)) begin
            grp_serializeSignature_fu_419_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sign_picnic1_fu_390_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (tmp_fu_485_p3 == 1'd1))) begin
            grp_sign_picnic1_fu_390_ap_start_reg <= 1'b1;
        end else if ((grp_sign_picnic1_fu_390_ap_ready == 1'b1)) begin
            grp_sign_picnic1_fu_390_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_2_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        loop_0_reg_356 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        loop_0_reg_356 <= loop_reg_698;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        p_0_reg_378 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_sign_picnic1_fu_390_ap_done == 1'b1) & (grp_sign_picnic1_fu_390_ap_return == 1'd1))) begin
        p_0_reg_378 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln269_1_reg_334 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln269_1_fu_462_p2 == 1'd0))) begin
        phi_ln269_1_reg_334 <= add_ln269_1_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_1_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln269_2_reg_345 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln269_2_fu_479_p2 == 1'd0))) begin
        phi_ln269_2_reg_345 <= add_ln269_2_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln269_fu_445_p2 == 1'd0))) begin
        phi_ln269_reg_323 <= add_ln269_fu_434_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln269_reg_323 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        signature_len_write_s_reg_367 <= grp_serializeSignature_fu_419_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_sign_picnic1_fu_390_ap_done == 1'b1) & (grp_sign_picnic1_fu_390_ap_return == 1'd1))) begin
        signature_len_write_s_reg_367 <= 16'd34036;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_fu_485_p3 == 1'd0))) begin
        loop_reg_698 <= loop_fu_527_p2;
        trunc_ln270_reg_662 <= trunc_ln270_fu_500_p1;
        trunc_ln271_1_reg_673 <= {{loop_0_reg_356[4:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (grp_sign_picnic1_fu_390_ap_done == 1'b1))) begin
        ret2_reg_763 <= grp_sign_picnic1_fu_390_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_data_load_1_reg_748 <= sk_data_q1;
        sk_data_load_reg_743 <= sk_data_q0;
        sk_pk_ciphertext_loa_1_reg_708 <= sk_pk_ciphertext_q1;
        sk_pk_ciphertext_loa_reg_703 <= sk_pk_ciphertext_q0;
        sk_pk_plaintext_load_1_reg_728 <= sk_pk_plaintext_q1;
        sk_pk_plaintext_load_reg_723 <= sk_pk_plaintext_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        ap_phi_mux_p_0_phi_fu_382_p4 = 1'd0;
    end else begin
        ap_phi_mux_p_0_phi_fu_382_p4 = p_0_reg_378;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        ap_phi_mux_signature_len_write_s_phi_fu_371_p4 = grp_serializeSignature_fu_419_ap_return;
    end else begin
        ap_phi_mux_signature_len_write_s_phi_fu_371_p4 = signature_len_write_s_reg_367;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_return_0 = select_ln249_fu_600_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_return_1 = zext_ln249_fu_596_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_challengeBits_address0 = grp_serializeSignature_fu_419_sig_0_challengeBits_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_challengeBits_address0 = grp_sign_picnic1_fu_390_sig_0_challengeBits_address0;
    end else begin
        sig_0_challengeBits_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_challengeBits_ce0 = grp_serializeSignature_fu_419_sig_0_challengeBits_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_challengeBits_ce0 = grp_sign_picnic1_fu_390_sig_0_challengeBits_ce0;
    end else begin
        sig_0_challengeBits_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_challengeBits_we0 = grp_sign_picnic1_fu_390_sig_0_challengeBits_we0;
    end else begin
        sig_0_challengeBits_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_commun_address0 = grp_serializeSignature_fu_419_sig_0_proofs_commun_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_commun_address0 = grp_sign_picnic1_fu_390_sig_0_proofs_commun_address0;
    end else begin
        sig_0_proofs_commun_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_commun_ce0 = grp_serializeSignature_fu_419_sig_0_proofs_commun_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_commun_ce0 = grp_sign_picnic1_fu_390_sig_0_proofs_commun_ce0;
    end else begin
        sig_0_proofs_commun_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_commun_we0 = grp_sign_picnic1_fu_390_sig_0_proofs_commun_we0;
    end else begin
        sig_0_proofs_commun_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_inputS_address0 = grp_serializeSignature_fu_419_sig_0_proofs_inputS_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_inputS_address0 = grp_sign_picnic1_fu_390_sig_0_proofs_inputS_address0;
    end else begin
        sig_0_proofs_inputS_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_inputS_ce0 = grp_serializeSignature_fu_419_sig_0_proofs_inputS_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_inputS_ce0 = grp_sign_picnic1_fu_390_sig_0_proofs_inputS_ce0;
    end else begin
        sig_0_proofs_inputS_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_inputS_we0 = grp_sign_picnic1_fu_390_sig_0_proofs_inputS_we0;
    end else begin
        sig_0_proofs_inputS_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_seed1_address0 = grp_serializeSignature_fu_419_sig_0_proofs_seed1_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_seed1_address0 = grp_sign_picnic1_fu_390_sig_0_proofs_seed1_address0;
    end else begin
        sig_0_proofs_seed1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_seed1_ce0 = grp_serializeSignature_fu_419_sig_0_proofs_seed1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_seed1_ce0 = grp_sign_picnic1_fu_390_sig_0_proofs_seed1_ce0;
    end else begin
        sig_0_proofs_seed1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_seed1_we0 = grp_sign_picnic1_fu_390_sig_0_proofs_seed1_we0;
    end else begin
        sig_0_proofs_seed1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_seed2_address0 = grp_serializeSignature_fu_419_sig_0_proofs_seed2_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_seed2_address0 = grp_sign_picnic1_fu_390_sig_0_proofs_seed2_address0;
    end else begin
        sig_0_proofs_seed2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_seed2_ce0 = grp_serializeSignature_fu_419_sig_0_proofs_seed2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_seed2_ce0 = grp_sign_picnic1_fu_390_sig_0_proofs_seed2_ce0;
    end else begin
        sig_0_proofs_seed2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_seed2_we0 = grp_sign_picnic1_fu_390_sig_0_proofs_seed2_we0;
    end else begin
        sig_0_proofs_seed2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_view3C_address0 = grp_serializeSignature_fu_419_sig_0_proofs_view3C_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_view3C_address0 = grp_sign_picnic1_fu_390_sig_0_proofs_view3C_address0;
    end else begin
        sig_0_proofs_view3C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_proofs_view3C_ce0 = grp_serializeSignature_fu_419_sig_0_proofs_view3C_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_view3C_ce0 = grp_sign_picnic1_fu_390_sig_0_proofs_view3C_ce0;
    end else begin
        sig_0_proofs_view3C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_proofs_view3C_we0 = grp_sign_picnic1_fu_390_sig_0_proofs_view3C_we0;
    end else begin
        sig_0_proofs_view3C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_salt_address0 = grp_serializeSignature_fu_419_sig_0_salt_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_salt_address0 = grp_sign_picnic1_fu_390_sig_0_salt_address0;
    end else begin
        sig_0_salt_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (ret2_reg_763 == 1'd0))) begin
        sig_0_salt_ce0 = grp_serializeSignature_fu_419_sig_0_salt_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_salt_ce0 = grp_sign_picnic1_fu_390_sig_0_salt_ce0;
    end else begin
        sig_0_salt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sig_0_salt_we0 = grp_sign_picnic1_fu_390_sig_0_salt_we0;
    end else begin
        sig_0_salt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_data_address0 = zext_ln271_2_fu_538_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_data_address0 = zext_ln271_fu_493_p1;
    end else begin
        sk_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_data_address1 = zext_ln271_3_fu_550_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_data_address1 = zext_ln271_1_fu_510_p1;
    end else begin
        sk_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sk_data_ce0 = 1'b1;
    end else begin
        sk_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sk_data_ce1 = 1'b1;
    end else begin
        sk_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_pk_ciphertext_address0 = zext_ln271_2_fu_538_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_pk_ciphertext_address0 = zext_ln271_fu_493_p1;
    end else begin
        sk_pk_ciphertext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_pk_ciphertext_address1 = zext_ln271_3_fu_550_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_pk_ciphertext_address1 = zext_ln271_1_fu_510_p1;
    end else begin
        sk_pk_ciphertext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sk_pk_ciphertext_ce0 = 1'b1;
    end else begin
        sk_pk_ciphertext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sk_pk_ciphertext_ce1 = 1'b1;
    end else begin
        sk_pk_ciphertext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_pk_plaintext_address0 = zext_ln271_2_fu_538_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_pk_plaintext_address0 = zext_ln271_fu_493_p1;
    end else begin
        sk_pk_plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sk_pk_plaintext_address1 = zext_ln271_3_fu_550_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sk_pk_plaintext_address1 = zext_ln271_1_fu_510_p1;
    end else begin
        sk_pk_plaintext_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sk_pk_plaintext_ce0 = 1'b1;
    end else begin
        sk_pk_plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        sk_pk_plaintext_ce1 = 1'b1;
    end else begin
        sk_pk_plaintext_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp2_address0 = zext_ln271_4_fu_568_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp2_address0 = zext_ln269_1_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp2_address0 = grp_sign_picnic1_fu_390_plaintext_address0;
    end else begin
        temp2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        temp2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp2_ce0 = grp_sign_picnic1_fu_390_plaintext_ce0;
    end else begin
        temp2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp2_d0 = or_ln272_2_fu_574_p5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp2_d0 = 32'd0;
    end else begin
        temp2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        temp2_we0 = 1'b1;
    end else begin
        temp2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp3_address0 = zext_ln271_4_fu_568_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp3_address0 = zext_ln269_2_fu_474_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp3_address0 = grp_sign_picnic1_fu_390_privateKey_address0;
    end else begin
        temp3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        temp3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp3_ce0 = grp_sign_picnic1_fu_390_privateKey_ce0;
    end else begin
        temp3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp3_d0 = or_ln273_2_fu_585_p5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp3_d0 = 32'd0;
    end else begin
        temp3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        temp3_we0 = 1'b1;
    end else begin
        temp3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_address0 = zext_ln271_4_fu_568_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_address0 = zext_ln269_fu_440_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_address0 = grp_sign_picnic1_fu_390_pubKey_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_ce0 = grp_sign_picnic1_fu_390_pubKey_ce0;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_d0 = or_ln271_5_fu_557_p5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_d0 = 32'd0;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln269_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln269_1_fu_462_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln269_2_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_fu_485_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_sign_picnic1_fu_390_ap_done == 1'b1) & (grp_sign_picnic1_fu_390_ap_return == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else if (((1'b1 == ap_CS_fsm_state8) & (grp_sign_picnic1_fu_390_ap_done == 1'b1) & (grp_sign_picnic1_fu_390_ap_return == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln269_1_fu_451_p2 = (phi_ln269_1_reg_334 + 3'd1);

assign add_ln269_2_fu_468_p2 = (phi_ln269_2_reg_345 + 3'd1);

assign add_ln269_fu_434_p2 = (phi_ln269_reg_323 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_serializeSignature_fu_419_ap_done == 1'b0) & (ret2_reg_763 == 1'd0));
end

assign grp_serializeSignature_fu_419_ap_start = grp_serializeSignature_fu_419_ap_start_reg;

assign grp_sign_picnic1_fu_390_ap_start = grp_sign_picnic1_fu_390_ap_start_reg;

assign icmp_ln269_1_fu_462_p2 = ((phi_ln269_1_reg_334 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln269_2_fu_479_p2 = ((phi_ln269_2_reg_345 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_445_p2 = ((phi_ln269_reg_323 == 3'd7) ? 1'b1 : 1'b0);

assign loop_fu_527_p2 = (6'd4 + loop_0_reg_356);

assign message_address0 = grp_sign_picnic1_fu_390_message_address0;

assign message_ce0 = grp_sign_picnic1_fu_390_message_ce0;

assign or_ln271_1_fu_533_p2 = (trunc_ln270_reg_662 | 5'd2);

assign or_ln271_2_fu_545_p2 = (trunc_ln270_reg_662 | 5'd3);

assign or_ln271_5_fu_557_p5 = {{{{sk_pk_ciphertext_q1}, {sk_pk_ciphertext_q0}}, {sk_pk_ciphertext_loa_1_reg_708}}, {sk_pk_ciphertext_loa_reg_703}};

assign or_ln271_fu_504_p2 = (trunc_ln270_fu_500_p1 | 5'd1);

assign or_ln272_2_fu_574_p5 = {{{{sk_pk_plaintext_q1}, {sk_pk_plaintext_q0}}, {sk_pk_plaintext_load_1_reg_728}}, {sk_pk_plaintext_load_reg_723}};

assign or_ln273_2_fu_585_p5 = {{{{sk_data_q1}, {sk_data_q0}}, {sk_data_load_1_reg_748}}, {sk_data_load_reg_743}};

assign select_ln249_fu_600_p3 = ((ap_phi_mux_p_0_phi_fu_382_p4[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign signature_address0 = grp_serializeSignature_fu_419_sigBytes_address0;

assign signature_ce0 = grp_serializeSignature_fu_419_sigBytes_ce0;

assign signature_d0 = grp_serializeSignature_fu_419_sigBytes_d0;

assign signature_we0 = grp_serializeSignature_fu_419_sigBytes_we0;

assign tmp_fu_485_p3 = loop_0_reg_356[32'd5];

assign trunc_ln270_fu_500_p1 = loop_0_reg_356[4:0];

assign viewOutputs_address0 = grp_sign_picnic1_fu_390_viewOutputs_address0;

assign viewOutputs_address1 = grp_sign_picnic1_fu_390_viewOutputs_address1;

assign viewOutputs_ce0 = grp_sign_picnic1_fu_390_viewOutputs_ce0;

assign viewOutputs_ce1 = grp_sign_picnic1_fu_390_viewOutputs_ce1;

assign viewOutputs_d0 = grp_sign_picnic1_fu_390_viewOutputs_d0;

assign viewOutputs_we0 = grp_sign_picnic1_fu_390_viewOutputs_we0;

assign zext_ln249_fu_596_p1 = ap_phi_mux_signature_len_write_s_phi_fu_371_p4;

assign zext_ln269_1_fu_457_p1 = phi_ln269_1_reg_334;

assign zext_ln269_2_fu_474_p1 = phi_ln269_2_reg_345;

assign zext_ln269_fu_440_p1 = phi_ln269_reg_323;

assign zext_ln271_1_fu_510_p1 = or_ln271_fu_504_p2;

assign zext_ln271_2_fu_538_p1 = or_ln271_1_fu_533_p2;

assign zext_ln271_3_fu_550_p1 = or_ln271_2_fu_545_p2;

assign zext_ln271_4_fu_568_p1 = trunc_ln271_1_reg_673;

assign zext_ln271_fu_493_p1 = loop_0_reg_356;

always @ (posedge ap_clk) begin
    ap_return_1_preg[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //picnic_sign
