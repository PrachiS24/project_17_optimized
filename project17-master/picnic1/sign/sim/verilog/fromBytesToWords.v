// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fromBytesToWords (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stateAsWords_address0,
        stateAsWords_ce0,
        stateAsWords_we0,
        stateAsWords_d0,
        stateAsWords_q0,
        state_address0,
        state_ce0,
        state_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] stateAsWords_address0;
output   stateAsWords_ce0;
output   stateAsWords_we0;
output  [63:0] stateAsWords_d0;
input  [63:0] stateAsWords_q0;
output  [7:0] state_address0;
output   state_ce0;
input  [7:0] state_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] stateAsWords_address0;
reg stateAsWords_ce0;
reg stateAsWords_we0;
reg[63:0] stateAsWords_d0;
reg state_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln269_fu_98_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_fu_104_p2;
reg   [4:0] i_reg_186;
reg   [4:0] stateAsWords_addr_reg_191;
wire   [7:0] shl_ln272_1_fu_115_p3;
reg   [7:0] shl_ln272_1_reg_196;
wire   [3:0] j_fu_129_p2;
reg   [3:0] j_reg_204;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln271_fu_123_p2;
reg   [4:0] i_0_reg_75;
wire    ap_CS_fsm_state5;
reg   [3:0] j_0_reg_86;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln270_fu_110_p1;
wire   [63:0] zext_ln272_fu_144_p1;
wire   [63:0] or_ln272_fu_175_p2;
wire   [7:0] zext_ln271_fu_135_p1;
wire   [7:0] add_ln272_fu_139_p2;
wire   [2:0] trunc_ln272_fu_153_p1;
wire   [5:0] shl_ln_fu_157_p3;
wire   [63:0] zext_ln272_1_fu_149_p1;
wire   [63:0] zext_ln272_2_fu_165_p1;
wire   [63:0] shl_ln272_fu_169_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_75 <= i_reg_186;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_75 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_86 <= j_reg_204;
    end else if (((icmp_ln269_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_86 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_186 <= i_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_204 <= j_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln272_1_reg_196[7 : 3] <= shl_ln272_1_fu_115_p3[7 : 3];
        stateAsWords_addr_reg_191 <= zext_ln270_fu_110_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln269_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln269_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        stateAsWords_address0 = stateAsWords_addr_reg_191;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        stateAsWords_address0 = zext_ln270_fu_110_p1;
    end else begin
        stateAsWords_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        stateAsWords_ce0 = 1'b1;
    end else begin
        stateAsWords_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stateAsWords_d0 = or_ln272_fu_175_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        stateAsWords_d0 = 64'd0;
    end else begin
        stateAsWords_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln269_fu_98_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        stateAsWords_we0 = 1'b1;
    end else begin
        stateAsWords_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln269_fu_98_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln271_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln272_fu_139_p2 = (shl_ln272_1_reg_196 + zext_ln271_fu_135_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_fu_104_p2 = (i_0_reg_75 + 5'd1);

assign icmp_ln269_fu_98_p2 = ((i_0_reg_75 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln271_fu_123_p2 = ((j_0_reg_86 == 4'd8) ? 1'b1 : 1'b0);

assign j_fu_129_p2 = (j_0_reg_86 + 4'd1);

assign or_ln272_fu_175_p2 = (stateAsWords_q0 | shl_ln272_fu_169_p2);

assign shl_ln272_1_fu_115_p3 = {{i_0_reg_75}, {3'd0}};

assign shl_ln272_fu_169_p2 = zext_ln272_1_fu_149_p1 << zext_ln272_2_fu_165_p1;

assign shl_ln_fu_157_p3 = {{trunc_ln272_fu_153_p1}, {3'd0}};

assign state_address0 = zext_ln272_fu_144_p1;

assign trunc_ln272_fu_153_p1 = j_0_reg_86[2:0];

assign zext_ln270_fu_110_p1 = i_0_reg_75;

assign zext_ln271_fu_135_p1 = j_0_reg_86;

assign zext_ln272_1_fu_149_p1 = state_q0;

assign zext_ln272_2_fu_165_p1 = shl_ln_fu_157_p3;

assign zext_ln272_fu_144_p1 = add_ln272_fu_139_p2;

always @ (posedge ap_clk) begin
    shl_ln272_1_reg_196[2:0] <= 3'b000;
end

endmodule //fromBytesToWords
