// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_pp0_stage2 = 11'd8;
parameter    ap_ST_fsm_state6 = 11'd16;
parameter    ap_ST_fsm_pp1_stage0 = 11'd32;
parameter    ap_ST_fsm_pp1_stage1 = 11'd64;
parameter    ap_ST_fsm_pp1_stage2 = 11'd128;
parameter    ap_ST_fsm_pp1_stage3 = 11'd256;
parameter    ap_ST_fsm_pp1_stage4 = 11'd512;
parameter    ap_ST_fsm_state20 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
output   A_we0;
output  [63:0] A_d0;
input  [63:0] A_q0;
output  [4:0] A_address1;
output   A_ce1;
output   A_we1;
output  [63:0] A_d1;
input  [63:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg A_we0;
reg[63:0] A_d0;
reg[4:0] A_address1;
reg A_ce1;
reg A_we1;
reg[63:0] A_d1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] x_0_reg_246;
reg   [2:0] x_1_reg_258;
wire   [0:0] icmp_ln361_fu_270_p2;
reg   [0:0] icmp_ln361_reg_618;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] x_fu_276_p2;
reg   [2:0] x_reg_622;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln362_1_fu_292_p1;
reg   [63:0] zext_ln362_1_reg_627;
wire   [63:0] zext_ln362_2_fu_303_p1;
reg   [63:0] zext_ln362_2_reg_637;
wire   [4:0] zext_ln362_5_fu_308_p1;
reg   [4:0] zext_ln362_5_reg_647;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] zext_ln362_fu_312_p1;
reg   [63:0] zext_ln362_reg_652;
wire   [63:0] zext_ln362_3_fu_323_p1;
reg   [63:0] zext_ln362_3_reg_662;
wire   [63:0] zext_ln362_4_fu_333_p1;
reg   [63:0] zext_ln362_4_reg_672;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln363_fu_338_p2;
reg   [0:0] icmp_ln363_reg_682;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_state17_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln363_reg_682_pp1_iter1_reg;
reg   [0:0] icmp_ln363_reg_682_pp1_iter2_reg;
wire   [2:0] x_6_fu_344_p2;
reg   [2:0] x_6_reg_686;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] shl_ln_fu_350_p3;
reg   [3:0] shl_ln_reg_691;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_state13_pp1_stage1_iter1;
wire    ap_block_state18_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_state9_pp1_stage2_iter0;
wire    ap_block_state14_pp1_stage2_iter1;
wire    ap_block_state19_pp1_stage2_iter2;
wire    ap_block_pp1_stage2_11001;
wire   [4:0] zext_ln364_12_fu_386_p1;
reg   [4:0] zext_ln364_12_reg_709;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state10_pp1_stage3_iter0;
wire    ap_block_state15_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_11001;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state11_pp1_stage4_iter0;
wire    ap_block_state16_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_11001;
wire   [4:0] zext_ln364_10_fu_412_p1;
reg   [4:0] zext_ln364_10_reg_724;
wire   [3:0] zext_ln364_11_fu_416_p1;
reg   [3:0] zext_ln364_11_reg_730;
wire   [63:0] tempA_q1;
reg   [63:0] tempA_load_reg_745;
reg    ap_enable_reg_pp1_iter1;
wire   [63:0] tempA_q0;
reg   [63:0] tempA_load_1_reg_750;
wire   [4:0] add_ln364_fu_472_p2;
reg   [4:0] add_ln364_reg_765;
reg   [63:0] tempA_load_2_reg_770;
reg   [63:0] tempA_load_3_reg_775;
wire   [2:0] grp_fu_369_p2;
reg   [2:0] urem_ln364_1_reg_785;
reg   [63:0] tempA_load_4_reg_790;
wire   [2:0] grp_fu_380_p2;
reg   [2:0] urem_ln364_2_reg_795;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_pp1_stage2_subdone;
reg    ap_enable_reg_pp1_iter2;
reg   [4:0] tempA_address0;
reg    tempA_ce0;
reg    tempA_we0;
reg   [63:0] tempA_d0;
reg   [4:0] tempA_address1;
reg    tempA_ce1;
reg    tempA_we1;
reg   [63:0] tempA_d1;
reg   [2:0] ap_phi_mux_x_0_phi_fu_250_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_x_1_phi_fu_262_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln364_fu_420_p1;
wire   [63:0] zext_ln364_5_fu_431_p1;
wire   [63:0] zext_ln364_2_fu_441_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln364_3_fu_451_p1;
wire   [63:0] zext_ln364_4_fu_483_p1;
wire    ap_block_pp1_stage2;
wire   [63:0] zext_ln364_1_fu_488_p1;
wire    ap_block_pp1_stage3;
wire   [63:0] zext_ln364_6_fu_519_p1;
wire    ap_block_pp1_stage4;
wire   [63:0] zext_ln364_7_fu_551_p1;
wire   [63:0] zext_ln364_8_fu_582_p1;
wire   [63:0] zext_ln364_9_fu_613_p1;
wire   [3:0] zext_ln362_6_fu_282_p1;
wire   [3:0] add_ln362_fu_286_p2;
wire   [3:0] add_ln362_1_fu_297_p2;
wire   [4:0] add_ln362_2_fu_317_p2;
wire   [4:0] add_ln362_3_fu_328_p2;
wire   [3:0] grp_fu_358_p0;
wire   [3:0] grp_fu_369_p0;
wire   [3:0] grp_fu_380_p0;
wire   [4:0] grp_fu_395_p0;
wire   [3:0] grp_fu_395_p1;
wire   [4:0] grp_fu_406_p0;
wire   [3:0] grp_fu_406_p1;
wire   [3:0] add_ln364_1_fu_425_p2;
wire   [3:0] add_ln364_7_fu_436_p2;
wire   [4:0] add_ln364_3_fu_446_p2;
wire   [3:0] grp_fu_358_p2;
wire   [2:0] trunc_ln364_fu_460_p1;
wire   [4:0] shl_ln364_1_fu_464_p3;
wire   [4:0] zext_ln364_13_fu_456_p1;
wire   [4:0] add_ln364_4_fu_478_p2;
wire   [2:0] trunc_ln364_1_fu_492_p1;
wire   [2:0] add_ln364_5_fu_503_p2;
wire   [4:0] zext_ln364_14_fu_509_p1;
wire   [4:0] shl_ln364_2_fu_495_p3;
wire   [4:0] add_ln364_6_fu_513_p2;
wire   [2:0] trunc_ln364_2_fu_524_p1;
wire   [2:0] add_ln364_9_fu_535_p2;
wire   [4:0] zext_ln364_15_fu_541_p1;
wire   [4:0] shl_ln364_3_fu_527_p3;
wire   [4:0] add_ln364_10_fu_545_p2;
wire   [4:0] grp_fu_395_p2;
wire   [2:0] trunc_ln364_3_fu_556_p1;
wire   [2:0] add_ln364_12_fu_566_p2;
wire   [4:0] zext_ln364_16_fu_572_p1;
wire   [4:0] shl_ln364_fu_560_p2;
wire   [4:0] add_ln364_13_fu_576_p2;
wire   [4:0] grp_fu_406_p2;
wire   [3:0] trunc_ln364_4_fu_587_p1;
wire   [3:0] add_ln364_15_fu_597_p2;
wire   [4:0] zext_ln364_17_fu_603_p1;
wire   [4:0] shl_ln364_4_fu_591_p2;
wire   [4:0] add_ln364_16_fu_607_p2;
wire    ap_CS_fsm_state20;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

pi_tempA #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
tempA_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tempA_address0),
    .ce0(tempA_ce0),
    .we0(tempA_we0),
    .d0(tempA_d0),
    .q0(tempA_q0),
    .address1(tempA_address1),
    .ce1(tempA_ce1),
    .we1(tempA_we1),
    .d1(tempA_d1),
    .q1(tempA_q1)
);

crypto_sign_urem_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
crypto_sign_urem_bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_358_p0),
    .din1(4'd5),
    .ce(1'b1),
    .dout(grp_fu_358_p2)
);

crypto_sign_urem_cud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
crypto_sign_urem_cud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_369_p0),
    .din1(4'd5),
    .ce(1'b1),
    .dout(grp_fu_369_p2)
);

crypto_sign_urem_cud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 3 ))
crypto_sign_urem_cud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_380_p0),
    .din1(4'd5),
    .ce(1'b1),
    .dout(grp_fu_380_p2)
);

crypto_sign_urem_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 5 ))
crypto_sign_urem_dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .din1(grp_fu_395_p1),
    .ce(1'b1),
    .dout(grp_fu_395_p2)
);

crypto_sign_urem_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 5 ))
crypto_sign_urem_dEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage4_subdone) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln361_reg_618 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_0_reg_246 <= x_reg_622;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_0_reg_246 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        x_1_reg_258 <= 3'd0;
    end else if (((icmp_ln363_reg_682 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x_1_reg_258 <= x_6_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001))) begin
        add_ln364_reg_765 <= add_ln364_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln361_reg_618 <= icmp_ln361_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln363_reg_682 <= icmp_ln363_fu_338_p2;
        icmp_ln363_reg_682_pp1_iter1_reg <= icmp_ln363_reg_682;
        icmp_ln363_reg_682_pp1_iter2_reg <= icmp_ln363_reg_682_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        shl_ln_reg_691[3 : 1] <= shl_ln_fu_350_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        tempA_load_1_reg_750 <= tempA_q0;
        tempA_load_reg_745 <= tempA_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001))) begin
        tempA_load_2_reg_770 <= tempA_q1;
        tempA_load_3_reg_775 <= tempA_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        tempA_load_4_reg_790 <= tempA_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        urem_ln364_1_reg_785 <= grp_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
        urem_ln364_2_reg_795 <= grp_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x_6_reg_686 <= x_6_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_622 <= x_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln361_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln362_1_reg_627[3 : 0] <= zext_ln362_1_fu_292_p1[3 : 0];
        zext_ln362_2_reg_637[3 : 0] <= zext_ln362_2_fu_303_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln361_reg_618 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln362_3_reg_662[4 : 0] <= zext_ln362_3_fu_323_p1[4 : 0];
        zext_ln362_5_reg_647[2 : 0] <= zext_ln362_5_fu_308_p1[2 : 0];
        zext_ln362_reg_652[2 : 0] <= zext_ln362_fu_312_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln361_reg_618 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        zext_ln362_4_reg_672[4 : 0] <= zext_ln362_4_fu_333_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln364_10_reg_724[2 : 0] <= zext_ln364_10_fu_412_p1[2 : 0];
        zext_ln364_11_reg_730[2 : 0] <= zext_ln364_11_fu_416_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln363_reg_682 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001))) begin
        zext_ln364_12_reg_709[3 : 1] <= zext_ln364_12_fu_386_p1[3 : 1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        A_address0 = zext_ln364_8_fu_582_p1;
    end else if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        A_address0 = zext_ln364_1_fu_488_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_address0 = zext_ln362_4_fu_333_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_address0 = zext_ln362_fu_312_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = zext_ln362_1_fu_292_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        A_address1 = zext_ln364_9_fu_613_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_address1 = zext_ln364_7_fu_551_p1;
    end else if (((1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
        A_address1 = zext_ln364_6_fu_519_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_address1 = zext_ln362_3_fu_323_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address1 = zext_ln362_2_fu_303_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        A_d0 = tempA_load_3_reg_775;
    end else if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        A_d0 = tempA_load_reg_745;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        A_d1 = tempA_load_4_reg_790;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_d1 = tempA_load_2_reg_770;
    end else if (((1'b0 == ap_block_pp1_stage4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4))) begin
        A_d1 = tempA_load_1_reg_750;
    end else begin
        A_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3) & (1'b0 == ap_block_pp1_stage3_11001)) | ((icmp_ln363_reg_682_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage4_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((icmp_ln363_reg_682_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((icmp_ln363_reg_682_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln361_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln363_fu_338_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln361_reg_618 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_x_0_phi_fu_250_p4 = x_reg_622;
    end else begin
        ap_phi_mux_x_0_phi_fu_250_p4 = x_0_reg_246;
    end
end

always @ (*) begin
    if (((icmp_ln363_reg_682 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_x_1_phi_fu_262_p4 = x_6_reg_686;
    end else begin
        ap_phi_mux_x_1_phi_fu_262_p4 = x_1_reg_258;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tempA_address0 = zext_ln364_3_fu_451_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempA_address0 = zext_ln364_5_fu_431_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tempA_address0 = zext_ln362_4_reg_672;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tempA_address0 = zext_ln362_3_reg_662;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tempA_address0 = zext_ln362_1_reg_627;
    end else begin
        tempA_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        tempA_address1 = zext_ln364_4_fu_483_p1;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tempA_address1 = zext_ln364_2_fu_441_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempA_address1 = zext_ln364_fu_420_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tempA_address1 = zext_ln362_reg_652;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tempA_address1 = zext_ln362_2_reg_637;
    end else begin
        tempA_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        tempA_ce0 = 1'b1;
    end else begin
        tempA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        tempA_ce1 = 1'b1;
    end else begin
        tempA_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tempA_d0 = A_q1;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        tempA_d0 = A_q0;
    end else begin
        tempA_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            tempA_d1 = A_q0;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            tempA_d1 = A_q1;
        end else begin
            tempA_d1 = 'bx;
        end
    end else begin
        tempA_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln361_reg_618 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln361_reg_618 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln361_reg_618 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        tempA_we0 = 1'b1;
    end else begin
        tempA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln361_reg_618 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln361_reg_618 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        tempA_we1 = 1'b1;
    end else begin
        tempA_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln361_fu_270_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln361_fu_270_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln363_fu_338_p2 == 1'd1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln363_fu_338_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((~((1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) & (1'b0 == ap_block_pp1_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else if (((1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln362_1_fu_297_p2 = ($signed(zext_ln362_6_fu_282_p1) + $signed(4'd10));

assign add_ln362_2_fu_317_p2 = (zext_ln362_5_fu_308_p1 + 5'd15);

assign add_ln362_3_fu_328_p2 = ($signed(zext_ln362_5_reg_647) + $signed(5'd20));

assign add_ln362_fu_286_p2 = (zext_ln362_6_fu_282_p1 + 4'd5);

assign add_ln364_10_fu_545_p2 = (zext_ln364_15_fu_541_p1 + shl_ln364_3_fu_527_p3);

assign add_ln364_12_fu_566_p2 = (3'd3 + trunc_ln364_3_fu_556_p1);

assign add_ln364_13_fu_576_p2 = (zext_ln364_16_fu_572_p1 + shl_ln364_fu_560_p2);

assign add_ln364_15_fu_597_p2 = (4'd4 + trunc_ln364_4_fu_587_p1);

assign add_ln364_16_fu_607_p2 = (zext_ln364_17_fu_603_p1 + shl_ln364_4_fu_591_p2);

assign add_ln364_1_fu_425_p2 = (4'd5 + zext_ln364_11_fu_416_p1);

assign add_ln364_3_fu_446_p2 = (5'd15 + zext_ln364_10_reg_724);

assign add_ln364_4_fu_478_p2 = ($signed(5'd20) + $signed(zext_ln364_10_reg_724));

assign add_ln364_5_fu_503_p2 = (3'd1 + trunc_ln364_1_fu_492_p1);

assign add_ln364_6_fu_513_p2 = (zext_ln364_14_fu_509_p1 + shl_ln364_2_fu_495_p3);

assign add_ln364_7_fu_436_p2 = ($signed(4'd10) + $signed(zext_ln364_11_reg_730));

assign add_ln364_9_fu_535_p2 = (3'd2 + trunc_ln364_2_fu_524_p1);

assign add_ln364_fu_472_p2 = (shl_ln364_1_fu_464_p3 + zext_ln364_13_fu_456_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign grp_fu_358_p0 = {{ap_phi_mux_x_1_phi_fu_262_p4}, {1'd0}};

assign grp_fu_369_p0 = (4'd3 + shl_ln_reg_691);

assign grp_fu_380_p0 = (4'd6 + shl_ln_reg_691);

assign grp_fu_395_p0 = (5'd9 + zext_ln364_12_fu_386_p1);

assign grp_fu_395_p1 = 5'd5;

assign grp_fu_406_p0 = (5'd12 + zext_ln364_12_reg_709);

assign grp_fu_406_p1 = 5'd5;

assign icmp_ln361_fu_270_p2 = ((ap_phi_mux_x_0_phi_fu_250_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln363_fu_338_p2 = ((ap_phi_mux_x_1_phi_fu_262_p4 == 3'd5) ? 1'b1 : 1'b0);

assign shl_ln364_1_fu_464_p3 = {{trunc_ln364_fu_460_p1}, {2'd0}};

assign shl_ln364_2_fu_495_p3 = {{trunc_ln364_1_fu_492_p1}, {2'd0}};

assign shl_ln364_3_fu_527_p3 = {{trunc_ln364_2_fu_524_p1}, {2'd0}};

assign shl_ln364_4_fu_591_p2 = grp_fu_406_p2 << 5'd2;

assign shl_ln364_fu_560_p2 = grp_fu_395_p2 << 5'd2;

assign shl_ln_fu_350_p3 = {{ap_phi_mux_x_1_phi_fu_262_p4}, {1'd0}};

assign trunc_ln364_1_fu_492_p1 = urem_ln364_1_reg_785[2:0];

assign trunc_ln364_2_fu_524_p1 = urem_ln364_2_reg_795[2:0];

assign trunc_ln364_3_fu_556_p1 = grp_fu_395_p2[2:0];

assign trunc_ln364_4_fu_587_p1 = grp_fu_406_p2[3:0];

assign trunc_ln364_fu_460_p1 = grp_fu_358_p2[2:0];

assign x_6_fu_344_p2 = (ap_phi_mux_x_1_phi_fu_262_p4 + 3'd1);

assign x_fu_276_p2 = (ap_phi_mux_x_0_phi_fu_250_p4 + 3'd1);

assign zext_ln362_1_fu_292_p1 = add_ln362_fu_286_p2;

assign zext_ln362_2_fu_303_p1 = add_ln362_1_fu_297_p2;

assign zext_ln362_3_fu_323_p1 = add_ln362_2_fu_317_p2;

assign zext_ln362_4_fu_333_p1 = add_ln362_3_fu_328_p2;

assign zext_ln362_5_fu_308_p1 = x_0_reg_246;

assign zext_ln362_6_fu_282_p1 = ap_phi_mux_x_0_phi_fu_250_p4;

assign zext_ln362_fu_312_p1 = x_0_reg_246;

assign zext_ln364_10_fu_412_p1 = x_1_reg_258;

assign zext_ln364_11_fu_416_p1 = x_1_reg_258;

assign zext_ln364_12_fu_386_p1 = shl_ln_reg_691;

assign zext_ln364_13_fu_456_p1 = grp_fu_358_p2;

assign zext_ln364_14_fu_509_p1 = add_ln364_5_fu_503_p2;

assign zext_ln364_15_fu_541_p1 = add_ln364_9_fu_535_p2;

assign zext_ln364_16_fu_572_p1 = add_ln364_12_fu_566_p2;

assign zext_ln364_17_fu_603_p1 = add_ln364_15_fu_597_p2;

assign zext_ln364_1_fu_488_p1 = add_ln364_reg_765;

assign zext_ln364_2_fu_441_p1 = add_ln364_7_fu_436_p2;

assign zext_ln364_3_fu_451_p1 = add_ln364_3_fu_446_p2;

assign zext_ln364_4_fu_483_p1 = add_ln364_4_fu_478_p2;

assign zext_ln364_5_fu_431_p1 = add_ln364_1_fu_425_p2;

assign zext_ln364_6_fu_519_p1 = add_ln364_6_fu_513_p2;

assign zext_ln364_7_fu_551_p1 = add_ln364_10_fu_545_p2;

assign zext_ln364_8_fu_582_p1 = add_ln364_13_fu_576_p2;

assign zext_ln364_9_fu_613_p1 = add_ln364_16_fu_607_p2;

assign zext_ln364_fu_420_p1 = x_1_reg_258;

always @ (posedge ap_clk) begin
    zext_ln362_1_reg_627[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln362_2_reg_637[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln362_5_reg_647[4:3] <= 2'b00;
    zext_ln362_reg_652[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln362_3_reg_662[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln362_4_reg_672[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_691[0] <= 1'b0;
    zext_ln364_12_reg_709[0] <= 1'b0;
    zext_ln364_12_reg_709[4] <= 1'b0;
    zext_ln364_10_reg_724[4:3] <= 2'b00;
    zext_ln364_11_reg_730[3] <= 1'b0;
end

endmodule //pi
